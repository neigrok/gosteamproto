// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: service_partnermeetsteam.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CParterMeetSteam_TestFireEmails_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClanEventGid *uint64 `protobuf:"fixed64,1,opt,name=clan_event_gid,json=clanEventGid" json:"clan_event_gid,omitempty"`
	Steamid      *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CParterMeetSteam_TestFireEmails_Request) Reset() {
	*x = CParterMeetSteam_TestFireEmails_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParterMeetSteam_TestFireEmails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParterMeetSteam_TestFireEmails_Request) ProtoMessage() {}

func (x *CParterMeetSteam_TestFireEmails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParterMeetSteam_TestFireEmails_Request.ProtoReflect.Descriptor instead.
func (*CParterMeetSteam_TestFireEmails_Request) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{0}
}

func (x *CParterMeetSteam_TestFireEmails_Request) GetClanEventGid() uint64 {
	if x != nil && x.ClanEventGid != nil {
		return *x.ClanEventGid
	}
	return 0
}

func (x *CParterMeetSteam_TestFireEmails_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CParterMeetSteam_TestFireEmails_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessionids []uint32 `protobuf:"varint,1,rep,name=sessionids" json:"sessionids,omitempty"`
}

func (x *CParterMeetSteam_TestFireEmails_Response) Reset() {
	*x = CParterMeetSteam_TestFireEmails_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParterMeetSteam_TestFireEmails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParterMeetSteam_TestFireEmails_Response) ProtoMessage() {}

func (x *CParterMeetSteam_TestFireEmails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParterMeetSteam_TestFireEmails_Response.ProtoReflect.Descriptor instead.
func (*CParterMeetSteam_TestFireEmails_Response) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{1}
}

func (x *CParterMeetSteam_TestFireEmails_Response) GetSessionids() []uint32 {
	if x != nil {
		return x.Sessionids
	}
	return nil
}

type CPartnerEmailAndName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Partnerid *uint32 `protobuf:"varint,2,opt,name=partnerid" json:"partnerid,omitempty"`
	Realname  *string `protobuf:"bytes,3,opt,name=realname" json:"realname,omitempty"`
	Email     *string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
}

func (x *CPartnerEmailAndName) Reset() {
	*x = CPartnerEmailAndName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerEmailAndName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerEmailAndName) ProtoMessage() {}

func (x *CPartnerEmailAndName) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerEmailAndName.ProtoReflect.Descriptor instead.
func (*CPartnerEmailAndName) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{2}
}

func (x *CPartnerEmailAndName) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CPartnerEmailAndName) GetPartnerid() uint32 {
	if x != nil && x.Partnerid != nil {
		return *x.Partnerid
	}
	return 0
}

func (x *CPartnerEmailAndName) GetRealname() string {
	if x != nil && x.Realname != nil {
		return *x.Realname
	}
	return ""
}

func (x *CPartnerEmailAndName) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

type CPartnerMeetSteam_EmailInvitees_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClanEventGid *uint64 `protobuf:"fixed64,1,opt,name=clan_event_gid,json=clanEventGid" json:"clan_event_gid,omitempty"`
	Steamid      *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CPartnerMeetSteam_EmailInvitees_Request) Reset() {
	*x = CPartnerMeetSteam_EmailInvitees_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerMeetSteam_EmailInvitees_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerMeetSteam_EmailInvitees_Request) ProtoMessage() {}

func (x *CPartnerMeetSteam_EmailInvitees_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerMeetSteam_EmailInvitees_Request.ProtoReflect.Descriptor instead.
func (*CPartnerMeetSteam_EmailInvitees_Request) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{3}
}

func (x *CPartnerMeetSteam_EmailInvitees_Request) GetClanEventGid() uint64 {
	if x != nil && x.ClanEventGid != nil {
		return *x.ClanEventGid
	}
	return 0
}

func (x *CPartnerMeetSteam_EmailInvitees_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CPartnerMeetSteam_EmailInvitees_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumEmailed *uint32 `protobuf:"varint,1,opt,name=num_emailed,json=numEmailed" json:"num_emailed,omitempty"`
	NumSkipped *uint32 `protobuf:"varint,2,opt,name=num_skipped,json=numSkipped" json:"num_skipped,omitempty"`
}

func (x *CPartnerMeetSteam_EmailInvitees_Response) Reset() {
	*x = CPartnerMeetSteam_EmailInvitees_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerMeetSteam_EmailInvitees_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerMeetSteam_EmailInvitees_Response) ProtoMessage() {}

func (x *CPartnerMeetSteam_EmailInvitees_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerMeetSteam_EmailInvitees_Response.ProtoReflect.Descriptor instead.
func (*CPartnerMeetSteam_EmailInvitees_Response) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{4}
}

func (x *CPartnerMeetSteam_EmailInvitees_Response) GetNumEmailed() uint32 {
	if x != nil && x.NumEmailed != nil {
		return *x.NumEmailed
	}
	return 0
}

func (x *CPartnerMeetSteam_EmailInvitees_Response) GetNumSkipped() uint32 {
	if x != nil && x.NumSkipped != nil {
		return *x.NumSkipped
	}
	return 0
}

type CPartnerMeetSteam_GetAvailability_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClanEventGid *uint64 `protobuf:"fixed64,1,opt,name=clan_event_gid,json=clanEventGid" json:"clan_event_gid,omitempty"`
}

func (x *CPartnerMeetSteam_GetAvailability_Request) Reset() {
	*x = CPartnerMeetSteam_GetAvailability_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerMeetSteam_GetAvailability_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerMeetSteam_GetAvailability_Request) ProtoMessage() {}

func (x *CPartnerMeetSteam_GetAvailability_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerMeetSteam_GetAvailability_Request.ProtoReflect.Descriptor instead.
func (*CPartnerMeetSteam_GetAvailability_Request) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{5}
}

func (x *CPartnerMeetSteam_GetAvailability_Request) GetClanEventGid() uint64 {
	if x != nil && x.ClanEventGid != nil {
		return *x.ClanEventGid
	}
	return 0
}

type CPartnerMeetSteam_GetAvailability_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Availability []*CPartnerMeetSteam_GetAvailability_Response_Session `protobuf:"bytes,1,rep,name=availability" json:"availability,omitempty"`
}

func (x *CPartnerMeetSteam_GetAvailability_Response) Reset() {
	*x = CPartnerMeetSteam_GetAvailability_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerMeetSteam_GetAvailability_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerMeetSteam_GetAvailability_Response) ProtoMessage() {}

func (x *CPartnerMeetSteam_GetAvailability_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerMeetSteam_GetAvailability_Response.ProtoReflect.Descriptor instead.
func (*CPartnerMeetSteam_GetAvailability_Response) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{6}
}

func (x *CPartnerMeetSteam_GetAvailability_Response) GetAvailability() []*CPartnerMeetSteam_GetAvailability_Response_Session {
	if x != nil {
		return x.Availability
	}
	return nil
}

type CPartnerMeetSteam_GetAvailability_Response_Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    *uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	SessionId  *uint32 `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	GuestCount *uint32 `protobuf:"varint,3,opt,name=guest_count,json=guestCount" json:"guest_count,omitempty"`
}

func (x *CPartnerMeetSteam_GetAvailability_Response_Session) Reset() {
	*x = CPartnerMeetSteam_GetAvailability_Response_Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerMeetSteam_GetAvailability_Response_Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerMeetSteam_GetAvailability_Response_Session) ProtoMessage() {}

func (x *CPartnerMeetSteam_GetAvailability_Response_Session) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerMeetSteam_GetAvailability_Response_Session.ProtoReflect.Descriptor instead.
func (*CPartnerMeetSteam_GetAvailability_Response_Session) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{7}
}

func (x *CPartnerMeetSteam_GetAvailability_Response_Session) GetGroupId() uint32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *CPartnerMeetSteam_GetAvailability_Response_Session) GetSessionId() uint32 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CPartnerMeetSteam_GetAvailability_Response_Session) GetGuestCount() uint32 {
	if x != nil && x.GuestCount != nil {
		return *x.GuestCount
	}
	return 0
}

type CPartnerMeetSteam_GetBatchPartnerEmailAndName_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountids []uint32 `protobuf:"varint,1,rep,name=accountids" json:"accountids,omitempty"`
	Partnerids []uint32 `protobuf:"varint,2,rep,name=partnerids" json:"partnerids,omitempty"`
}

func (x *CPartnerMeetSteam_GetBatchPartnerEmailAndName_Request) Reset() {
	*x = CPartnerMeetSteam_GetBatchPartnerEmailAndName_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerMeetSteam_GetBatchPartnerEmailAndName_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerMeetSteam_GetBatchPartnerEmailAndName_Request) ProtoMessage() {}

func (x *CPartnerMeetSteam_GetBatchPartnerEmailAndName_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerMeetSteam_GetBatchPartnerEmailAndName_Request.ProtoReflect.Descriptor instead.
func (*CPartnerMeetSteam_GetBatchPartnerEmailAndName_Request) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{8}
}

func (x *CPartnerMeetSteam_GetBatchPartnerEmailAndName_Request) GetAccountids() []uint32 {
	if x != nil {
		return x.Accountids
	}
	return nil
}

func (x *CPartnerMeetSteam_GetBatchPartnerEmailAndName_Request) GetPartnerids() []uint32 {
	if x != nil {
		return x.Partnerids
	}
	return nil
}

type CPartnerMeetSteam_GetBatchPartnerEmailAndName_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info []*CPartnerEmailAndName `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (x *CPartnerMeetSteam_GetBatchPartnerEmailAndName_Response) Reset() {
	*x = CPartnerMeetSteam_GetBatchPartnerEmailAndName_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerMeetSteam_GetBatchPartnerEmailAndName_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerMeetSteam_GetBatchPartnerEmailAndName_Response) ProtoMessage() {}

func (x *CPartnerMeetSteam_GetBatchPartnerEmailAndName_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerMeetSteam_GetBatchPartnerEmailAndName_Response.ProtoReflect.Descriptor instead.
func (*CPartnerMeetSteam_GetBatchPartnerEmailAndName_Response) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{9}
}

func (x *CPartnerMeetSteam_GetBatchPartnerEmailAndName_Response) GetInfo() []*CPartnerEmailAndName {
	if x != nil {
		return x.Info
	}
	return nil
}

type CPartnerMeetSteam_GetRegistrations_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClanEventGid *uint64 `protobuf:"fixed64,1,opt,name=clan_event_gid,json=clanEventGid" json:"clan_event_gid,omitempty"`
	Steamid      *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CPartnerMeetSteam_GetRegistrations_Request) Reset() {
	*x = CPartnerMeetSteam_GetRegistrations_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerMeetSteam_GetRegistrations_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerMeetSteam_GetRegistrations_Request) ProtoMessage() {}

func (x *CPartnerMeetSteam_GetRegistrations_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerMeetSteam_GetRegistrations_Request.ProtoReflect.Descriptor instead.
func (*CPartnerMeetSteam_GetRegistrations_Request) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{10}
}

func (x *CPartnerMeetSteam_GetRegistrations_Request) GetClanEventGid() uint64 {
	if x != nil && x.ClanEventGid != nil {
		return *x.ClanEventGid
	}
	return 0
}

func (x *CPartnerMeetSteam_GetRegistrations_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CPartnerMeetSteam_GetRegistrations_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registrations []*CPartnerMeetSteam_GetRegistrations_Response_Registration `protobuf:"bytes,1,rep,name=registrations" json:"registrations,omitempty"`
}

func (x *CPartnerMeetSteam_GetRegistrations_Response) Reset() {
	*x = CPartnerMeetSteam_GetRegistrations_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerMeetSteam_GetRegistrations_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerMeetSteam_GetRegistrations_Response) ProtoMessage() {}

func (x *CPartnerMeetSteam_GetRegistrations_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerMeetSteam_GetRegistrations_Response.ProtoReflect.Descriptor instead.
func (*CPartnerMeetSteam_GetRegistrations_Response) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{11}
}

func (x *CPartnerMeetSteam_GetRegistrations_Response) GetRegistrations() []*CPartnerMeetSteam_GetRegistrations_Response_Registration {
	if x != nil {
		return x.Registrations
	}
	return nil
}

type CPartnerMeetSteam_GetRegistrations_Response_Registration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId          *uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	SessionId        *uint32 `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Steamid          *uint64 `protobuf:"fixed64,3,opt,name=steamid" json:"steamid,omitempty"`
	GuestsRegistered *uint32 `protobuf:"varint,4,opt,name=guests_registered,json=guestsRegistered" json:"guests_registered,omitempty"`
	Jsondata         *string `protobuf:"bytes,5,opt,name=jsondata" json:"jsondata,omitempty"`
}

func (x *CPartnerMeetSteam_GetRegistrations_Response_Registration) Reset() {
	*x = CPartnerMeetSteam_GetRegistrations_Response_Registration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerMeetSteam_GetRegistrations_Response_Registration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerMeetSteam_GetRegistrations_Response_Registration) ProtoMessage() {}

func (x *CPartnerMeetSteam_GetRegistrations_Response_Registration) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerMeetSteam_GetRegistrations_Response_Registration.ProtoReflect.Descriptor instead.
func (*CPartnerMeetSteam_GetRegistrations_Response_Registration) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{12}
}

func (x *CPartnerMeetSteam_GetRegistrations_Response_Registration) GetGroupId() uint32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *CPartnerMeetSteam_GetRegistrations_Response_Registration) GetSessionId() uint32 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CPartnerMeetSteam_GetRegistrations_Response_Registration) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPartnerMeetSteam_GetRegistrations_Response_Registration) GetGuestsRegistered() uint32 {
	if x != nil && x.GuestsRegistered != nil {
		return *x.GuestsRegistered
	}
	return 0
}

func (x *CPartnerMeetSteam_GetRegistrations_Response_Registration) GetJsondata() string {
	if x != nil && x.Jsondata != nil {
		return *x.Jsondata
	}
	return ""
}

type CPartnerMeetSteam_GetSaleEventOrganizers_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RtOldestDate *uint32 `protobuf:"varint,1,opt,name=rt_oldest_date,json=rtOldestDate" json:"rt_oldest_date,omitempty"`
}

func (x *CPartnerMeetSteam_GetSaleEventOrganizers_Request) Reset() {
	*x = CPartnerMeetSteam_GetSaleEventOrganizers_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerMeetSteam_GetSaleEventOrganizers_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerMeetSteam_GetSaleEventOrganizers_Request) ProtoMessage() {}

func (x *CPartnerMeetSteam_GetSaleEventOrganizers_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerMeetSteam_GetSaleEventOrganizers_Request.ProtoReflect.Descriptor instead.
func (*CPartnerMeetSteam_GetSaleEventOrganizers_Request) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{13}
}

func (x *CPartnerMeetSteam_GetSaleEventOrganizers_Request) GetRtOldestDate() uint32 {
	if x != nil && x.RtOldestDate != nil {
		return *x.RtOldestDate
	}
	return 0
}

type CPartnerMeetSteam_GetSaleEventOrganizers_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info []*CSaleEventOrganizerInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (x *CPartnerMeetSteam_GetSaleEventOrganizers_Response) Reset() {
	*x = CPartnerMeetSteam_GetSaleEventOrganizers_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerMeetSteam_GetSaleEventOrganizers_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerMeetSteam_GetSaleEventOrganizers_Response) ProtoMessage() {}

func (x *CPartnerMeetSteam_GetSaleEventOrganizers_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerMeetSteam_GetSaleEventOrganizers_Response.ProtoReflect.Descriptor instead.
func (*CPartnerMeetSteam_GetSaleEventOrganizers_Response) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{14}
}

func (x *CPartnerMeetSteam_GetSaleEventOrganizers_Response) GetInfo() []*CSaleEventOrganizerInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CPartnerMeetSteam_UpdateRegistration_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClanEventGid          *uint64 `protobuf:"fixed64,1,opt,name=clan_event_gid,json=clanEventGid" json:"clan_event_gid,omitempty"`
	Steamid               *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	RegistrationGroupId   *uint32 `protobuf:"varint,3,opt,name=registration_group_id,json=registrationGroupId" json:"registration_group_id,omitempty"`
	RegistrationSessionId *uint32 `protobuf:"varint,4,opt,name=registration_session_id,json=registrationSessionId" json:"registration_session_id,omitempty"`
	GuestCount            *uint32 `protobuf:"varint,5,opt,name=guest_count,json=guestCount" json:"guest_count,omitempty"`
	Jsondata              *string `protobuf:"bytes,7,opt,name=jsondata" json:"jsondata,omitempty"`
	SkipEmail             *bool   `protobuf:"varint,8,opt,name=skip_email,json=skipEmail" json:"skip_email,omitempty"`
}

func (x *CPartnerMeetSteam_UpdateRegistration_Request) Reset() {
	*x = CPartnerMeetSteam_UpdateRegistration_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerMeetSteam_UpdateRegistration_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerMeetSteam_UpdateRegistration_Request) ProtoMessage() {}

func (x *CPartnerMeetSteam_UpdateRegistration_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerMeetSteam_UpdateRegistration_Request.ProtoReflect.Descriptor instead.
func (*CPartnerMeetSteam_UpdateRegistration_Request) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{15}
}

func (x *CPartnerMeetSteam_UpdateRegistration_Request) GetClanEventGid() uint64 {
	if x != nil && x.ClanEventGid != nil {
		return *x.ClanEventGid
	}
	return 0
}

func (x *CPartnerMeetSteam_UpdateRegistration_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPartnerMeetSteam_UpdateRegistration_Request) GetRegistrationGroupId() uint32 {
	if x != nil && x.RegistrationGroupId != nil {
		return *x.RegistrationGroupId
	}
	return 0
}

func (x *CPartnerMeetSteam_UpdateRegistration_Request) GetRegistrationSessionId() uint32 {
	if x != nil && x.RegistrationSessionId != nil {
		return *x.RegistrationSessionId
	}
	return 0
}

func (x *CPartnerMeetSteam_UpdateRegistration_Request) GetGuestCount() uint32 {
	if x != nil && x.GuestCount != nil {
		return *x.GuestCount
	}
	return 0
}

func (x *CPartnerMeetSteam_UpdateRegistration_Request) GetJsondata() string {
	if x != nil && x.Jsondata != nil {
		return *x.Jsondata
	}
	return ""
}

func (x *CPartnerMeetSteam_UpdateRegistration_Request) GetSkipEmail() bool {
	if x != nil && x.SkipEmail != nil {
		return *x.SkipEmail
	}
	return false
}

type CPartnerMeetSteam_UpdateRegistration_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPartnerMeetSteam_UpdateRegistration_Response) Reset() {
	*x = CPartnerMeetSteam_UpdateRegistration_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerMeetSteam_UpdateRegistration_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerMeetSteam_UpdateRegistration_Response) ProtoMessage() {}

func (x *CPartnerMeetSteam_UpdateRegistration_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerMeetSteam_UpdateRegistration_Response.ProtoReflect.Descriptor instead.
func (*CPartnerMeetSteam_UpdateRegistration_Response) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{16}
}

type CSaleEventOrganizerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid     *uint32  `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	ClanEventGids []uint64 `protobuf:"fixed64,2,rep,name=clan_event_gids,json=clanEventGids" json:"clan_event_gids,omitempty"`
}

func (x *CSaleEventOrganizerInfo) Reset() {
	*x = CSaleEventOrganizerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_partnermeetsteam_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSaleEventOrganizerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSaleEventOrganizerInfo) ProtoMessage() {}

func (x *CSaleEventOrganizerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_partnermeetsteam_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSaleEventOrganizerInfo.ProtoReflect.Descriptor instead.
func (*CSaleEventOrganizerInfo) Descriptor() ([]byte, []int) {
	return file_service_partnermeetsteam_proto_rawDescGZIP(), []int{17}
}

func (x *CSaleEventOrganizerInfo) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CSaleEventOrganizerInfo) GetClanEventGids() []uint64 {
	if x != nil {
		return x.ClanEventGids
	}
	return nil
}

var File_service_partnermeetsteam_proto protoreflect.FileDescriptor

var file_service_partnermeetsteam_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x6d, 0x65, 0x65, 0x74, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x69, 0x0a, 0x27, 0x43, 0x50, 0x61, 0x72, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x72, 0x65, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x28, 0x43,
	0x50, 0x61, 0x72, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x72, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x43, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x69,
	0x0a, 0x27, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61,
	0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x28, 0x43, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d,
	0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x22, 0x51, 0x0a, 0x29, 0x43, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x47, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x63, 0x6c,
	0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x2a, 0x43,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x32, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d,
	0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x77, 0x0a, 0x35, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x73, 0x22, 0x63, 0x0a,
	0x36, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0x6c, 0x0a, 0x2a, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65,
	0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x22, 0x8e, 0x01, 0x0a, 0x2b, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65,
	0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5f, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xd7, 0x01, 0x0a, 0x38, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65,
	0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x67, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x30, 0x43,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x72, 0x74, 0x5f, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x74, 0x4f, 0x6c, 0x64, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x61, 0x0a, 0x31, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x53, 0x61, 0x6c, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xb6, 0x02, 0x0a, 0x2c, 0x43, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61,
	0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x2f, 0x0a, 0x2d, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65,
	0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5f, 0x0a, 0x17, 0x43, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x06, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47,
	0x69, 0x64, 0x73, 0x32, 0xc1, 0x06, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d,
	0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x64, 0x0a, 0x0d, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x43, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65,
	0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x2a, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x2e, 0x43, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65,
	0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x6e, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2b, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x72, 0x73, 0x12, 0x31, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d,
	0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
	0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0e, 0x54,
	0x65, 0x73, 0x74, 0x46, 0x69, 0x72, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x2e,
	0x43, 0x50, 0x61, 0x72, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x72, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x65,
	0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x46,
	0x69, 0x72, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x73, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
}

var (
	file_service_partnermeetsteam_proto_rawDescOnce sync.Once
	file_service_partnermeetsteam_proto_rawDescData = file_service_partnermeetsteam_proto_rawDesc
)

func file_service_partnermeetsteam_proto_rawDescGZIP() []byte {
	file_service_partnermeetsteam_proto_rawDescOnce.Do(func() {
		file_service_partnermeetsteam_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_partnermeetsteam_proto_rawDescData)
	})
	return file_service_partnermeetsteam_proto_rawDescData
}

var file_service_partnermeetsteam_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_service_partnermeetsteam_proto_goTypes = []any{
	(*CParterMeetSteam_TestFireEmails_Request)(nil),                  // 0: CParterMeetSteam_TestFireEmails_Request
	(*CParterMeetSteam_TestFireEmails_Response)(nil),                 // 1: CParterMeetSteam_TestFireEmails_Response
	(*CPartnerEmailAndName)(nil),                                     // 2: CPartnerEmailAndName
	(*CPartnerMeetSteam_EmailInvitees_Request)(nil),                  // 3: CPartnerMeetSteam_EmailInvitees_Request
	(*CPartnerMeetSteam_EmailInvitees_Response)(nil),                 // 4: CPartnerMeetSteam_EmailInvitees_Response
	(*CPartnerMeetSteam_GetAvailability_Request)(nil),                // 5: CPartnerMeetSteam_GetAvailability_Request
	(*CPartnerMeetSteam_GetAvailability_Response)(nil),               // 6: CPartnerMeetSteam_GetAvailability_Response
	(*CPartnerMeetSteam_GetAvailability_Response_Session)(nil),       // 7: CPartnerMeetSteam_GetAvailability_Response_Session
	(*CPartnerMeetSteam_GetBatchPartnerEmailAndName_Request)(nil),    // 8: CPartnerMeetSteam_GetBatchPartnerEmailAndName_Request
	(*CPartnerMeetSteam_GetBatchPartnerEmailAndName_Response)(nil),   // 9: CPartnerMeetSteam_GetBatchPartnerEmailAndName_Response
	(*CPartnerMeetSteam_GetRegistrations_Request)(nil),               // 10: CPartnerMeetSteam_GetRegistrations_Request
	(*CPartnerMeetSteam_GetRegistrations_Response)(nil),              // 11: CPartnerMeetSteam_GetRegistrations_Response
	(*CPartnerMeetSteam_GetRegistrations_Response_Registration)(nil), // 12: CPartnerMeetSteam_GetRegistrations_Response_Registration
	(*CPartnerMeetSteam_GetSaleEventOrganizers_Request)(nil),         // 13: CPartnerMeetSteam_GetSaleEventOrganizers_Request
	(*CPartnerMeetSteam_GetSaleEventOrganizers_Response)(nil),        // 14: CPartnerMeetSteam_GetSaleEventOrganizers_Response
	(*CPartnerMeetSteam_UpdateRegistration_Request)(nil),             // 15: CPartnerMeetSteam_UpdateRegistration_Request
	(*CPartnerMeetSteam_UpdateRegistration_Response)(nil),            // 16: CPartnerMeetSteam_UpdateRegistration_Response
	(*CSaleEventOrganizerInfo)(nil),                                  // 17: CSaleEventOrganizerInfo
}
var file_service_partnermeetsteam_proto_depIdxs = []int32{
	7,  // 0: CPartnerMeetSteam_GetAvailability_Response.availability:type_name -> CPartnerMeetSteam_GetAvailability_Response_Session
	2,  // 1: CPartnerMeetSteam_GetBatchPartnerEmailAndName_Response.info:type_name -> CPartnerEmailAndName
	12, // 2: CPartnerMeetSteam_GetRegistrations_Response.registrations:type_name -> CPartnerMeetSteam_GetRegistrations_Response_Registration
	17, // 3: CPartnerMeetSteam_GetSaleEventOrganizers_Response.info:type_name -> CSaleEventOrganizerInfo
	3,  // 4: PartnerMeetSteam.EmailInvitees:input_type -> CPartnerMeetSteam_EmailInvitees_Request
	5,  // 5: PartnerMeetSteam.GetAvailability:input_type -> CPartnerMeetSteam_GetAvailability_Request
	8,  // 6: PartnerMeetSteam.GetBatchPartnerEmailAndName:input_type -> CPartnerMeetSteam_GetBatchPartnerEmailAndName_Request
	10, // 7: PartnerMeetSteam.GetRegistrations:input_type -> CPartnerMeetSteam_GetRegistrations_Request
	13, // 8: PartnerMeetSteam.GetSaleEventOrganizers:input_type -> CPartnerMeetSteam_GetSaleEventOrganizers_Request
	0,  // 9: PartnerMeetSteam.TestFireEmails:input_type -> CParterMeetSteam_TestFireEmails_Request
	15, // 10: PartnerMeetSteam.UpdateRegistration:input_type -> CPartnerMeetSteam_UpdateRegistration_Request
	4,  // 11: PartnerMeetSteam.EmailInvitees:output_type -> CPartnerMeetSteam_EmailInvitees_Response
	6,  // 12: PartnerMeetSteam.GetAvailability:output_type -> CPartnerMeetSteam_GetAvailability_Response
	9,  // 13: PartnerMeetSteam.GetBatchPartnerEmailAndName:output_type -> CPartnerMeetSteam_GetBatchPartnerEmailAndName_Response
	11, // 14: PartnerMeetSteam.GetRegistrations:output_type -> CPartnerMeetSteam_GetRegistrations_Response
	14, // 15: PartnerMeetSteam.GetSaleEventOrganizers:output_type -> CPartnerMeetSteam_GetSaleEventOrganizers_Response
	1,  // 16: PartnerMeetSteam.TestFireEmails:output_type -> CParterMeetSteam_TestFireEmails_Response
	16, // 17: PartnerMeetSteam.UpdateRegistration:output_type -> CPartnerMeetSteam_UpdateRegistration_Response
	11, // [11:18] is the sub-list for method output_type
	4,  // [4:11] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_service_partnermeetsteam_proto_init() }
func file_service_partnermeetsteam_proto_init() {
	if File_service_partnermeetsteam_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_partnermeetsteam_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CParterMeetSteam_TestFireEmails_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_partnermeetsteam_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CParterMeetSteam_TestFireEmails_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_partnermeetsteam_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CPartnerEmailAndName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_partnermeetsteam_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CPartnerMeetSteam_EmailInvitees_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_partnermeetsteam_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CPartnerMeetSteam_EmailInvitees_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_partnermeetsteam_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CPartnerMeetSteam_GetAvailability_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_partnermeetsteam_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CPartnerMeetSteam_GetAvailability_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_partnermeetsteam_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CPartnerMeetSteam_GetAvailability_Response_Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_partnermeetsteam_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CPartnerMeetSteam_GetBatchPartnerEmailAndName_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_partnermeetsteam_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CPartnerMeetSteam_GetBatchPartnerEmailAndName_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_partnermeetsteam_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CPartnerMeetSteam_GetRegistrations_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_partnermeetsteam_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CPartnerMeetSteam_GetRegistrations_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_partnermeetsteam_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CPartnerMeetSteam_GetRegistrations_Response_Registration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_partnermeetsteam_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CPartnerMeetSteam_GetSaleEventOrganizers_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_partnermeetsteam_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CPartnerMeetSteam_GetSaleEventOrganizers_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_partnermeetsteam_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CPartnerMeetSteam_UpdateRegistration_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_partnermeetsteam_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CPartnerMeetSteam_UpdateRegistration_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_partnermeetsteam_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CSaleEventOrganizerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_partnermeetsteam_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_partnermeetsteam_proto_goTypes,
		DependencyIndexes: file_service_partnermeetsteam_proto_depIdxs,
		MessageInfos:      file_service_partnermeetsteam_proto_msgTypes,
	}.Build()
	File_service_partnermeetsteam_proto = out.File
	file_service_partnermeetsteam_proto_rawDesc = nil
	file_service_partnermeetsteam_proto_goTypes = nil
	file_service_partnermeetsteam_proto_depIdxs = nil
}
