// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: service_steamlearn.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMsgSteamLearn_BatchOperation_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheDataRequests []*CMsgSteamLearn_CacheData_Request       `protobuf:"bytes,1,rep,name=cache_data_requests,json=cacheDataRequests" json:"cache_data_requests,omitempty"`
	SnapshotRequests  []*CMsgSteamLearn_SnapshotProject_Request `protobuf:"bytes,2,rep,name=snapshot_requests,json=snapshotRequests" json:"snapshot_requests,omitempty"`
	InferenceRequests []*CMsgSteamLearn_Inference_Request       `protobuf:"bytes,3,rep,name=inference_requests,json=inferenceRequests" json:"inference_requests,omitempty"`
}

func (x *CMsgSteamLearn_BatchOperation_Request) Reset() {
	*x = CMsgSteamLearn_BatchOperation_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_BatchOperation_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_BatchOperation_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_BatchOperation_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_BatchOperation_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_BatchOperation_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgSteamLearn_BatchOperation_Request) GetCacheDataRequests() []*CMsgSteamLearn_CacheData_Request {
	if x != nil {
		return x.CacheDataRequests
	}
	return nil
}

func (x *CMsgSteamLearn_BatchOperation_Request) GetSnapshotRequests() []*CMsgSteamLearn_SnapshotProject_Request {
	if x != nil {
		return x.SnapshotRequests
	}
	return nil
}

func (x *CMsgSteamLearn_BatchOperation_Request) GetInferenceRequests() []*CMsgSteamLearn_Inference_Request {
	if x != nil {
		return x.InferenceRequests
	}
	return nil
}

type CMsgSteamLearn_BatchOperation_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheDataResponses []*CMsgSteamLearn_CacheData_Response       `protobuf:"bytes,1,rep,name=cache_data_responses,json=cacheDataResponses" json:"cache_data_responses,omitempty"`
	SnapshotResponses  []*CMsgSteamLearn_SnapshotProject_Response `protobuf:"bytes,2,rep,name=snapshot_responses,json=snapshotResponses" json:"snapshot_responses,omitempty"`
	InferenceResponses []*CMsgSteamLearn_Inference_Response       `protobuf:"bytes,3,rep,name=inference_responses,json=inferenceResponses" json:"inference_responses,omitempty"`
}

func (x *CMsgSteamLearn_BatchOperation_Response) Reset() {
	*x = CMsgSteamLearn_BatchOperation_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_BatchOperation_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_BatchOperation_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_BatchOperation_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_BatchOperation_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_BatchOperation_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgSteamLearn_BatchOperation_Response) GetCacheDataResponses() []*CMsgSteamLearn_CacheData_Response {
	if x != nil {
		return x.CacheDataResponses
	}
	return nil
}

func (x *CMsgSteamLearn_BatchOperation_Response) GetSnapshotResponses() []*CMsgSteamLearn_SnapshotProject_Response {
	if x != nil {
		return x.SnapshotResponses
	}
	return nil
}

func (x *CMsgSteamLearn_BatchOperation_Response) GetInferenceResponses() []*CMsgSteamLearn_Inference_Response {
	if x != nil {
		return x.InferenceResponses
	}
	return nil
}

type CMsgSteamLearn_CacheData_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken *string             `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	Data        *CMsgSteamLearnData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (x *CMsgSteamLearn_CacheData_Request) Reset() {
	*x = CMsgSteamLearn_CacheData_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_CacheData_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_CacheData_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_CacheData_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_CacheData_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_CacheData_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgSteamLearn_CacheData_Request) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *CMsgSteamLearn_CacheData_Request) GetData() *CMsgSteamLearnData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CMsgSteamLearn_CacheData_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheDataResult *int32 `protobuf:"varint,1,opt,name=cache_data_result,json=cacheDataResult" json:"cache_data_result,omitempty"`
}

func (x *CMsgSteamLearn_CacheData_Response) Reset() {
	*x = CMsgSteamLearn_CacheData_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_CacheData_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_CacheData_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_CacheData_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_CacheData_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_CacheData_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgSteamLearn_CacheData_Response) GetCacheDataResult() int32 {
	if x != nil && x.CacheDataResult != nil {
		return *x.CacheDataResult
	}
	return 0
}

type CMsgSteamLearn_CreateProject_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName        *string `protobuf:"bytes,1,opt,name=project_name,json=projectName" json:"project_name,omitempty"`
	ProjectDescription *string `protobuf:"bytes,2,opt,name=project_description,json=projectDescription" json:"project_description,omitempty"`
}

func (x *CMsgSteamLearn_CreateProject_Request) Reset() {
	*x = CMsgSteamLearn_CreateProject_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_CreateProject_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_CreateProject_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_CreateProject_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_CreateProject_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_CreateProject_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgSteamLearn_CreateProject_Request) GetProjectName() string {
	if x != nil && x.ProjectName != nil {
		return *x.ProjectName
	}
	return ""
}

func (x *CMsgSteamLearn_CreateProject_Request) GetProjectDescription() string {
	if x != nil && x.ProjectDescription != nil {
		return *x.ProjectDescription
	}
	return ""
}

type CMsgSteamLearn_CreateProject_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *int32                 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Project *CMsgSteamLearnProject `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
}

func (x *CMsgSteamLearn_CreateProject_Response) Reset() {
	*x = CMsgSteamLearn_CreateProject_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_CreateProject_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_CreateProject_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_CreateProject_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_CreateProject_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_CreateProject_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgSteamLearn_CreateProject_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgSteamLearn_CreateProject_Response) GetProject() *CMsgSteamLearnProject {
	if x != nil {
		return x.Project
	}
	return nil
}

type CMsgSteamLearn_EditProject_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project          *CMsgSteamLearnProject `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	PublishedVersion *uint32                `protobuf:"varint,2,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
}

func (x *CMsgSteamLearn_EditProject_Request) Reset() {
	*x = CMsgSteamLearn_EditProject_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_EditProject_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_EditProject_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_EditProject_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_EditProject_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_EditProject_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgSteamLearn_EditProject_Request) GetProject() *CMsgSteamLearnProject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *CMsgSteamLearn_EditProject_Request) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

type CMsgSteamLearn_EditProject_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (x *CMsgSteamLearn_EditProject_Response) Reset() {
	*x = CMsgSteamLearn_EditProject_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_EditProject_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_EditProject_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_EditProject_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_EditProject_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_EditProject_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgSteamLearn_EditProject_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

type CMsgSteamLearn_GetAccessTokens_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CMsgSteamLearn_GetAccessTokens_Request) Reset() {
	*x = CMsgSteamLearn_GetAccessTokens_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetAccessTokens_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetAccessTokens_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_GetAccessTokens_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetAccessTokens_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetAccessTokens_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgSteamLearn_GetAccessTokens_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CMsgSteamLearn_GetAccessTokens_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       *int32                      `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	AccessTokens *CMsgSteamLearnAccessTokens `protobuf:"bytes,2,opt,name=access_tokens,json=accessTokens" json:"access_tokens,omitempty"`
}

func (x *CMsgSteamLearn_GetAccessTokens_Response) Reset() {
	*x = CMsgSteamLearn_GetAccessTokens_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetAccessTokens_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetAccessTokens_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_GetAccessTokens_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetAccessTokens_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetAccessTokens_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgSteamLearn_GetAccessTokens_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgSteamLearn_GetAccessTokens_Response) GetAccessTokens() *CMsgSteamLearnAccessTokens {
	if x != nil {
		return x.AccessTokens
	}
	return nil
}

type CMsgSteamLearn_GetBatchedStatus_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FetchRequests []*CMsgSteamLearn_GetFetchStatus_Request `protobuf:"bytes,1,rep,name=fetch_requests,json=fetchRequests" json:"fetch_requests,omitempty"`
	TrainRequests []*CMsgSteamLearn_GetTrainStatus_Request `protobuf:"bytes,2,rep,name=train_requests,json=trainRequests" json:"train_requests,omitempty"`
}

func (x *CMsgSteamLearn_GetBatchedStatus_Request) Reset() {
	*x = CMsgSteamLearn_GetBatchedStatus_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetBatchedStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetBatchedStatus_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_GetBatchedStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetBatchedStatus_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetBatchedStatus_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgSteamLearn_GetBatchedStatus_Request) GetFetchRequests() []*CMsgSteamLearn_GetFetchStatus_Request {
	if x != nil {
		return x.FetchRequests
	}
	return nil
}

func (x *CMsgSteamLearn_GetBatchedStatus_Request) GetTrainRequests() []*CMsgSteamLearn_GetTrainStatus_Request {
	if x != nil {
		return x.TrainRequests
	}
	return nil
}

type CMsgSteamLearn_GetBatchedStatus_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result         *int32                                    `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	FetchResponses []*CMsgSteamLearn_GetFetchStatus_Response `protobuf:"bytes,2,rep,name=fetch_responses,json=fetchResponses" json:"fetch_responses,omitempty"`
	TrainResponses []*CMsgSteamLearn_GetTrainStatus_Response `protobuf:"bytes,3,rep,name=train_responses,json=trainResponses" json:"train_responses,omitempty"`
}

func (x *CMsgSteamLearn_GetBatchedStatus_Response) Reset() {
	*x = CMsgSteamLearn_GetBatchedStatus_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetBatchedStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetBatchedStatus_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_GetBatchedStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetBatchedStatus_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetBatchedStatus_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgSteamLearn_GetBatchedStatus_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgSteamLearn_GetBatchedStatus_Response) GetFetchResponses() []*CMsgSteamLearn_GetFetchStatus_Response {
	if x != nil {
		return x.FetchResponses
	}
	return nil
}

func (x *CMsgSteamLearn_GetBatchedStatus_Response) GetTrainResponses() []*CMsgSteamLearn_GetTrainStatus_Response {
	if x != nil {
		return x.TrainResponses
	}
	return nil
}

type CMsgSteamLearn_GetDataSource_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSourceId *uint32 `protobuf:"varint,1,opt,name=data_source_id,json=dataSourceId" json:"data_source_id,omitempty"`
}

func (x *CMsgSteamLearn_GetDataSource_Request) Reset() {
	*x = CMsgSteamLearn_GetDataSource_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetDataSource_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetDataSource_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_GetDataSource_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetDataSource_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetDataSource_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgSteamLearn_GetDataSource_Request) GetDataSourceId() uint32 {
	if x != nil && x.DataSourceId != nil {
		return *x.DataSourceId
	}
	return 0
}

type CMsgSteamLearn_GetDataSource_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSource *CMsgSteamLearnDataSource `protobuf:"bytes,1,opt,name=data_source,json=dataSource" json:"data_source,omitempty"`
}

func (x *CMsgSteamLearn_GetDataSource_Response) Reset() {
	*x = CMsgSteamLearn_GetDataSource_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetDataSource_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetDataSource_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_GetDataSource_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetDataSource_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetDataSource_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgSteamLearn_GetDataSource_Response) GetDataSource() *CMsgSteamLearnDataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

type CMsgSteamLearn_GetEmbeddingValues_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        *uint32  `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	PublishedVersion *uint32  `protobuf:"varint,2,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
	TrainId          *uint32  `protobuf:"varint,3,opt,name=train_id,json=trainId" json:"train_id,omitempty"`
	ExportName       *string  `protobuf:"bytes,4,opt,name=export_name,json=exportName" json:"export_name,omitempty"`
	NumericalValues  []uint32 `protobuf:"varint,5,rep,name=numerical_values,json=numericalValues" json:"numerical_values,omitempty"`
	FetchId          *uint32  `protobuf:"varint,6,opt,name=fetch_id,json=fetchId" json:"fetch_id,omitempty"`
}

func (x *CMsgSteamLearn_GetEmbeddingValues_Request) Reset() {
	*x = CMsgSteamLearn_GetEmbeddingValues_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetEmbeddingValues_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetEmbeddingValues_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_GetEmbeddingValues_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetEmbeddingValues_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetEmbeddingValues_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgSteamLearn_GetEmbeddingValues_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_GetEmbeddingValues_Request) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

func (x *CMsgSteamLearn_GetEmbeddingValues_Request) GetTrainId() uint32 {
	if x != nil && x.TrainId != nil {
		return *x.TrainId
	}
	return 0
}

func (x *CMsgSteamLearn_GetEmbeddingValues_Request) GetExportName() string {
	if x != nil && x.ExportName != nil {
		return *x.ExportName
	}
	return ""
}

func (x *CMsgSteamLearn_GetEmbeddingValues_Request) GetNumericalValues() []uint32 {
	if x != nil {
		return x.NumericalValues
	}
	return nil
}

func (x *CMsgSteamLearn_GetEmbeddingValues_Request) GetFetchId() uint32 {
	if x != nil && x.FetchId != nil {
		return *x.FetchId
	}
	return 0
}

type CMsgSteamLearn_GetEmbeddingValues_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        *int32                                                      `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	EmbeddingData []*CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData `protobuf:"bytes,2,rep,name=embedding_data,json=embeddingData" json:"embedding_data,omitempty"`
}

func (x *CMsgSteamLearn_GetEmbeddingValues_Response) Reset() {
	*x = CMsgSteamLearn_GetEmbeddingValues_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetEmbeddingValues_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetEmbeddingValues_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_GetEmbeddingValues_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetEmbeddingValues_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetEmbeddingValues_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgSteamLearn_GetEmbeddingValues_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgSteamLearn_GetEmbeddingValues_Response) GetEmbeddingData() []*CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData {
	if x != nil {
		return x.EmbeddingData
	}
	return nil
}

type CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumericalValue  *uint32   `protobuf:"varint,1,opt,name=numerical_value,json=numericalValue" json:"numerical_value,omitempty"`
	EmbeddingValues []float32 `protobuf:"fixed32,2,rep,name=embedding_values,json=embeddingValues" json:"embedding_values,omitempty"`
	FoundValue      *bool     `protobuf:"varint,3,opt,name=found_value,json=foundValue" json:"found_value,omitempty"`
}

func (x *CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData) Reset() {
	*x = CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData) ProtoMessage() {}

func (x *CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData) GetNumericalValue() uint32 {
	if x != nil && x.NumericalValue != nil {
		return *x.NumericalValue
	}
	return 0
}

func (x *CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData) GetEmbeddingValues() []float32 {
	if x != nil {
		return x.EmbeddingValues
	}
	return nil
}

func (x *CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData) GetFoundValue() bool {
	if x != nil && x.FoundValue != nil {
		return *x.FoundValue
	}
	return false
}

type CMsgSteamLearn_GetFetchStatus_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId *uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	FetchId   *uint32 `protobuf:"varint,2,opt,name=fetch_id,json=fetchId" json:"fetch_id,omitempty"`
}

func (x *CMsgSteamLearn_GetFetchStatus_Request) Reset() {
	*x = CMsgSteamLearn_GetFetchStatus_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetFetchStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetFetchStatus_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_GetFetchStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetFetchStatus_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetFetchStatus_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgSteamLearn_GetFetchStatus_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_GetFetchStatus_Request) GetFetchId() uint32 {
	if x != nil && x.FetchId != nil {
		return *x.FetchId
	}
	return 0
}

type CMsgSteamLearn_GetFetchStatus_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result             *int32                                             `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	FetchId            *uint32                                            `protobuf:"varint,2,opt,name=fetch_id,json=fetchId" json:"fetch_id,omitempty"`
	Status             *int32                                             `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	Workers            []*CMsgSteamLearn_GetFetchStatus_Response_Worker   `protobuf:"bytes,4,rep,name=workers" json:"workers,omitempty"`
	TotalRowsWritten   *uint32                                            `protobuf:"varint,5,opt,name=total_rows_written,json=totalRowsWritten" json:"total_rows_written,omitempty"`
	TotalRows          *uint32                                            `protobuf:"varint,6,opt,name=total_rows,json=totalRows" json:"total_rows,omitempty"`
	StartTime          *uint32                                            `protobuf:"varint,7,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime            *uint32                                            `protobuf:"varint,8,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	TotalRowsProcessed *uint32                                            `protobuf:"varint,9,opt,name=total_rows_processed,json=totalRowsProcessed" json:"total_rows_processed,omitempty"`
	ErrorString        *string                                            `protobuf:"bytes,10,opt,name=error_string,json=errorString" json:"error_string,omitempty"`
	ProjectId          *uint32                                            `protobuf:"varint,11,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	CancelPending      *bool                                              `protobuf:"varint,15,opt,name=cancel_pending,json=cancelPending" json:"cancel_pending,omitempty"`
	Metadata           []*CMsgSteamLearn_GetFetchStatus_Response_Metadata `protobuf:"bytes,16,rep,name=metadata" json:"metadata,omitempty"`
}

func (x *CMsgSteamLearn_GetFetchStatus_Response) Reset() {
	*x = CMsgSteamLearn_GetFetchStatus_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetFetchStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetFetchStatus_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_GetFetchStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetFetchStatus_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetFetchStatus_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgSteamLearn_GetFetchStatus_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgSteamLearn_GetFetchStatus_Response) GetFetchId() uint32 {
	if x != nil && x.FetchId != nil {
		return *x.FetchId
	}
	return 0
}

func (x *CMsgSteamLearn_GetFetchStatus_Response) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *CMsgSteamLearn_GetFetchStatus_Response) GetWorkers() []*CMsgSteamLearn_GetFetchStatus_Response_Worker {
	if x != nil {
		return x.Workers
	}
	return nil
}

func (x *CMsgSteamLearn_GetFetchStatus_Response) GetTotalRowsWritten() uint32 {
	if x != nil && x.TotalRowsWritten != nil {
		return *x.TotalRowsWritten
	}
	return 0
}

func (x *CMsgSteamLearn_GetFetchStatus_Response) GetTotalRows() uint32 {
	if x != nil && x.TotalRows != nil {
		return *x.TotalRows
	}
	return 0
}

func (x *CMsgSteamLearn_GetFetchStatus_Response) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgSteamLearn_GetFetchStatus_Response) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *CMsgSteamLearn_GetFetchStatus_Response) GetTotalRowsProcessed() uint32 {
	if x != nil && x.TotalRowsProcessed != nil {
		return *x.TotalRowsProcessed
	}
	return 0
}

func (x *CMsgSteamLearn_GetFetchStatus_Response) GetErrorString() string {
	if x != nil && x.ErrorString != nil {
		return *x.ErrorString
	}
	return ""
}

func (x *CMsgSteamLearn_GetFetchStatus_Response) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_GetFetchStatus_Response) GetCancelPending() bool {
	if x != nil && x.CancelPending != nil {
		return *x.CancelPending
	}
	return false
}

func (x *CMsgSteamLearn_GetFetchStatus_Response) GetMetadata() []*CMsgSteamLearn_GetFetchStatus_Response_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CMsgSteamLearn_GetFetchStatus_Response_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetadataPhase      *int32  `protobuf:"varint,1,opt,name=metadata_phase,json=metadataPhase" json:"metadata_phase,omitempty"`
	MetadataPhaseName  *string `protobuf:"bytes,2,opt,name=metadata_phase_name,json=metadataPhaseName" json:"metadata_phase_name,omitempty"`
	MetadataPhaseValue *uint32 `protobuf:"varint,3,opt,name=metadata_phase_value,json=metadataPhaseValue" json:"metadata_phase_value,omitempty"`
}

func (x *CMsgSteamLearn_GetFetchStatus_Response_Metadata) Reset() {
	*x = CMsgSteamLearn_GetFetchStatus_Response_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetFetchStatus_Response_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetFetchStatus_Response_Metadata) ProtoMessage() {}

func (x *CMsgSteamLearn_GetFetchStatus_Response_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetFetchStatus_Response_Metadata.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetFetchStatus_Response_Metadata) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgSteamLearn_GetFetchStatus_Response_Metadata) GetMetadataPhase() int32 {
	if x != nil && x.MetadataPhase != nil {
		return *x.MetadataPhase
	}
	return 0
}

func (x *CMsgSteamLearn_GetFetchStatus_Response_Metadata) GetMetadataPhaseName() string {
	if x != nil && x.MetadataPhaseName != nil {
		return *x.MetadataPhaseName
	}
	return ""
}

func (x *CMsgSteamLearn_GetFetchStatus_Response_Metadata) GetMetadataPhaseValue() uint32 {
	if x != nil && x.MetadataPhaseValue != nil {
		return *x.MetadataPhaseValue
	}
	return 0
}

type CMsgSteamLearn_GetFetchStatus_Response_Worker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowsWritten   *uint32 `protobuf:"varint,1,opt,name=rows_written,json=rowsWritten" json:"rows_written,omitempty"`
	Complete      *bool   `protobuf:"varint,2,opt,name=complete" json:"complete,omitempty"`
	RowsProcessed *uint32 `protobuf:"varint,3,opt,name=rows_processed,json=rowsProcessed" json:"rows_processed,omitempty"`
	RowsTotal     *uint32 `protobuf:"varint,4,opt,name=rows_total,json=rowsTotal" json:"rows_total,omitempty"`
}

func (x *CMsgSteamLearn_GetFetchStatus_Response_Worker) Reset() {
	*x = CMsgSteamLearn_GetFetchStatus_Response_Worker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetFetchStatus_Response_Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetFetchStatus_Response_Worker) ProtoMessage() {}

func (x *CMsgSteamLearn_GetFetchStatus_Response_Worker) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetFetchStatus_Response_Worker.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetFetchStatus_Response_Worker) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgSteamLearn_GetFetchStatus_Response_Worker) GetRowsWritten() uint32 {
	if x != nil && x.RowsWritten != nil {
		return *x.RowsWritten
	}
	return 0
}

func (x *CMsgSteamLearn_GetFetchStatus_Response_Worker) GetComplete() bool {
	if x != nil && x.Complete != nil {
		return *x.Complete
	}
	return false
}

func (x *CMsgSteamLearn_GetFetchStatus_Response_Worker) GetRowsProcessed() uint32 {
	if x != nil && x.RowsProcessed != nil {
		return *x.RowsProcessed
	}
	return 0
}

func (x *CMsgSteamLearn_GetFetchStatus_Response_Worker) GetRowsTotal() uint32 {
	if x != nil && x.RowsTotal != nil {
		return *x.RowsTotal
	}
	return 0
}

type CMsgSteamLearn_GetFetchStatusVersions_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        *uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	PublishedVersion *uint32 `protobuf:"varint,2,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
}

func (x *CMsgSteamLearn_GetFetchStatusVersions_Request) Reset() {
	*x = CMsgSteamLearn_GetFetchStatusVersions_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetFetchStatusVersions_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetFetchStatusVersions_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_GetFetchStatusVersions_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetFetchStatusVersions_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetFetchStatusVersions_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgSteamLearn_GetFetchStatusVersions_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_GetFetchStatusVersions_Request) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

type CMsgSteamLearn_GetFetchStatusVersions_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versions []uint32 `protobuf:"varint,1,rep,name=versions" json:"versions,omitempty"`
}

func (x *CMsgSteamLearn_GetFetchStatusVersions_Response) Reset() {
	*x = CMsgSteamLearn_GetFetchStatusVersions_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetFetchStatusVersions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetFetchStatusVersions_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_GetFetchStatusVersions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetFetchStatusVersions_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetFetchStatusVersions_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgSteamLearn_GetFetchStatusVersions_Response) GetVersions() []uint32 {
	if x != nil {
		return x.Versions
	}
	return nil
}

type CMsgSteamLearn_GetLogEvents_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimestamp   *uint32 `protobuf:"varint,1,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp     *uint32 `protobuf:"varint,2,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
	ProjectId        *uint32 `protobuf:"varint,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	PublishedVersion *uint32 `protobuf:"varint,4,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
}

func (x *CMsgSteamLearn_GetLogEvents_Request) Reset() {
	*x = CMsgSteamLearn_GetLogEvents_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetLogEvents_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetLogEvents_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_GetLogEvents_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetLogEvents_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetLogEvents_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgSteamLearn_GetLogEvents_Request) GetStartTimestamp() uint32 {
	if x != nil && x.StartTimestamp != nil {
		return *x.StartTimestamp
	}
	return 0
}

func (x *CMsgSteamLearn_GetLogEvents_Request) GetEndTimestamp() uint32 {
	if x != nil && x.EndTimestamp != nil {
		return *x.EndTimestamp
	}
	return 0
}

func (x *CMsgSteamLearn_GetLogEvents_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_GetLogEvents_Request) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

type CMsgSteamLearn_GetLogEvents_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *int32                     `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	EventList []*CMsgSteamLearn_LogEvent `protobuf:"bytes,2,rep,name=event_list,json=eventList" json:"event_list,omitempty"`
}

func (x *CMsgSteamLearn_GetLogEvents_Response) Reset() {
	*x = CMsgSteamLearn_GetLogEvents_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetLogEvents_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetLogEvents_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_GetLogEvents_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetLogEvents_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetLogEvents_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgSteamLearn_GetLogEvents_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgSteamLearn_GetLogEvents_Response) GetEventList() []*CMsgSteamLearn_LogEvent {
	if x != nil {
		return x.EventList
	}
	return nil
}

type CMsgSteamLearn_GetNearestEmbedding_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        *uint32   `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	PublishedVersion *uint32   `protobuf:"varint,2,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
	TrainId          *uint32   `protobuf:"varint,3,opt,name=train_id,json=trainId" json:"train_id,omitempty"`
	ExportName       *string   `protobuf:"bytes,4,opt,name=export_name,json=exportName" json:"export_name,omitempty"`
	ResultCount      *uint32   `protobuf:"varint,5,opt,name=result_count,json=resultCount" json:"result_count,omitempty"`
	Values           []float32 `protobuf:"fixed32,6,rep,name=values" json:"values,omitempty"`
	FetchId          *uint32   `protobuf:"varint,7,opt,name=fetch_id,json=fetchId" json:"fetch_id,omitempty"`
	PopularityWeight *uint32   `protobuf:"varint,8,opt,name=popularity_weight,json=popularityWeight" json:"popularity_weight,omitempty"`
	FocusWeight      *uint32   `protobuf:"varint,9,opt,name=focus_weight,json=focusWeight" json:"focus_weight,omitempty"`
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Request) Reset() {
	*x = CMsgSteamLearn_GetNearestEmbedding_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetNearestEmbedding_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_GetNearestEmbedding_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetNearestEmbedding_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetNearestEmbedding_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Request) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Request) GetTrainId() uint32 {
	if x != nil && x.TrainId != nil {
		return *x.TrainId
	}
	return 0
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Request) GetExportName() string {
	if x != nil && x.ExportName != nil {
		return *x.ExportName
	}
	return ""
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Request) GetResultCount() uint32 {
	if x != nil && x.ResultCount != nil {
		return *x.ResultCount
	}
	return 0
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Request) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Request) GetFetchId() uint32 {
	if x != nil && x.FetchId != nil {
		return *x.FetchId
	}
	return 0
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Request) GetPopularityWeight() uint32 {
	if x != nil && x.PopularityWeight != nil {
		return *x.PopularityWeight
	}
	return 0
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Request) GetFocusWeight() uint32 {
	if x != nil && x.FocusWeight != nil {
		return *x.FocusWeight
	}
	return 0
}

type CMsgSteamLearn_GetNearestEmbedding_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result         *int32                                                       `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	NearEmbeddings []*CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding `protobuf:"bytes,2,rep,name=near_embeddings,json=nearEmbeddings" json:"near_embeddings,omitempty"`
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Response) Reset() {
	*x = CMsgSteamLearn_GetNearestEmbedding_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetNearestEmbedding_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_GetNearestEmbedding_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetNearestEmbedding_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetNearestEmbedding_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Response) GetNearEmbeddings() []*CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding {
	if x != nil {
		return x.NearEmbeddings
	}
	return nil
}

type CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value           *uint32   `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Distance        *float32  `protobuf:"fixed32,2,opt,name=distance" json:"distance,omitempty"`
	EmbeddingValues []float32 `protobuf:"fixed32,3,rep,name=embedding_values,json=embeddingValues" json:"embedding_values,omitempty"`
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding) Reset() {
	*x = CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding) ProtoMessage() {}

func (x *CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

func (x *CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding) GetEmbeddingValues() []float32 {
	if x != nil {
		return x.EmbeddingValues
	}
	return nil
}

type CMsgSteamLearn_GetProject_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId *uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (x *CMsgSteamLearn_GetProject_Request) Reset() {
	*x = CMsgSteamLearn_GetProject_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetProject_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetProject_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_GetProject_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetProject_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetProject_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgSteamLearn_GetProject_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

type CMsgSteamLearn_GetProject_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project *CMsgSteamLearnProject `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
}

func (x *CMsgSteamLearn_GetProject_Response) Reset() {
	*x = CMsgSteamLearn_GetProject_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetProject_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetProject_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_GetProject_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetProject_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetProject_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgSteamLearn_GetProject_Response) GetProject() *CMsgSteamLearnProject {
	if x != nil {
		return x.Project
	}
	return nil
}

type CMsgSteamLearn_GetSnapshotStatus_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId            *uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	PublishedVersion     *uint32 `protobuf:"varint,2,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
	SnapshotExampleCount *uint32 `protobuf:"varint,3,opt,name=snapshot_example_count,json=snapshotExampleCount" json:"snapshot_example_count,omitempty"`
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Request) Reset() {
	*x = CMsgSteamLearn_GetSnapshotStatus_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetSnapshotStatus_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_GetSnapshotStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetSnapshotStatus_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetSnapshotStatus_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Request) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Request) GetSnapshotExampleCount() uint32 {
	if x != nil && x.SnapshotExampleCount != nil {
		return *x.SnapshotExampleCount
	}
	return 0
}

type CMsgSteamLearn_GetSnapshotStatus_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result                  *int32                           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	ProjectId               *uint32                          `protobuf:"varint,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	PublishedVersion        *uint32                          `protobuf:"varint,3,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
	SnapshotCount           *uint32                          `protobuf:"varint,4,opt,name=snapshot_count,json=snapshotCount" json:"snapshot_count,omitempty"`
	SnapshotObjectCount     *uint32                          `protobuf:"varint,5,opt,name=snapshot_object_count,json=snapshotObjectCount" json:"snapshot_object_count,omitempty"`
	SnapshotExamples        []*CMsgSteamLearnSnapshotStorage `protobuf:"bytes,6,rep,name=snapshot_examples,json=snapshotExamples" json:"snapshot_examples,omitempty"`
	AutosnapshotStatus      *int32                           `protobuf:"varint,7,opt,name=autosnapshot_status,json=autosnapshotStatus" json:"autosnapshot_status,omitempty"`
	AutosnapshotTimeStarted *uint32                          `protobuf:"varint,8,opt,name=autosnapshot_time_started,json=autosnapshotTimeStarted" json:"autosnapshot_time_started,omitempty"`
	AutosnapshotTimeEnded   *uint32                          `protobuf:"varint,9,opt,name=autosnapshot_time_ended,json=autosnapshotTimeEnded" json:"autosnapshot_time_ended,omitempty"`
	AutosnapshotKeyCurrent  *uint64                          `protobuf:"varint,10,opt,name=autosnapshot_key_current,json=autosnapshotKeyCurrent" json:"autosnapshot_key_current,omitempty"`
	AutosnapshotKeyMax      *uint64                          `protobuf:"varint,11,opt,name=autosnapshot_key_max,json=autosnapshotKeyMax" json:"autosnapshot_key_max,omitempty"`
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Response) Reset() {
	*x = CMsgSteamLearn_GetSnapshotStatus_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetSnapshotStatus_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_GetSnapshotStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetSnapshotStatus_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetSnapshotStatus_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Response) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Response) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Response) GetSnapshotCount() uint32 {
	if x != nil && x.SnapshotCount != nil {
		return *x.SnapshotCount
	}
	return 0
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Response) GetSnapshotObjectCount() uint32 {
	if x != nil && x.SnapshotObjectCount != nil {
		return *x.SnapshotObjectCount
	}
	return 0
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Response) GetSnapshotExamples() []*CMsgSteamLearnSnapshotStorage {
	if x != nil {
		return x.SnapshotExamples
	}
	return nil
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Response) GetAutosnapshotStatus() int32 {
	if x != nil && x.AutosnapshotStatus != nil {
		return *x.AutosnapshotStatus
	}
	return 0
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Response) GetAutosnapshotTimeStarted() uint32 {
	if x != nil && x.AutosnapshotTimeStarted != nil {
		return *x.AutosnapshotTimeStarted
	}
	return 0
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Response) GetAutosnapshotTimeEnded() uint32 {
	if x != nil && x.AutosnapshotTimeEnded != nil {
		return *x.AutosnapshotTimeEnded
	}
	return 0
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Response) GetAutosnapshotKeyCurrent() uint64 {
	if x != nil && x.AutosnapshotKeyCurrent != nil {
		return *x.AutosnapshotKeyCurrent
	}
	return 0
}

func (x *CMsgSteamLearn_GetSnapshotStatus_Response) GetAutosnapshotKeyMax() uint64 {
	if x != nil && x.AutosnapshotKeyMax != nil {
		return *x.AutosnapshotKeyMax
	}
	return 0
}

type CMsgSteamLearn_GetTrainLogs_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId *uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	FetchId   *uint32 `protobuf:"varint,2,opt,name=fetch_id,json=fetchId" json:"fetch_id,omitempty"`
	TrainId   *uint32 `protobuf:"varint,3,opt,name=train_id,json=trainId" json:"train_id,omitempty"`
}

func (x *CMsgSteamLearn_GetTrainLogs_Request) Reset() {
	*x = CMsgSteamLearn_GetTrainLogs_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetTrainLogs_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetTrainLogs_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_GetTrainLogs_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetTrainLogs_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetTrainLogs_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgSteamLearn_GetTrainLogs_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainLogs_Request) GetFetchId() uint32 {
	if x != nil && x.FetchId != nil {
		return *x.FetchId
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainLogs_Request) GetTrainId() uint32 {
	if x != nil && x.TrainId != nil {
		return *x.TrainId
	}
	return 0
}

type CMsgSteamLearn_GetTrainLogs_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          *int32   `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	MainLog         *string  `protobuf:"bytes,2,opt,name=main_log,json=mainLog" json:"main_log,omitempty"`
	FetchWorkerLogs []string `protobuf:"bytes,3,rep,name=fetch_worker_logs,json=fetchWorkerLogs" json:"fetch_worker_logs,omitempty"`
	GpuLog          *string  `protobuf:"bytes,4,opt,name=gpu_log,json=gpuLog" json:"gpu_log,omitempty"`
}

func (x *CMsgSteamLearn_GetTrainLogs_Response) Reset() {
	*x = CMsgSteamLearn_GetTrainLogs_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetTrainLogs_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetTrainLogs_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_GetTrainLogs_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetTrainLogs_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetTrainLogs_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgSteamLearn_GetTrainLogs_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainLogs_Response) GetMainLog() string {
	if x != nil && x.MainLog != nil {
		return *x.MainLog
	}
	return ""
}

func (x *CMsgSteamLearn_GetTrainLogs_Response) GetFetchWorkerLogs() []string {
	if x != nil {
		return x.FetchWorkerLogs
	}
	return nil
}

func (x *CMsgSteamLearn_GetTrainLogs_Response) GetGpuLog() string {
	if x != nil && x.GpuLog != nil {
		return *x.GpuLog
	}
	return ""
}

type CMsgSteamLearn_GetTrainStatus_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId *uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	TrainId   *uint32 `protobuf:"varint,2,opt,name=train_id,json=trainId" json:"train_id,omitempty"`
}

func (x *CMsgSteamLearn_GetTrainStatus_Request) Reset() {
	*x = CMsgSteamLearn_GetTrainStatus_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetTrainStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetTrainStatus_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_GetTrainStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetTrainStatus_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetTrainStatus_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgSteamLearn_GetTrainStatus_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Request) GetTrainId() uint32 {
	if x != nil && x.TrainId != nil {
		return *x.TrainId
	}
	return 0
}

type CMsgSteamLearn_GetTrainStatus_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result             *int32                                          `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	TrainId            *uint32                                         `protobuf:"varint,2,opt,name=train_id,json=trainId" json:"train_id,omitempty"`
	FetchId            *uint32                                         `protobuf:"varint,3,opt,name=fetch_id,json=fetchId" json:"fetch_id,omitempty"`
	Status             *int32                                          `protobuf:"varint,4,opt,name=status" json:"status,omitempty"`
	Epochs             []*CMsgSteamLearn_GetTrainStatus_Response_Epoch `protobuf:"bytes,5,rep,name=epochs" json:"epochs,omitempty"`
	TotalEpochs        *uint32                                         `protobuf:"varint,6,opt,name=total_epochs,json=totalEpochs" json:"total_epochs,omitempty"`
	TrainBatchCount    *uint32                                         `protobuf:"varint,7,opt,name=train_batch_count,json=trainBatchCount" json:"train_batch_count,omitempty"`
	ValidateBatchCount *uint32                                         `protobuf:"varint,8,opt,name=validate_batch_count,json=validateBatchCount" json:"validate_batch_count,omitempty"`
	TestBatchCount     *uint32                                         `protobuf:"varint,9,opt,name=test_batch_count,json=testBatchCount" json:"test_batch_count,omitempty"`
	TestBatches        []*CMsgSteamLearn_GetTrainStatus_Response_Batch `protobuf:"bytes,10,rep,name=test_batches,json=testBatches" json:"test_batches,omitempty"`
	TestLoss           *float32                                        `protobuf:"fixed32,11,opt,name=test_loss,json=testLoss" json:"test_loss,omitempty"`
	TestAccuracy       []float32                                       `protobuf:"fixed32,12,rep,name=test_accuracy,json=testAccuracy" json:"test_accuracy,omitempty"`
	StartTime          *uint32                                         `protobuf:"varint,13,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime            *uint32                                         `protobuf:"varint,14,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	ScheduledTrain     *bool                                           `protobuf:"varint,15,opt,name=scheduled_train,json=scheduledTrain" json:"scheduled_train,omitempty"`
	Live               *bool                                           `protobuf:"varint,16,opt,name=live" json:"live,omitempty"`
	Active             *bool                                           `protobuf:"varint,17,opt,name=active" json:"active,omitempty"`
	ProjectId          *uint32                                         `protobuf:"varint,18,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	CancelPending      *bool                                           `protobuf:"varint,19,opt,name=cancel_pending,json=cancelPending" json:"cancel_pending,omitempty"`
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) Reset() {
	*x = CMsgSteamLearn_GetTrainStatus_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetTrainStatus_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_GetTrainStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetTrainStatus_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetTrainStatus_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetTrainId() uint32 {
	if x != nil && x.TrainId != nil {
		return *x.TrainId
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetFetchId() uint32 {
	if x != nil && x.FetchId != nil {
		return *x.FetchId
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetEpochs() []*CMsgSteamLearn_GetTrainStatus_Response_Epoch {
	if x != nil {
		return x.Epochs
	}
	return nil
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetTotalEpochs() uint32 {
	if x != nil && x.TotalEpochs != nil {
		return *x.TotalEpochs
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetTrainBatchCount() uint32 {
	if x != nil && x.TrainBatchCount != nil {
		return *x.TrainBatchCount
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetValidateBatchCount() uint32 {
	if x != nil && x.ValidateBatchCount != nil {
		return *x.ValidateBatchCount
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetTestBatchCount() uint32 {
	if x != nil && x.TestBatchCount != nil {
		return *x.TestBatchCount
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetTestBatches() []*CMsgSteamLearn_GetTrainStatus_Response_Batch {
	if x != nil {
		return x.TestBatches
	}
	return nil
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetTestLoss() float32 {
	if x != nil && x.TestLoss != nil {
		return *x.TestLoss
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetTestAccuracy() []float32 {
	if x != nil {
		return x.TestAccuracy
	}
	return nil
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetScheduledTrain() bool {
	if x != nil && x.ScheduledTrain != nil {
		return *x.ScheduledTrain
	}
	return false
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetLive() bool {
	if x != nil && x.Live != nil {
		return *x.Live
	}
	return false
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response) GetCancelPending() bool {
	if x != nil && x.CancelPending != nil {
		return *x.CancelPending
	}
	return false
}

type CMsgSteamLearn_GetTrainStatus_Response_Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loss     *float32  `protobuf:"fixed32,1,opt,name=loss" json:"loss,omitempty"`
	BatchId  *uint32   `protobuf:"varint,3,opt,name=batch_id,json=batchId" json:"batch_id,omitempty"`
	F1Score  []float32 `protobuf:"fixed32,4,rep,name=f1_score,json=f1Score" json:"f1_score,omitempty"`
	Accuracy []float32 `protobuf:"fixed32,5,rep,name=accuracy" json:"accuracy,omitempty"`
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Batch) Reset() {
	*x = CMsgSteamLearn_GetTrainStatus_Response_Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetTrainStatus_Response_Batch) ProtoMessage() {}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Batch) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetTrainStatus_Response_Batch.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetTrainStatus_Response_Batch) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Batch) GetLoss() float32 {
	if x != nil && x.Loss != nil {
		return *x.Loss
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Batch) GetBatchId() uint32 {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Batch) GetF1Score() []float32 {
	if x != nil {
		return x.F1Score
	}
	return nil
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Batch) GetAccuracy() []float32 {
	if x != nil {
		return x.Accuracy
	}
	return nil
}

type CMsgSteamLearn_GetTrainStatus_Response_Epoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochNumber           *uint32                                         `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber" json:"epoch_number,omitempty"`
	EpochTrainLoss        *float32                                        `protobuf:"fixed32,2,opt,name=epoch_train_loss,json=epochTrainLoss" json:"epoch_train_loss,omitempty"`
	EpochTrainAccuracy    []float32                                       `protobuf:"fixed32,3,rep,name=epoch_train_accuracy,json=epochTrainAccuracy" json:"epoch_train_accuracy,omitempty"`
	EpochValidateLoss     *float32                                        `protobuf:"fixed32,4,opt,name=epoch_validate_loss,json=epochValidateLoss" json:"epoch_validate_loss,omitempty"`
	EpochValidateAccuracy []float32                                       `protobuf:"fixed32,5,rep,name=epoch_validate_accuracy,json=epochValidateAccuracy" json:"epoch_validate_accuracy,omitempty"`
	TrainBatches          []*CMsgSteamLearn_GetTrainStatus_Response_Batch `protobuf:"bytes,6,rep,name=train_batches,json=trainBatches" json:"train_batches,omitempty"`
	ValidateBatches       []*CMsgSteamLearn_GetTrainStatus_Response_Batch `protobuf:"bytes,7,rep,name=validate_batches,json=validateBatches" json:"validate_batches,omitempty"`
	StartTime             *uint32                                         `protobuf:"varint,8,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime               *uint32                                         `protobuf:"varint,9,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	EpochValidateF1Score  []float32                                       `protobuf:"fixed32,10,rep,name=epoch_validate_f1_score,json=epochValidateF1Score" json:"epoch_validate_f1_score,omitempty"`
	EpochTrainF1Score     []float32                                       `protobuf:"fixed32,11,rep,name=epoch_train_f1_score,json=epochTrainF1Score" json:"epoch_train_f1_score,omitempty"`
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Epoch) Reset() {
	*x = CMsgSteamLearn_GetTrainStatus_Response_Epoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Epoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetTrainStatus_Response_Epoch) ProtoMessage() {}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Epoch) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetTrainStatus_Response_Epoch.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetTrainStatus_Response_Epoch) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Epoch) GetEpochNumber() uint32 {
	if x != nil && x.EpochNumber != nil {
		return *x.EpochNumber
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Epoch) GetEpochTrainLoss() float32 {
	if x != nil && x.EpochTrainLoss != nil {
		return *x.EpochTrainLoss
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Epoch) GetEpochTrainAccuracy() []float32 {
	if x != nil {
		return x.EpochTrainAccuracy
	}
	return nil
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Epoch) GetEpochValidateLoss() float32 {
	if x != nil && x.EpochValidateLoss != nil {
		return *x.EpochValidateLoss
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Epoch) GetEpochValidateAccuracy() []float32 {
	if x != nil {
		return x.EpochValidateAccuracy
	}
	return nil
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Epoch) GetTrainBatches() []*CMsgSteamLearn_GetTrainStatus_Response_Batch {
	if x != nil {
		return x.TrainBatches
	}
	return nil
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Epoch) GetValidateBatches() []*CMsgSteamLearn_GetTrainStatus_Response_Batch {
	if x != nil {
		return x.ValidateBatches
	}
	return nil
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Epoch) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Epoch) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Epoch) GetEpochValidateF1Score() []float32 {
	if x != nil {
		return x.EpochValidateF1Score
	}
	return nil
}

func (x *CMsgSteamLearn_GetTrainStatus_Response_Epoch) GetEpochTrainF1Score() []float32 {
	if x != nil {
		return x.EpochTrainF1Score
	}
	return nil
}

type CMsgSteamLearn_GetTrainStatusVersions_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        *uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	PublishedVersion *uint32 `protobuf:"varint,2,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
}

func (x *CMsgSteamLearn_GetTrainStatusVersions_Request) Reset() {
	*x = CMsgSteamLearn_GetTrainStatusVersions_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetTrainStatusVersions_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetTrainStatusVersions_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_GetTrainStatusVersions_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetTrainStatusVersions_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetTrainStatusVersions_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{38}
}

func (x *CMsgSteamLearn_GetTrainStatusVersions_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_GetTrainStatusVersions_Request) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

type CMsgSteamLearn_GetTrainStatusVersions_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versions []uint32 `protobuf:"varint,1,rep,name=versions" json:"versions,omitempty"`
}

func (x *CMsgSteamLearn_GetTrainStatusVersions_Response) Reset() {
	*x = CMsgSteamLearn_GetTrainStatusVersions_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetTrainStatusVersions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetTrainStatusVersions_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_GetTrainStatusVersions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetTrainStatusVersions_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetTrainStatusVersions_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{39}
}

func (x *CMsgSteamLearn_GetTrainStatusVersions_Response) GetVersions() []uint32 {
	if x != nil {
		return x.Versions
	}
	return nil
}

type CMsgSteamLearn_Inference_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken      *string                 `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	ProjectId        *uint32                 `protobuf:"varint,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	PublishedVersion *uint32                 `protobuf:"varint,4,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
	OverrideTrainId  *uint32                 `protobuf:"varint,5,opt,name=override_train_id,json=overrideTrainId" json:"override_train_id,omitempty"`
	Data             *CMsgSteamLearnDataList `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	AdditionalData   []float32               `protobuf:"fixed32,7,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
	Keys             []uint64                `protobuf:"varint,8,rep,name=keys" json:"keys,omitempty"`
	NamedInference   *string                 `protobuf:"bytes,9,opt,name=named_inference,json=namedInference" json:"named_inference,omitempty"`
}

func (x *CMsgSteamLearn_Inference_Request) Reset() {
	*x = CMsgSteamLearn_Inference_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_Inference_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_Inference_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_Inference_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_Inference_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_Inference_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{40}
}

func (x *CMsgSteamLearn_Inference_Request) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *CMsgSteamLearn_Inference_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_Inference_Request) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

func (x *CMsgSteamLearn_Inference_Request) GetOverrideTrainId() uint32 {
	if x != nil && x.OverrideTrainId != nil {
		return *x.OverrideTrainId
	}
	return 0
}

func (x *CMsgSteamLearn_Inference_Request) GetData() *CMsgSteamLearnDataList {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CMsgSteamLearn_Inference_Request) GetAdditionalData() []float32 {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *CMsgSteamLearn_Inference_Request) GetKeys() []uint64 {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *CMsgSteamLearn_Inference_Request) GetNamedInference() string {
	if x != nil && x.NamedInference != nil {
		return *x.NamedInference
	}
	return ""
}

type CMsgSteamLearn_Inference_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InferenceResult *int32                                    `protobuf:"varint,1,opt,name=inference_result,json=inferenceResult" json:"inference_result,omitempty"`
	BackendResponse *CMsgSteamLearn_InferenceBackend_Response `protobuf:"bytes,2,opt,name=backend_response,json=backendResponse" json:"backend_response,omitempty"`
	Keys            []uint64                                  `protobuf:"varint,3,rep,name=keys" json:"keys,omitempty"`
}

func (x *CMsgSteamLearn_Inference_Response) Reset() {
	*x = CMsgSteamLearn_Inference_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_Inference_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_Inference_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_Inference_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_Inference_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_Inference_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{41}
}

func (x *CMsgSteamLearn_Inference_Response) GetInferenceResult() int32 {
	if x != nil && x.InferenceResult != nil {
		return *x.InferenceResult
	}
	return 0
}

func (x *CMsgSteamLearn_Inference_Response) GetBackendResponse() *CMsgSteamLearn_InferenceBackend_Response {
	if x != nil {
		return x.BackendResponse
	}
	return nil
}

func (x *CMsgSteamLearn_Inference_Response) GetKeys() []uint64 {
	if x != nil {
		return x.Keys
	}
	return nil
}

type CMsgSteamLearn_InferenceBackend_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId      *uint32                         `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	FetchId        *uint32                         `protobuf:"varint,2,opt,name=fetch_id,json=fetchId" json:"fetch_id,omitempty"`
	TrainId        *uint32                         `protobuf:"varint,3,opt,name=train_id,json=trainId" json:"train_id,omitempty"`
	Data           []*CMsgSteamLearnRawDataElement `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
	Keys           []uint64                        `protobuf:"varint,6,rep,name=keys" json:"keys,omitempty"`
	AdditionalData []float32                       `protobuf:"fixed32,7,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
	NamedInference *string                         `protobuf:"bytes,8,opt,name=named_inference,json=namedInference" json:"named_inference,omitempty"`
}

func (x *CMsgSteamLearn_InferenceBackend_Request) Reset() {
	*x = CMsgSteamLearn_InferenceBackend_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceBackend_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceBackend_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceBackend_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceBackend_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceBackend_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{42}
}

func (x *CMsgSteamLearn_InferenceBackend_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceBackend_Request) GetFetchId() uint32 {
	if x != nil && x.FetchId != nil {
		return *x.FetchId
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceBackend_Request) GetTrainId() uint32 {
	if x != nil && x.TrainId != nil {
		return *x.TrainId
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceBackend_Request) GetData() []*CMsgSteamLearnRawDataElement {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceBackend_Request) GetKeys() []uint64 {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceBackend_Request) GetAdditionalData() []float32 {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceBackend_Request) GetNamedInference() string {
	if x != nil && x.NamedInference != nil {
		return *x.NamedInference
	}
	return ""
}

type CMsgSteamLearn_InferenceBackend_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs []*CMsgSteamLearn_InferenceBackend_Response_Output `protobuf:"bytes,1,rep,name=outputs" json:"outputs,omitempty"`
}

func (x *CMsgSteamLearn_InferenceBackend_Response) Reset() {
	*x = CMsgSteamLearn_InferenceBackend_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceBackend_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceBackend_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceBackend_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceBackend_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceBackend_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{43}
}

func (x *CMsgSteamLearn_InferenceBackend_Response) GetOutputs() []*CMsgSteamLearn_InferenceBackend_Response_Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *float32 `protobuf:"fixed32,1,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput) Reset() {
	*x = CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{44}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput) GetValue() float32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight        []float32                                            `protobuf:"fixed32,1,rep,name=weight" json:"weight,omitempty"`
	Value         []float32                                            `protobuf:"fixed32,2,rep,name=value" json:"value,omitempty"`
	ValueSequence []*CMsgSteamLearn_InferenceBackend_Response_Sequence `protobuf:"bytes,3,rep,name=value_sequence,json=valueSequence" json:"value_sequence,omitempty"`
}

func (x *CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput) Reset() {
	*x = CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{45}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput) GetWeight() []float32 {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput) GetValueSequence() []*CMsgSteamLearn_InferenceBackend_Response_Sequence {
	if x != nil {
		return x.ValueSequence
	}
	return nil
}

type CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight        []float32                                            `protobuf:"fixed32,1,rep,name=weight" json:"weight,omitempty"`
	Value         []float32                                            `protobuf:"fixed32,2,rep,name=value" json:"value,omitempty"`
	ValueSequence []*CMsgSteamLearn_InferenceBackend_Response_Sequence `protobuf:"bytes,3,rep,name=value_sequence,json=valueSequence" json:"value_sequence,omitempty"`
}

func (x *CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput) Reset() {
	*x = CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{46}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput) GetWeight() []float32 {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput) GetValueSequence() []*CMsgSteamLearn_InferenceBackend_Response_Sequence {
	if x != nil {
		return x.ValueSequence
	}
	return nil
}

type CMsgSteamLearn_InferenceBackend_Response_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BinaryCrossentropy      *CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput      `protobuf:"bytes,1,opt,name=binary_crossentropy,json=binaryCrossentropy" json:"binary_crossentropy,omitempty"`
	CategoricalCrossentropy *CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput `protobuf:"bytes,2,opt,name=categorical_crossentropy,json=categoricalCrossentropy" json:"categorical_crossentropy,omitempty"`
	MultiBinaryCrossentropy *CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput `protobuf:"bytes,3,opt,name=multi_binary_crossentropy,json=multiBinaryCrossentropy" json:"multi_binary_crossentropy,omitempty"`
	Regression              *CMsgSteamLearn_InferenceBackend_Response_RegressionOutput              `protobuf:"bytes,4,opt,name=regression" json:"regression,omitempty"`
}

func (x *CMsgSteamLearn_InferenceBackend_Response_Output) Reset() {
	*x = CMsgSteamLearn_InferenceBackend_Response_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceBackend_Response_Output) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceBackend_Response_Output) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceBackend_Response_Output.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceBackend_Response_Output) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{47}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_Output) GetBinaryCrossentropy() *CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput {
	if x != nil {
		return x.BinaryCrossentropy
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceBackend_Response_Output) GetCategoricalCrossentropy() *CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput {
	if x != nil {
		return x.CategoricalCrossentropy
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceBackend_Response_Output) GetMultiBinaryCrossentropy() *CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput {
	if x != nil {
		return x.MultiBinaryCrossentropy
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceBackend_Response_Output) GetRegression() *CMsgSteamLearn_InferenceBackend_Response_RegressionOutput {
	if x != nil {
		return x.Regression
	}
	return nil
}

type CMsgSteamLearn_InferenceBackend_Response_RegressionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []float32 `protobuf:"fixed32,2,rep,name=value" json:"value,omitempty"`
}

func (x *CMsgSteamLearn_InferenceBackend_Response_RegressionOutput) Reset() {
	*x = CMsgSteamLearn_InferenceBackend_Response_RegressionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_RegressionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceBackend_Response_RegressionOutput) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceBackend_Response_RegressionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceBackend_Response_RegressionOutput.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceBackend_Response_RegressionOutput) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{48}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_RegressionOutput) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

type CMsgSteamLearn_InferenceBackend_Response_Sequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []float32 `protobuf:"fixed32,1,rep,name=value" json:"value,omitempty"`
}

func (x *CMsgSteamLearn_InferenceBackend_Response_Sequence) Reset() {
	*x = CMsgSteamLearn_InferenceBackend_Response_Sequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_Sequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceBackend_Response_Sequence) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceBackend_Response_Sequence) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceBackend_Response_Sequence.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceBackend_Response_Sequence) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{49}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_Sequence) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

type CMsgSteamLearn_InferenceMetadata_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken      *string `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	ProjectId        *uint32 `protobuf:"varint,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	PublishedVersion *uint32 `protobuf:"varint,4,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
	OverrideTrainId  *uint32 `protobuf:"varint,5,opt,name=override_train_id,json=overrideTrainId" json:"override_train_id,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Request) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{50}
}

func (x *CMsgSteamLearn_InferenceMetadata_Request) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *CMsgSteamLearn_InferenceMetadata_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Request) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Request) GetOverrideTrainId() uint32 {
	if x != nil && x.OverrideTrainId != nil {
		return *x.OverrideTrainId
	}
	return 0
}

type CMsgSteamLearn_InferenceMetadata_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InferenceMetadataResult *int32                                                       `protobuf:"varint,1,opt,name=inference_metadata_result,json=inferenceMetadataResult" json:"inference_metadata_result,omitempty"`
	RowRange                *CMsgSteamLearn_InferenceMetadata_Response_RowRange          `protobuf:"bytes,2,opt,name=row_range,json=rowRange" json:"row_range,omitempty"`
	Ranges                  []*CMsgSteamLearn_InferenceMetadata_Response_Range           `protobuf:"bytes,3,rep,name=ranges" json:"ranges,omitempty"`
	StdDevs                 []*CMsgSteamLearn_InferenceMetadata_Response_StdDev          `protobuf:"bytes,4,rep,name=std_devs,json=stdDevs" json:"std_devs,omitempty"`
	CompactTables           []*CMsgSteamLearn_InferenceMetadata_Response_CompactTable    `protobuf:"bytes,5,rep,name=compact_tables,json=compactTables" json:"compact_tables,omitempty"`
	Kmeans                  []*CMsgSteamLearn_InferenceMetadata_Response_KMeans          `protobuf:"bytes,6,rep,name=kmeans" json:"kmeans,omitempty"`
	SnapshotHistogram       *CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram `protobuf:"bytes,7,opt,name=snapshot_histogram,json=snapshotHistogram" json:"snapshot_histogram,omitempty"`
	AppInfo                 []*CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry    `protobuf:"bytes,8,rep,name=app_info,json=appInfo" json:"app_info,omitempty"`
	SequenceTables          []*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable   `protobuf:"bytes,9,rep,name=sequence_tables,json=sequenceTables" json:"sequence_tables,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Response) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{51}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response) GetInferenceMetadataResult() int32 {
	if x != nil && x.InferenceMetadataResult != nil {
		return *x.InferenceMetadataResult
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response) GetRowRange() *CMsgSteamLearn_InferenceMetadata_Response_RowRange {
	if x != nil {
		return x.RowRange
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceMetadata_Response) GetRanges() []*CMsgSteamLearn_InferenceMetadata_Response_Range {
	if x != nil {
		return x.Ranges
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceMetadata_Response) GetStdDevs() []*CMsgSteamLearn_InferenceMetadata_Response_StdDev {
	if x != nil {
		return x.StdDevs
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceMetadata_Response) GetCompactTables() []*CMsgSteamLearn_InferenceMetadata_Response_CompactTable {
	if x != nil {
		return x.CompactTables
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceMetadata_Response) GetKmeans() []*CMsgSteamLearn_InferenceMetadata_Response_KMeans {
	if x != nil {
		return x.Kmeans
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceMetadata_Response) GetSnapshotHistogram() *CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram {
	if x != nil {
		return x.SnapshotHistogram
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceMetadata_Response) GetAppInfo() []*CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry {
	if x != nil {
		return x.AppInfo
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceMetadata_Response) GetSequenceTables() []*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable {
	if x != nil {
		return x.SequenceTables
	}
	return nil
}

type CMsgSteamLearn_InferenceMetadata_Response_AppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryAllow  *string `protobuf:"bytes,1,opt,name=country_allow,json=countryAllow" json:"country_allow,omitempty"`
	CountryDeny   *string `protobuf:"bytes,2,opt,name=country_deny,json=countryDeny" json:"country_deny,omitempty"`
	PlatformWin   *bool   `protobuf:"varint,3,opt,name=platform_win,json=platformWin" json:"platform_win,omitempty"`
	PlatformMac   *bool   `protobuf:"varint,4,opt,name=platform_mac,json=platformMac" json:"platform_mac,omitempty"`
	PlatformLinux *bool   `protobuf:"varint,5,opt,name=platform_linux,json=platformLinux" json:"platform_linux,omitempty"`
	AdultViolence *bool   `protobuf:"varint,6,opt,name=adult_violence,json=adultViolence" json:"adult_violence,omitempty"`
	AdultSex      *bool   `protobuf:"varint,7,opt,name=adult_sex,json=adultSex" json:"adult_sex,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_AppInfo) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Response_AppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_AppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Response_AppInfo) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Response_AppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Response_AppInfo.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Response_AppInfo) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{52}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_AppInfo) GetCountryAllow() string {
	if x != nil && x.CountryAllow != nil {
		return *x.CountryAllow
	}
	return ""
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_AppInfo) GetCountryDeny() string {
	if x != nil && x.CountryDeny != nil {
		return *x.CountryDeny
	}
	return ""
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_AppInfo) GetPlatformWin() bool {
	if x != nil && x.PlatformWin != nil {
		return *x.PlatformWin
	}
	return false
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_AppInfo) GetPlatformMac() bool {
	if x != nil && x.PlatformMac != nil {
		return *x.PlatformMac
	}
	return false
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_AppInfo) GetPlatformLinux() bool {
	if x != nil && x.PlatformLinux != nil {
		return *x.PlatformLinux
	}
	return false
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_AppInfo) GetAdultViolence() bool {
	if x != nil && x.AdultViolence != nil {
		return *x.AdultViolence
	}
	return false
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_AppInfo) GetAdultSex() bool {
	if x != nil && x.AdultSex != nil {
		return *x.AdultSex
	}
	return false
}

type CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *uint32                                            `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	Value *CMsgSteamLearn_InferenceMetadata_Response_AppInfo `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{53}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry) GetValue() *CMsgSteamLearn_InferenceMetadata_Response_AppInfo {
	if x != nil {
		return x.Value
	}
	return nil
}

type CMsgSteamLearn_InferenceMetadata_Response_CompactTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string                                                                    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	MapValues   []*CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry   `protobuf:"bytes,2,rep,name=map_values,json=mapValues" json:"map_values,omitempty"`
	MapMappings []*CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry `protobuf:"bytes,3,rep,name=map_mappings,json=mapMappings" json:"map_mappings,omitempty"`
	TotalCount  *uint64                                                                    `protobuf:"varint,4,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Response_CompactTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Response_CompactTable) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Response_CompactTable.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Response_CompactTable) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{54}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable) GetMapValues() []*CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry {
	if x != nil {
		return x.MapValues
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable) GetMapMappings() []*CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry {
	if x != nil {
		return x.MapMappings
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable) GetTotalCount() uint64 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

type CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   *uint32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Mapping *uint32 `protobuf:"varint,2,opt,name=mapping" json:"mapping,omitempty"`
	Count   *uint64 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{55}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry) GetMapping() uint32 {
	if x != nil && x.Mapping != nil {
		return *x.Mapping
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *uint32                                                       `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	Value *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{56}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry) GetValue() *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry {
	if x != nil {
		return x.Value
	}
	return nil
}

type CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *uint32                                                       `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	Value *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{57}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry) GetValue() *CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry {
	if x != nil {
		return x.Value
	}
	return nil
}

type CMsgSteamLearn_InferenceMetadata_Response_KMeans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string                                                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Clusters []*CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster `protobuf:"bytes,2,rep,name=clusters" json:"clusters,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_KMeans) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Response_KMeans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_KMeans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Response_KMeans) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Response_KMeans) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Response_KMeans.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Response_KMeans) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{58}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_KMeans) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_KMeans) GetClusters() []*CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X            *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y            *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Radius       *float32 `protobuf:"fixed32,3,opt,name=radius" json:"radius,omitempty"`
	Radius_75Pct *float32 `protobuf:"fixed32,4,opt,name=radius_75pct,json=radius75pct" json:"radius_75pct,omitempty"`
	Radius_50Pct *float32 `protobuf:"fixed32,5,opt,name=radius_50pct,json=radius50pct" json:"radius_50pct,omitempty"`
	Radius_25Pct *float32 `protobuf:"fixed32,6,opt,name=radius_25pct,json=radius25pct" json:"radius_25pct,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{59}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster) GetRadius() float32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster) GetRadius_75Pct() float32 {
	if x != nil && x.Radius_75Pct != nil {
		return *x.Radius_75Pct
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster) GetRadius_50Pct() float32 {
	if x != nil && x.Radius_50Pct != nil {
		return *x.Radius_50Pct
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster) GetRadius_25Pct() float32 {
	if x != nil && x.Radius_25Pct != nil {
		return *x.Radius_25Pct
	}
	return 0
}

type CMsgSteamLearn_InferenceMetadata_Response_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataElementPath *string  `protobuf:"bytes,1,opt,name=data_element_path,json=dataElementPath" json:"data_element_path,omitempty"`
	MinValue        *float32 `protobuf:"fixed32,2,opt,name=min_value,json=minValue" json:"min_value,omitempty"`
	MaxValue        *float32 `protobuf:"fixed32,3,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_Range) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Response_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Response_Range) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Response_Range) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Response_Range.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Response_Range) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{60}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_Range) GetDataElementPath() string {
	if x != nil && x.DataElementPath != nil {
		return *x.DataElementPath
	}
	return ""
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_Range) GetMinValue() float32 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_Range) GetMaxValue() float32 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

type CMsgSteamLearn_InferenceMetadata_Response_RowRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinRow *uint64 `protobuf:"varint,1,opt,name=min_row,json=minRow" json:"min_row,omitempty"`
	MaxRow *uint64 `protobuf:"varint,2,opt,name=max_row,json=maxRow" json:"max_row,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_RowRange) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Response_RowRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_RowRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Response_RowRange) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Response_RowRange) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Response_RowRange.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Response_RowRange) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{61}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_RowRange) GetMinRow() uint64 {
	if x != nil && x.MinRow != nil {
		return *x.MinRow
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_RowRange) GetMaxRow() uint64 {
	if x != nil && x.MaxRow != nil {
		return *x.MaxRow
	}
	return 0
}

type CMsgSteamLearn_InferenceMetadata_Response_SequenceTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string                                                                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	MapValues   []*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry   `protobuf:"bytes,2,rep,name=map_values,json=mapValues" json:"map_values,omitempty"`
	MapMappings []*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry `protobuf:"bytes,3,rep,name=map_mappings,json=mapMappings" json:"map_mappings,omitempty"`
	TotalCount  *uint64                                                                     `protobuf:"varint,4,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Response_SequenceTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Response_SequenceTable.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{62}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable) GetMapValues() []*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry {
	if x != nil {
		return x.MapValues
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable) GetMapMappings() []*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry {
	if x != nil {
		return x.MapMappings
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable) GetTotalCount() uint64 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

type CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint32 `protobuf:"varint,1,rep,name=values" json:"values,omitempty"`
	Crc    *uint32  `protobuf:"varint,2,opt,name=crc" json:"crc,omitempty"`
	Count  *uint32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{63}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry) GetCrc() uint32 {
	if x != nil && x.Crc != nil {
		return *x.Crc
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string                                                        `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{64}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry) GetValue() *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry {
	if x != nil {
		return x.Value
	}
	return nil
}

type CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *uint32                                                        `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	Value *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{65}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry) GetValue() *CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry {
	if x != nil {
		return x.Value
	}
	return nil
}

type CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinValue     *float32 `protobuf:"fixed32,1,opt,name=min_value,json=minValue" json:"min_value,omitempty"`
	MaxValue     *float32 `protobuf:"fixed32,2,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	NumBuckets   *uint32  `protobuf:"varint,3,opt,name=num_buckets,json=numBuckets" json:"num_buckets,omitempty"`
	BucketCounts []uint32 `protobuf:"varint,4,rep,name=bucket_counts,json=bucketCounts" json:"bucket_counts,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{66}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram) GetMinValue() float32 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram) GetMaxValue() float32 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram) GetNumBuckets() uint32 {
	if x != nil && x.NumBuckets != nil {
		return *x.NumBuckets
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram) GetBucketCounts() []uint32 {
	if x != nil {
		return x.BucketCounts
	}
	return nil
}

type CMsgSteamLearn_InferenceMetadata_Response_StdDev struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataElementPath *string  `protobuf:"bytes,1,opt,name=data_element_path,json=dataElementPath" json:"data_element_path,omitempty"`
	Mean            *float32 `protobuf:"fixed32,2,opt,name=mean" json:"mean,omitempty"`
	StdDev          *float32 `protobuf:"fixed32,3,opt,name=std_dev,json=stdDev" json:"std_dev,omitempty"`
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_StdDev) Reset() {
	*x = CMsgSteamLearn_InferenceMetadata_Response_StdDev{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_StdDev) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceMetadata_Response_StdDev) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceMetadata_Response_StdDev) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceMetadata_Response_StdDev.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceMetadata_Response_StdDev) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{67}
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_StdDev) GetDataElementPath() string {
	if x != nil && x.DataElementPath != nil {
		return *x.DataElementPath
	}
	return ""
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_StdDev) GetMean() float32 {
	if x != nil && x.Mean != nil {
		return *x.Mean
	}
	return 0
}

func (x *CMsgSteamLearn_InferenceMetadata_Response_StdDev) GetStdDev() float32 {
	if x != nil && x.StdDev != nil {
		return *x.StdDev
	}
	return 0
}

type CMsgSteamLearn_ListDataSources_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgSteamLearn_ListDataSources_Request) Reset() {
	*x = CMsgSteamLearn_ListDataSources_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_ListDataSources_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_ListDataSources_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_ListDataSources_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_ListDataSources_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_ListDataSources_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{68}
}

type CMsgSteamLearn_ListDataSources_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSources []*CMsgSteamLearnDataSource `protobuf:"bytes,1,rep,name=data_sources,json=dataSources" json:"data_sources,omitempty"`
}

func (x *CMsgSteamLearn_ListDataSources_Response) Reset() {
	*x = CMsgSteamLearn_ListDataSources_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_ListDataSources_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_ListDataSources_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_ListDataSources_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_ListDataSources_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_ListDataSources_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{69}
}

func (x *CMsgSteamLearn_ListDataSources_Response) GetDataSources() []*CMsgSteamLearnDataSource {
	if x != nil {
		return x.DataSources
	}
	return nil
}

type CMsgSteamLearn_ListProjects_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CMsgSteamLearn_ListProjects_Request) Reset() {
	*x = CMsgSteamLearn_ListProjects_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_ListProjects_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_ListProjects_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_ListProjects_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_ListProjects_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_ListProjects_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{70}
}

func (x *CMsgSteamLearn_ListProjects_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CMsgSteamLearn_ListProjects_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects []*CMsgSteamLearnProject `protobuf:"bytes,1,rep,name=projects" json:"projects,omitempty"`
}

func (x *CMsgSteamLearn_ListProjects_Response) Reset() {
	*x = CMsgSteamLearn_ListProjects_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_ListProjects_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_ListProjects_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_ListProjects_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_ListProjects_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_ListProjects_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{71}
}

func (x *CMsgSteamLearn_ListProjects_Response) GetProjects() []*CMsgSteamLearnProject {
	if x != nil {
		return x.Projects
	}
	return nil
}

type CMsgSteamLearn_LogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType        *int32                                `protobuf:"varint,1,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	Timestamp        *uint32                               `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	ProjectId        *uint32                               `protobuf:"varint,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	PublishedVersion *uint32                               `protobuf:"varint,4,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
	TrainStarted     *CMsgSteamLearn_LogEvent_TrainStarted `protobuf:"bytes,5,opt,name=train_started,json=trainStarted" json:"train_started,omitempty"`
	TrainEnded       *CMsgSteamLearn_LogEvent_TrainEnded   `protobuf:"bytes,6,opt,name=train_ended,json=trainEnded" json:"train_ended,omitempty"`
	TrainSetLive     *CMsgSteamLearn_LogEvent_TrainSetLive `protobuf:"bytes,7,opt,name=train_set_live,json=trainSetLive" json:"train_set_live,omitempty"`
	AutoSnapshot     *CMsgSteamLearn_LogEvent_Autosnapshot `protobuf:"bytes,8,opt,name=auto_snapshot,json=autoSnapshot" json:"auto_snapshot,omitempty"`
}

func (x *CMsgSteamLearn_LogEvent) Reset() {
	*x = CMsgSteamLearn_LogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_LogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_LogEvent) ProtoMessage() {}

func (x *CMsgSteamLearn_LogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_LogEvent.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_LogEvent) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{72}
}

func (x *CMsgSteamLearn_LogEvent) GetEventType() int32 {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return 0
}

func (x *CMsgSteamLearn_LogEvent) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgSteamLearn_LogEvent) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_LogEvent) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

func (x *CMsgSteamLearn_LogEvent) GetTrainStarted() *CMsgSteamLearn_LogEvent_TrainStarted {
	if x != nil {
		return x.TrainStarted
	}
	return nil
}

func (x *CMsgSteamLearn_LogEvent) GetTrainEnded() *CMsgSteamLearn_LogEvent_TrainEnded {
	if x != nil {
		return x.TrainEnded
	}
	return nil
}

func (x *CMsgSteamLearn_LogEvent) GetTrainSetLive() *CMsgSteamLearn_LogEvent_TrainSetLive {
	if x != nil {
		return x.TrainSetLive
	}
	return nil
}

func (x *CMsgSteamLearn_LogEvent) GetAutoSnapshot() *CMsgSteamLearn_LogEvent_Autosnapshot {
	if x != nil {
		return x.AutoSnapshot
	}
	return nil
}

type CMsgSteamLearn_LogEvent_Autosnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status              *int32  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	KeyCompleted        *uint64 `protobuf:"varint,2,opt,name=key_completed,json=keyCompleted" json:"key_completed,omitempty"`
	KeyEnd              *uint64 `protobuf:"varint,3,opt,name=key_end,json=keyEnd" json:"key_end,omitempty"`
	NumSnapshotRequests *uint64 `protobuf:"varint,4,opt,name=num_snapshot_requests,json=numSnapshotRequests" json:"num_snapshot_requests,omitempty"`
}

func (x *CMsgSteamLearn_LogEvent_Autosnapshot) Reset() {
	*x = CMsgSteamLearn_LogEvent_Autosnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_LogEvent_Autosnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_LogEvent_Autosnapshot) ProtoMessage() {}

func (x *CMsgSteamLearn_LogEvent_Autosnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_LogEvent_Autosnapshot.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_LogEvent_Autosnapshot) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{73}
}

func (x *CMsgSteamLearn_LogEvent_Autosnapshot) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *CMsgSteamLearn_LogEvent_Autosnapshot) GetKeyCompleted() uint64 {
	if x != nil && x.KeyCompleted != nil {
		return *x.KeyCompleted
	}
	return 0
}

func (x *CMsgSteamLearn_LogEvent_Autosnapshot) GetKeyEnd() uint64 {
	if x != nil && x.KeyEnd != nil {
		return *x.KeyEnd
	}
	return 0
}

func (x *CMsgSteamLearn_LogEvent_Autosnapshot) GetNumSnapshotRequests() uint64 {
	if x != nil && x.NumSnapshotRequests != nil {
		return *x.NumSnapshotRequests
	}
	return 0
}

type CMsgSteamLearn_LogEvent_TrainEnded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FetchId  *uint32  `protobuf:"varint,1,opt,name=fetch_id,json=fetchId" json:"fetch_id,omitempty"`
	TrainId  *uint32  `protobuf:"varint,2,opt,name=train_id,json=trainId" json:"train_id,omitempty"`
	Loss     *float32 `protobuf:"fixed32,3,opt,name=loss" json:"loss,omitempty"`
	Accuracy *float32 `protobuf:"fixed32,4,opt,name=accuracy" json:"accuracy,omitempty"`
	F1Score  *float32 `protobuf:"fixed32,5,opt,name=f1_score,json=f1Score" json:"f1_score,omitempty"`
}

func (x *CMsgSteamLearn_LogEvent_TrainEnded) Reset() {
	*x = CMsgSteamLearn_LogEvent_TrainEnded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_LogEvent_TrainEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_LogEvent_TrainEnded) ProtoMessage() {}

func (x *CMsgSteamLearn_LogEvent_TrainEnded) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_LogEvent_TrainEnded.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_LogEvent_TrainEnded) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{74}
}

func (x *CMsgSteamLearn_LogEvent_TrainEnded) GetFetchId() uint32 {
	if x != nil && x.FetchId != nil {
		return *x.FetchId
	}
	return 0
}

func (x *CMsgSteamLearn_LogEvent_TrainEnded) GetTrainId() uint32 {
	if x != nil && x.TrainId != nil {
		return *x.TrainId
	}
	return 0
}

func (x *CMsgSteamLearn_LogEvent_TrainEnded) GetLoss() float32 {
	if x != nil && x.Loss != nil {
		return *x.Loss
	}
	return 0
}

func (x *CMsgSteamLearn_LogEvent_TrainEnded) GetAccuracy() float32 {
	if x != nil && x.Accuracy != nil {
		return *x.Accuracy
	}
	return 0
}

func (x *CMsgSteamLearn_LogEvent_TrainEnded) GetF1Score() float32 {
	if x != nil && x.F1Score != nil {
		return *x.F1Score
	}
	return 0
}

type CMsgSteamLearn_LogEvent_TrainSetLive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FetchId            *uint32  `protobuf:"varint,1,opt,name=fetch_id,json=fetchId" json:"fetch_id,omitempty"`
	TrainId            *uint32  `protobuf:"varint,2,opt,name=train_id,json=trainId" json:"train_id,omitempty"`
	ManualSetLive      *bool    `protobuf:"varint,3,opt,name=manual_set_live,json=manualSetLive" json:"manual_set_live,omitempty"`
	AccuracyDifference *float32 `protobuf:"fixed32,4,opt,name=accuracy_difference,json=accuracyDifference" json:"accuracy_difference,omitempty"`
	AccuracyThreshold  *float32 `protobuf:"fixed32,5,opt,name=accuracy_threshold,json=accuracyThreshold" json:"accuracy_threshold,omitempty"`
}

func (x *CMsgSteamLearn_LogEvent_TrainSetLive) Reset() {
	*x = CMsgSteamLearn_LogEvent_TrainSetLive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_LogEvent_TrainSetLive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_LogEvent_TrainSetLive) ProtoMessage() {}

func (x *CMsgSteamLearn_LogEvent_TrainSetLive) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_LogEvent_TrainSetLive.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_LogEvent_TrainSetLive) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{75}
}

func (x *CMsgSteamLearn_LogEvent_TrainSetLive) GetFetchId() uint32 {
	if x != nil && x.FetchId != nil {
		return *x.FetchId
	}
	return 0
}

func (x *CMsgSteamLearn_LogEvent_TrainSetLive) GetTrainId() uint32 {
	if x != nil && x.TrainId != nil {
		return *x.TrainId
	}
	return 0
}

func (x *CMsgSteamLearn_LogEvent_TrainSetLive) GetManualSetLive() bool {
	if x != nil && x.ManualSetLive != nil {
		return *x.ManualSetLive
	}
	return false
}

func (x *CMsgSteamLearn_LogEvent_TrainSetLive) GetAccuracyDifference() float32 {
	if x != nil && x.AccuracyDifference != nil {
		return *x.AccuracyDifference
	}
	return 0
}

func (x *CMsgSteamLearn_LogEvent_TrainSetLive) GetAccuracyThreshold() float32 {
	if x != nil && x.AccuracyThreshold != nil {
		return *x.AccuracyThreshold
	}
	return 0
}

type CMsgSteamLearn_LogEvent_TrainStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FetchId *uint32 `protobuf:"varint,1,opt,name=fetch_id,json=fetchId" json:"fetch_id,omitempty"`
	TrainId *uint32 `protobuf:"varint,2,opt,name=train_id,json=trainId" json:"train_id,omitempty"`
}

func (x *CMsgSteamLearn_LogEvent_TrainStarted) Reset() {
	*x = CMsgSteamLearn_LogEvent_TrainStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_LogEvent_TrainStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_LogEvent_TrainStarted) ProtoMessage() {}

func (x *CMsgSteamLearn_LogEvent_TrainStarted) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_LogEvent_TrainStarted.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_LogEvent_TrainStarted) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{76}
}

func (x *CMsgSteamLearn_LogEvent_TrainStarted) GetFetchId() uint32 {
	if x != nil && x.FetchId != nil {
		return *x.FetchId
	}
	return 0
}

func (x *CMsgSteamLearn_LogEvent_TrainStarted) GetTrainId() uint32 {
	if x != nil && x.TrainId != nil {
		return *x.TrainId
	}
	return 0
}

type CMsgSteamLearn_PublishProject_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId *uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (x *CMsgSteamLearn_PublishProject_Request) Reset() {
	*x = CMsgSteamLearn_PublishProject_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_PublishProject_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_PublishProject_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_PublishProject_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_PublishProject_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_PublishProject_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{77}
}

func (x *CMsgSteamLearn_PublishProject_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

type CMsgSteamLearn_PublishProject_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result              *int32  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	NewPublishedVersion *uint32 `protobuf:"varint,2,opt,name=new_published_version,json=newPublishedVersion" json:"new_published_version,omitempty"`
}

func (x *CMsgSteamLearn_PublishProject_Response) Reset() {
	*x = CMsgSteamLearn_PublishProject_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_PublishProject_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_PublishProject_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_PublishProject_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_PublishProject_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_PublishProject_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{78}
}

func (x *CMsgSteamLearn_PublishProject_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgSteamLearn_PublishProject_Response) GetNewPublishedVersion() uint32 {
	if x != nil && x.NewPublishedVersion != nil {
		return *x.NewPublishedVersion
	}
	return 0
}

type CMsgSteamLearn_RegisterDataSource_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken *string                   `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	DataSource  *CMsgSteamLearnDataSource `protobuf:"bytes,3,opt,name=data_source,json=dataSource" json:"data_source,omitempty"`
}

func (x *CMsgSteamLearn_RegisterDataSource_Request) Reset() {
	*x = CMsgSteamLearn_RegisterDataSource_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_RegisterDataSource_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_RegisterDataSource_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_RegisterDataSource_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_RegisterDataSource_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_RegisterDataSource_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{79}
}

func (x *CMsgSteamLearn_RegisterDataSource_Request) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *CMsgSteamLearn_RegisterDataSource_Request) GetDataSource() *CMsgSteamLearnDataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

type CMsgSteamLearn_RegisterDataSource_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     *int32                    `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	DataSource *CMsgSteamLearnDataSource `protobuf:"bytes,2,opt,name=data_source,json=dataSource" json:"data_source,omitempty"`
}

func (x *CMsgSteamLearn_RegisterDataSource_Response) Reset() {
	*x = CMsgSteamLearn_RegisterDataSource_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_RegisterDataSource_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_RegisterDataSource_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_RegisterDataSource_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_RegisterDataSource_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_RegisterDataSource_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{80}
}

func (x *CMsgSteamLearn_RegisterDataSource_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgSteamLearn_RegisterDataSource_Response) GetDataSource() *CMsgSteamLearnDataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

type CMsgSteamLearn_SetTrainLive_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        *uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	PublishedVersion *uint32 `protobuf:"varint,2,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
	TrainId          *uint32 `protobuf:"varint,3,opt,name=train_id,json=trainId" json:"train_id,omitempty"`
	FromScheduled    *bool   `protobuf:"varint,4,opt,name=from_scheduled,json=fromScheduled" json:"from_scheduled,omitempty"`
	Deactivate       *bool   `protobuf:"varint,5,opt,name=deactivate" json:"deactivate,omitempty"`
}

func (x *CMsgSteamLearn_SetTrainLive_Request) Reset() {
	*x = CMsgSteamLearn_SetTrainLive_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_SetTrainLive_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_SetTrainLive_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_SetTrainLive_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_SetTrainLive_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_SetTrainLive_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{81}
}

func (x *CMsgSteamLearn_SetTrainLive_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_SetTrainLive_Request) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

func (x *CMsgSteamLearn_SetTrainLive_Request) GetTrainId() uint32 {
	if x != nil && x.TrainId != nil {
		return *x.TrainId
	}
	return 0
}

func (x *CMsgSteamLearn_SetTrainLive_Request) GetFromScheduled() bool {
	if x != nil && x.FromScheduled != nil {
		return *x.FromScheduled
	}
	return false
}

func (x *CMsgSteamLearn_SetTrainLive_Request) GetDeactivate() bool {
	if x != nil && x.Deactivate != nil {
		return *x.Deactivate
	}
	return false
}

type CMsgSteamLearn_SetTrainLive_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (x *CMsgSteamLearn_SetTrainLive_Response) Reset() {
	*x = CMsgSteamLearn_SetTrainLive_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_SetTrainLive_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_SetTrainLive_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_SetTrainLive_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_SetTrainLive_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_SetTrainLive_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{82}
}

func (x *CMsgSteamLearn_SetTrainLive_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

type CMsgSteamLearn_SnapshotProject_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken             *string               `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	ProjectId               *uint32               `protobuf:"varint,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Keys                    []uint64              `protobuf:"varint,4,rep,name=keys" json:"keys,omitempty"`
	Data                    []*CMsgSteamLearnData `protobuf:"bytes,5,rep,name=data" json:"data,omitempty"`
	PendingDataLimitSeconds *uint32               `protobuf:"varint,6,opt,name=pending_data_limit_seconds,json=pendingDataLimitSeconds" json:"pending_data_limit_seconds,omitempty"`
	PublishedVersion        *uint32               `protobuf:"varint,7,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
}

func (x *CMsgSteamLearn_SnapshotProject_Request) Reset() {
	*x = CMsgSteamLearn_SnapshotProject_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_SnapshotProject_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_SnapshotProject_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_SnapshotProject_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_SnapshotProject_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_SnapshotProject_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{83}
}

func (x *CMsgSteamLearn_SnapshotProject_Request) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *CMsgSteamLearn_SnapshotProject_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_SnapshotProject_Request) GetKeys() []uint64 {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *CMsgSteamLearn_SnapshotProject_Request) GetData() []*CMsgSteamLearnData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CMsgSteamLearn_SnapshotProject_Request) GetPendingDataLimitSeconds() uint32 {
	if x != nil && x.PendingDataLimitSeconds != nil {
		return *x.PendingDataLimitSeconds
	}
	return 0
}

func (x *CMsgSteamLearn_SnapshotProject_Request) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

type CMsgSteamLearn_SnapshotProject_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotResult *int32 `protobuf:"varint,1,opt,name=snapshot_result,json=snapshotResult" json:"snapshot_result,omitempty"`
}

func (x *CMsgSteamLearn_SnapshotProject_Response) Reset() {
	*x = CMsgSteamLearn_SnapshotProject_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_SnapshotProject_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_SnapshotProject_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_SnapshotProject_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_SnapshotProject_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_SnapshotProject_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{84}
}

func (x *CMsgSteamLearn_SnapshotProject_Response) GetSnapshotResult() int32 {
	if x != nil && x.SnapshotResult != nil {
		return *x.SnapshotResult
	}
	return 0
}

type CMsgSteamLearn_Train_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectConfig *CMsgSteamLearnProjectConfig        `protobuf:"bytes,1,opt,name=project_config,json=projectConfig" json:"project_config,omitempty"`
	Fetch         *CMsgSteamLearn_Train_Request_Fetch `protobuf:"bytes,2,opt,name=fetch" json:"fetch,omitempty"`
	Train         *CMsgSteamLearn_Train_Request_Train `protobuf:"bytes,3,opt,name=train" json:"train,omitempty"`
}

func (x *CMsgSteamLearn_Train_Request) Reset() {
	*x = CMsgSteamLearn_Train_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_Train_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_Train_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_Train_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_Train_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_Train_Request) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{85}
}

func (x *CMsgSteamLearn_Train_Request) GetProjectConfig() *CMsgSteamLearnProjectConfig {
	if x != nil {
		return x.ProjectConfig
	}
	return nil
}

func (x *CMsgSteamLearn_Train_Request) GetFetch() *CMsgSteamLearn_Train_Request_Fetch {
	if x != nil {
		return x.Fetch
	}
	return nil
}

func (x *CMsgSteamLearn_Train_Request) GetTrain() *CMsgSteamLearn_Train_Request_Train {
	if x != nil {
		return x.Train
	}
	return nil
}

type CMsgSteamLearn_Train_Request_Fetch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FetchId       *uint32 `protobuf:"varint,1,opt,name=fetch_id,json=fetchId" json:"fetch_id,omitempty"`
	RequestCancel *bool   `protobuf:"varint,2,opt,name=request_cancel,json=requestCancel" json:"request_cancel,omitempty"`
}

func (x *CMsgSteamLearn_Train_Request_Fetch) Reset() {
	*x = CMsgSteamLearn_Train_Request_Fetch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_Train_Request_Fetch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_Train_Request_Fetch) ProtoMessage() {}

func (x *CMsgSteamLearn_Train_Request_Fetch) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_Train_Request_Fetch.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_Train_Request_Fetch) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{86}
}

func (x *CMsgSteamLearn_Train_Request_Fetch) GetFetchId() uint32 {
	if x != nil && x.FetchId != nil {
		return *x.FetchId
	}
	return 0
}

func (x *CMsgSteamLearn_Train_Request_Fetch) GetRequestCancel() bool {
	if x != nil && x.RequestCancel != nil {
		return *x.RequestCancel
	}
	return false
}

type CMsgSteamLearn_Train_Request_Train struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrainId        *uint32 `protobuf:"varint,1,opt,name=train_id,json=trainId" json:"train_id,omitempty"`
	RequestCancel  *bool   `protobuf:"varint,2,opt,name=request_cancel,json=requestCancel" json:"request_cancel,omitempty"`
	ScheduledTrain *bool   `protobuf:"varint,3,opt,name=scheduled_train,json=scheduledTrain" json:"scheduled_train,omitempty"`
}

func (x *CMsgSteamLearn_Train_Request_Train) Reset() {
	*x = CMsgSteamLearn_Train_Request_Train{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_Train_Request_Train) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_Train_Request_Train) ProtoMessage() {}

func (x *CMsgSteamLearn_Train_Request_Train) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_Train_Request_Train.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_Train_Request_Train) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{87}
}

func (x *CMsgSteamLearn_Train_Request_Train) GetTrainId() uint32 {
	if x != nil && x.TrainId != nil {
		return *x.TrainId
	}
	return 0
}

func (x *CMsgSteamLearn_Train_Request_Train) GetRequestCancel() bool {
	if x != nil && x.RequestCancel != nil {
		return *x.RequestCancel
	}
	return false
}

func (x *CMsgSteamLearn_Train_Request_Train) GetScheduledTrain() bool {
	if x != nil && x.ScheduledTrain != nil {
		return *x.ScheduledTrain
	}
	return false
}

type CMsgSteamLearn_Train_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (x *CMsgSteamLearn_Train_Response) Reset() {
	*x = CMsgSteamLearn_Train_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_Train_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_Train_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_Train_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_Train_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_Train_Response) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{88}
}

func (x *CMsgSteamLearn_Train_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

type CMsgSteamLearnAccessTokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisterDataSourceAccessToken *string                                                  `protobuf:"bytes,1,opt,name=register_data_source_access_token,json=registerDataSourceAccessToken" json:"register_data_source_access_token,omitempty"`
	CacheDataAccessTokens         []*CMsgSteamLearnAccessTokens_CacheDataAccessToken       `protobuf:"bytes,2,rep,name=cache_data_access_tokens,json=cacheDataAccessTokens" json:"cache_data_access_tokens,omitempty"`
	SnapshotProjectAccessTokens   []*CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken `protobuf:"bytes,3,rep,name=snapshot_project_access_tokens,json=snapshotProjectAccessTokens" json:"snapshot_project_access_tokens,omitempty"`
	InferenceAccessTokens         []*CMsgSteamLearnAccessTokens_InferenceAccessToken       `protobuf:"bytes,4,rep,name=inference_access_tokens,json=inferenceAccessTokens" json:"inference_access_tokens,omitempty"`
}

func (x *CMsgSteamLearnAccessTokens) Reset() {
	*x = CMsgSteamLearnAccessTokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnAccessTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnAccessTokens) ProtoMessage() {}

func (x *CMsgSteamLearnAccessTokens) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnAccessTokens.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnAccessTokens) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{89}
}

func (x *CMsgSteamLearnAccessTokens) GetRegisterDataSourceAccessToken() string {
	if x != nil && x.RegisterDataSourceAccessToken != nil {
		return *x.RegisterDataSourceAccessToken
	}
	return ""
}

func (x *CMsgSteamLearnAccessTokens) GetCacheDataAccessTokens() []*CMsgSteamLearnAccessTokens_CacheDataAccessToken {
	if x != nil {
		return x.CacheDataAccessTokens
	}
	return nil
}

func (x *CMsgSteamLearnAccessTokens) GetSnapshotProjectAccessTokens() []*CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken {
	if x != nil {
		return x.SnapshotProjectAccessTokens
	}
	return nil
}

func (x *CMsgSteamLearnAccessTokens) GetInferenceAccessTokens() []*CMsgSteamLearnAccessTokens_InferenceAccessToken {
	if x != nil {
		return x.InferenceAccessTokens
	}
	return nil
}

type CMsgSteamLearnAccessTokens_CacheDataAccessToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSourceId *uint32 `protobuf:"varint,1,opt,name=data_source_id,json=dataSourceId" json:"data_source_id,omitempty"`
	AccessToken  *string `protobuf:"bytes,2,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
}

func (x *CMsgSteamLearnAccessTokens_CacheDataAccessToken) Reset() {
	*x = CMsgSteamLearnAccessTokens_CacheDataAccessToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnAccessTokens_CacheDataAccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnAccessTokens_CacheDataAccessToken) ProtoMessage() {}

func (x *CMsgSteamLearnAccessTokens_CacheDataAccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnAccessTokens_CacheDataAccessToken.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnAccessTokens_CacheDataAccessToken) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{90}
}

func (x *CMsgSteamLearnAccessTokens_CacheDataAccessToken) GetDataSourceId() uint32 {
	if x != nil && x.DataSourceId != nil {
		return *x.DataSourceId
	}
	return 0
}

func (x *CMsgSteamLearnAccessTokens_CacheDataAccessToken) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

type CMsgSteamLearnAccessTokens_InferenceAccessToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   *uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	AccessToken *string `protobuf:"bytes,2,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
}

func (x *CMsgSteamLearnAccessTokens_InferenceAccessToken) Reset() {
	*x = CMsgSteamLearnAccessTokens_InferenceAccessToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnAccessTokens_InferenceAccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnAccessTokens_InferenceAccessToken) ProtoMessage() {}

func (x *CMsgSteamLearnAccessTokens_InferenceAccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnAccessTokens_InferenceAccessToken.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnAccessTokens_InferenceAccessToken) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{91}
}

func (x *CMsgSteamLearnAccessTokens_InferenceAccessToken) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearnAccessTokens_InferenceAccessToken) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

type CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   *uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	AccessToken *string `protobuf:"bytes,2,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
}

func (x *CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken) Reset() {
	*x = CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken) ProtoMessage() {}

func (x *CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{92}
}

func (x *CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

type CMsgSteamLearnData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSourceId *uint32                   `protobuf:"varint,1,opt,name=data_source_id,json=dataSourceId" json:"data_source_id,omitempty"`
	Keys         []uint64                  `protobuf:"varint,2,rep,name=keys" json:"keys,omitempty"`
	DataObject   *CMsgSteamLearnDataObject `protobuf:"bytes,3,opt,name=data_object,json=dataObject" json:"data_object,omitempty"`
}

func (x *CMsgSteamLearnData) Reset() {
	*x = CMsgSteamLearnData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnData) ProtoMessage() {}

func (x *CMsgSteamLearnData) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnData.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnData) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{93}
}

func (x *CMsgSteamLearnData) GetDataSourceId() uint32 {
	if x != nil && x.DataSourceId != nil {
		return *x.DataSourceId
	}
	return 0
}

func (x *CMsgSteamLearnData) GetKeys() []uint64 {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *CMsgSteamLearnData) GetDataObject() *CMsgSteamLearnDataObject {
	if x != nil {
		return x.DataObject
	}
	return nil
}

type CMsgSteamLearnDataElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DataInt32S  []int32                     `protobuf:"varint,20,rep,name=data_int32s,json=dataInt32s" json:"data_int32s,omitempty"`
	DataFloats  []float32                   `protobuf:"fixed32,21,rep,name=data_floats,json=dataFloats" json:"data_floats,omitempty"`
	DataBools   []bool                      `protobuf:"varint,22,rep,name=data_bools,json=dataBools" json:"data_bools,omitempty"`
	DataStrings []string                    `protobuf:"bytes,23,rep,name=data_strings,json=dataStrings" json:"data_strings,omitempty"`
	DataObjects []*CMsgSteamLearnDataObject `protobuf:"bytes,24,rep,name=data_objects,json=dataObjects" json:"data_objects,omitempty"`
}

func (x *CMsgSteamLearnDataElement) Reset() {
	*x = CMsgSteamLearnDataElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnDataElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnDataElement) ProtoMessage() {}

func (x *CMsgSteamLearnDataElement) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnDataElement.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnDataElement) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{94}
}

func (x *CMsgSteamLearnDataElement) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSteamLearnDataElement) GetDataInt32S() []int32 {
	if x != nil {
		return x.DataInt32S
	}
	return nil
}

func (x *CMsgSteamLearnDataElement) GetDataFloats() []float32 {
	if x != nil {
		return x.DataFloats
	}
	return nil
}

func (x *CMsgSteamLearnDataElement) GetDataBools() []bool {
	if x != nil {
		return x.DataBools
	}
	return nil
}

func (x *CMsgSteamLearnDataElement) GetDataStrings() []string {
	if x != nil {
		return x.DataStrings
	}
	return nil
}

func (x *CMsgSteamLearnDataElement) GetDataObjects() []*CMsgSteamLearnDataObject {
	if x != nil {
		return x.DataObjects
	}
	return nil
}

type CMsgSteamLearnDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*CMsgSteamLearnData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (x *CMsgSteamLearnDataList) Reset() {
	*x = CMsgSteamLearnDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnDataList) ProtoMessage() {}

func (x *CMsgSteamLearnDataList) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnDataList.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnDataList) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{95}
}

func (x *CMsgSteamLearnDataList) GetData() []*CMsgSteamLearnData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CMsgSteamLearnDataObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*CMsgSteamLearnDataElement `protobuf:"bytes,1,rep,name=elements" json:"elements,omitempty"`
}

func (x *CMsgSteamLearnDataObject) Reset() {
	*x = CMsgSteamLearnDataObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnDataObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnDataObject) ProtoMessage() {}

func (x *CMsgSteamLearnDataObject) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnDataObject.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnDataObject) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{96}
}

func (x *CMsgSteamLearnDataObject) GetElements() []*CMsgSteamLearnDataElement {
	if x != nil {
		return x.Elements
	}
	return nil
}

type CMsgSteamLearnDataRetentionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotKeepDurationDays *uint32 `protobuf:"varint,1,opt,name=snapshot_keep_duration_days,json=snapshotKeepDurationDays" json:"snapshot_keep_duration_days,omitempty"`
	FetchKeepCount           *uint32 `protobuf:"varint,2,opt,name=fetch_keep_count,json=fetchKeepCount" json:"fetch_keep_count,omitempty"`
}

func (x *CMsgSteamLearnDataRetentionConfig) Reset() {
	*x = CMsgSteamLearnDataRetentionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnDataRetentionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnDataRetentionConfig) ProtoMessage() {}

func (x *CMsgSteamLearnDataRetentionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnDataRetentionConfig.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnDataRetentionConfig) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{97}
}

func (x *CMsgSteamLearnDataRetentionConfig) GetSnapshotKeepDurationDays() uint32 {
	if x != nil && x.SnapshotKeepDurationDays != nil {
		return *x.SnapshotKeepDurationDays
	}
	return 0
}

func (x *CMsgSteamLearnDataRetentionConfig) GetFetchKeepCount() uint32 {
	if x != nil && x.FetchKeepCount != nil {
		return *x.FetchKeepCount
	}
	return 0
}

type CMsgSteamLearnDataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *uint32                             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                  *string                             `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Version               *uint32                             `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	SourceDescription     *string                             `protobuf:"bytes,4,opt,name=source_description,json=sourceDescription" json:"source_description,omitempty"`
	Structure             *CMsgSteamLearnDataSourceDescObject `protobuf:"bytes,5,opt,name=structure" json:"structure,omitempty"`
	StructureCrc          *uint32                             `protobuf:"varint,6,opt,name=structure_crc,json=structureCrc" json:"structure_crc,omitempty"`
	CacheDurationSeconds  *uint32                             `protobuf:"varint,7,opt,name=cache_duration_seconds,json=cacheDurationSeconds" json:"cache_duration_seconds,omitempty"`
	KeyType               *int32                              `protobuf:"varint,8,opt,name=key_type,json=keyType,def=1" json:"key_type,omitempty"`
	SupportsAutoSnapshots *bool                               `protobuf:"varint,9,opt,name=supports_auto_snapshots,json=supportsAutoSnapshots" json:"supports_auto_snapshots,omitempty"`
}

// Default values for CMsgSteamLearnDataSource fields.
const (
	Default_CMsgSteamLearnDataSource_KeyType = int32(1)
)

func (x *CMsgSteamLearnDataSource) Reset() {
	*x = CMsgSteamLearnDataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnDataSource) ProtoMessage() {}

func (x *CMsgSteamLearnDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnDataSource.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnDataSource) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{98}
}

func (x *CMsgSteamLearnDataSource) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgSteamLearnDataSource) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSteamLearnDataSource) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgSteamLearnDataSource) GetSourceDescription() string {
	if x != nil && x.SourceDescription != nil {
		return *x.SourceDescription
	}
	return ""
}

func (x *CMsgSteamLearnDataSource) GetStructure() *CMsgSteamLearnDataSourceDescObject {
	if x != nil {
		return x.Structure
	}
	return nil
}

func (x *CMsgSteamLearnDataSource) GetStructureCrc() uint32 {
	if x != nil && x.StructureCrc != nil {
		return *x.StructureCrc
	}
	return 0
}

func (x *CMsgSteamLearnDataSource) GetCacheDurationSeconds() uint32 {
	if x != nil && x.CacheDurationSeconds != nil {
		return *x.CacheDurationSeconds
	}
	return 0
}

func (x *CMsgSteamLearnDataSource) GetKeyType() int32 {
	if x != nil && x.KeyType != nil {
		return *x.KeyType
	}
	return Default_CMsgSteamLearnDataSource_KeyType
}

func (x *CMsgSteamLearnDataSource) GetSupportsAutoSnapshots() bool {
	if x != nil && x.SupportsAutoSnapshots != nil {
		return *x.SupportsAutoSnapshots
	}
	return false
}

type CMsgSteamLearnDataSourceDescElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string                             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DataType *int32                              `protobuf:"varint,2,opt,name=data_type,json=dataType" json:"data_type,omitempty"`
	Object   *CMsgSteamLearnDataSourceDescObject `protobuf:"bytes,3,opt,name=object" json:"object,omitempty"`
	Count    *uint32                             `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (x *CMsgSteamLearnDataSourceDescElement) Reset() {
	*x = CMsgSteamLearnDataSourceDescElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnDataSourceDescElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnDataSourceDescElement) ProtoMessage() {}

func (x *CMsgSteamLearnDataSourceDescElement) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnDataSourceDescElement.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnDataSourceDescElement) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{99}
}

func (x *CMsgSteamLearnDataSourceDescElement) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSteamLearnDataSourceDescElement) GetDataType() int32 {
	if x != nil && x.DataType != nil {
		return *x.DataType
	}
	return 0
}

func (x *CMsgSteamLearnDataSourceDescElement) GetObject() *CMsgSteamLearnDataSourceDescObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *CMsgSteamLearnDataSourceDescElement) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CMsgSteamLearnDataSourceDescObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*CMsgSteamLearnDataSourceDescElement `protobuf:"bytes,1,rep,name=elements" json:"elements,omitempty"`
}

func (x *CMsgSteamLearnDataSourceDescObject) Reset() {
	*x = CMsgSteamLearnDataSourceDescObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnDataSourceDescObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnDataSourceDescObject) ProtoMessage() {}

func (x *CMsgSteamLearnDataSourceDescObject) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnDataSourceDescObject.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnDataSourceDescObject) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{100}
}

func (x *CMsgSteamLearnDataSourceDescObject) GetElements() []*CMsgSteamLearnDataSourceDescElement {
	if x != nil {
		return x.Elements
	}
	return nil
}

type CMsgSteamLearnDataSourceElementUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSourceId            *uint32  `protobuf:"varint,1,opt,name=data_source_id,json=dataSourceId" json:"data_source_id,omitempty"`
	DataElementPath         *string  `protobuf:"bytes,2,opt,name=data_element_path,json=dataElementPath" json:"data_element_path,omitempty"`
	IsString                *bool    `protobuf:"varint,3,opt,name=is_string,json=isString" json:"is_string,omitempty"`
	Input                   *uint32  `protobuf:"varint,4,opt,name=input" json:"input,omitempty"`
	SqlColumn               *uint32  `protobuf:"varint,5,opt,name=sql_column,json=sqlColumn" json:"sql_column,omitempty"`
	PreprocessingType       *int32   `protobuf:"varint,6,opt,name=preprocessing_type,json=preprocessingType" json:"preprocessing_type,omitempty"`
	MinRange                *float32 `protobuf:"fixed32,7,opt,name=min_range,json=minRange" json:"min_range,omitempty"`
	MaxRange                *float32 `protobuf:"fixed32,8,opt,name=max_range,json=maxRange" json:"max_range,omitempty"`
	StdDev                  *float32 `protobuf:"fixed32,9,opt,name=std_dev,json=stdDev" json:"std_dev,omitempty"`
	CompactTable            *string  `protobuf:"bytes,10,opt,name=compact_table,json=compactTable" json:"compact_table,omitempty"`
	CompactTableCount       *uint32  `protobuf:"varint,11,opt,name=compact_table_count,json=compactTableCount" json:"compact_table_count,omitempty"`
	SequenceTable           *string  `protobuf:"bytes,12,opt,name=sequence_table,json=sequenceTable" json:"sequence_table,omitempty"`
	SequenceTableCount      *uint32  `protobuf:"varint,13,opt,name=sequence_table_count,json=sequenceTableCount" json:"sequence_table_count,omitempty"`
	SortSequence            *bool    `protobuf:"varint,14,opt,name=sort_sequence,json=sortSequence" json:"sort_sequence,omitempty"`
	SequenceMinLength       *uint32  `protobuf:"varint,15,opt,name=sequence_min_length,json=sequenceMinLength" json:"sequence_min_length,omitempty"`
	TableFullSample         *bool    `protobuf:"varint,16,opt,name=table_full_sample,json=tableFullSample" json:"table_full_sample,omitempty"`
	SequencePrefixFrequency *float32 `protobuf:"fixed32,17,opt,name=sequence_prefix_frequency,json=sequencePrefixFrequency" json:"sequence_prefix_frequency,omitempty"`
	OtherProjectId          *uint32  `protobuf:"varint,18,opt,name=other_project_id,json=otherProjectId" json:"other_project_id,omitempty"`
	OtherFetchId            *uint32  `protobuf:"varint,19,opt,name=other_fetch_id,json=otherFetchId" json:"other_fetch_id,omitempty"`
}

func (x *CMsgSteamLearnDataSourceElementUsage) Reset() {
	*x = CMsgSteamLearnDataSourceElementUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnDataSourceElementUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnDataSourceElementUsage) ProtoMessage() {}

func (x *CMsgSteamLearnDataSourceElementUsage) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnDataSourceElementUsage.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnDataSourceElementUsage) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{101}
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetDataSourceId() uint32 {
	if x != nil && x.DataSourceId != nil {
		return *x.DataSourceId
	}
	return 0
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetDataElementPath() string {
	if x != nil && x.DataElementPath != nil {
		return *x.DataElementPath
	}
	return ""
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetIsString() bool {
	if x != nil && x.IsString != nil {
		return *x.IsString
	}
	return false
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetInput() uint32 {
	if x != nil && x.Input != nil {
		return *x.Input
	}
	return 0
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetSqlColumn() uint32 {
	if x != nil && x.SqlColumn != nil {
		return *x.SqlColumn
	}
	return 0
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetPreprocessingType() int32 {
	if x != nil && x.PreprocessingType != nil {
		return *x.PreprocessingType
	}
	return 0
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetMinRange() float32 {
	if x != nil && x.MinRange != nil {
		return *x.MinRange
	}
	return 0
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetMaxRange() float32 {
	if x != nil && x.MaxRange != nil {
		return *x.MaxRange
	}
	return 0
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetStdDev() float32 {
	if x != nil && x.StdDev != nil {
		return *x.StdDev
	}
	return 0
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetCompactTable() string {
	if x != nil && x.CompactTable != nil {
		return *x.CompactTable
	}
	return ""
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetCompactTableCount() uint32 {
	if x != nil && x.CompactTableCount != nil {
		return *x.CompactTableCount
	}
	return 0
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetSequenceTable() string {
	if x != nil && x.SequenceTable != nil {
		return *x.SequenceTable
	}
	return ""
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetSequenceTableCount() uint32 {
	if x != nil && x.SequenceTableCount != nil {
		return *x.SequenceTableCount
	}
	return 0
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetSortSequence() bool {
	if x != nil && x.SortSequence != nil {
		return *x.SortSequence
	}
	return false
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetSequenceMinLength() uint32 {
	if x != nil && x.SequenceMinLength != nil {
		return *x.SequenceMinLength
	}
	return 0
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetTableFullSample() bool {
	if x != nil && x.TableFullSample != nil {
		return *x.TableFullSample
	}
	return false
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetSequencePrefixFrequency() float32 {
	if x != nil && x.SequencePrefixFrequency != nil {
		return *x.SequencePrefixFrequency
	}
	return 0
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetOtherProjectId() uint32 {
	if x != nil && x.OtherProjectId != nil {
		return *x.OtherProjectId
	}
	return 0
}

func (x *CMsgSteamLearnDataSourceElementUsage) GetOtherFetchId() uint32 {
	if x != nil && x.OtherFetchId != nil {
		return *x.OtherFetchId
	}
	return 0
}

type CMsgSteamLearnFetchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FetchId *uint32 `protobuf:"varint,1,opt,name=fetch_id,json=fetchId" json:"fetch_id,omitempty"`
}

func (x *CMsgSteamLearnFetchInfo) Reset() {
	*x = CMsgSteamLearnFetchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnFetchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnFetchInfo) ProtoMessage() {}

func (x *CMsgSteamLearnFetchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnFetchInfo.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnFetchInfo) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{102}
}

func (x *CMsgSteamLearnFetchInfo) GetFetchId() uint32 {
	if x != nil && x.FetchId != nil {
		return *x.FetchId
	}
	return 0
}

type CMsgSteamLearnModelNodeBatchNormalization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgSteamLearnModelNodeBatchNormalization) Reset() {
	*x = CMsgSteamLearnModelNodeBatchNormalization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeBatchNormalization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeBatchNormalization) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeBatchNormalization) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeBatchNormalization.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeBatchNormalization) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{103}
}

type CMsgSteamLearnModelNodeCombine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgSteamLearnModelNodeCombine) Reset() {
	*x = CMsgSteamLearnModelNodeCombine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeCombine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeCombine) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeCombine) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeCombine.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeCombine) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{104}
}

type CMsgSteamLearnModelNodeConcatenate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Axis *uint32 `protobuf:"varint,1,opt,name=axis" json:"axis,omitempty"`
}

func (x *CMsgSteamLearnModelNodeConcatenate) Reset() {
	*x = CMsgSteamLearnModelNodeConcatenate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeConcatenate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeConcatenate) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeConcatenate) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeConcatenate.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeConcatenate) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{105}
}

func (x *CMsgSteamLearnModelNodeConcatenate) GetAxis() uint32 {
	if x != nil && x.Axis != nil {
		return *x.Axis
	}
	return 0
}

type CMsgSteamLearnModelNodeConditionalExtract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtractFilterType     *int32                                                `protobuf:"varint,10,opt,name=extract_filter_type,json=extractFilterType" json:"extract_filter_type,omitempty"`
	ExtractWeightType     *int32                                                `protobuf:"varint,11,opt,name=extract_weight_type,json=extractWeightType" json:"extract_weight_type,omitempty"`
	FilterInfo            *CMsgSteamLearnModelNodeConditionalExtract_FilterInfo `protobuf:"bytes,12,opt,name=filter_info,json=filterInfo" json:"filter_info,omitempty"`
	WeightInfo            *CMsgSteamLearnModelNodeConditionalExtract_WeightInfo `protobuf:"bytes,13,opt,name=weight_info,json=weightInfo" json:"weight_info,omitempty"`
	CompactTable          *string                                               `protobuf:"bytes,14,opt,name=compact_table,json=compactTable" json:"compact_table,omitempty"`
	ExtractedCompactTable *string                                               `protobuf:"bytes,15,opt,name=extracted_compact_table,json=extractedCompactTable" json:"extracted_compact_table,omitempty"`
}

func (x *CMsgSteamLearnModelNodeConditionalExtract) Reset() {
	*x = CMsgSteamLearnModelNodeConditionalExtract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeConditionalExtract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeConditionalExtract) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeConditionalExtract) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeConditionalExtract.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeConditionalExtract) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{106}
}

func (x *CMsgSteamLearnModelNodeConditionalExtract) GetExtractFilterType() int32 {
	if x != nil && x.ExtractFilterType != nil {
		return *x.ExtractFilterType
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeConditionalExtract) GetExtractWeightType() int32 {
	if x != nil && x.ExtractWeightType != nil {
		return *x.ExtractWeightType
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeConditionalExtract) GetFilterInfo() *CMsgSteamLearnModelNodeConditionalExtract_FilterInfo {
	if x != nil {
		return x.FilterInfo
	}
	return nil
}

func (x *CMsgSteamLearnModelNodeConditionalExtract) GetWeightInfo() *CMsgSteamLearnModelNodeConditionalExtract_WeightInfo {
	if x != nil {
		return x.WeightInfo
	}
	return nil
}

func (x *CMsgSteamLearnModelNodeConditionalExtract) GetCompactTable() string {
	if x != nil && x.CompactTable != nil {
		return *x.CompactTable
	}
	return ""
}

func (x *CMsgSteamLearnModelNodeConditionalExtract) GetExtractedCompactTable() string {
	if x != nil && x.ExtractedCompactTable != nil {
		return *x.ExtractedCompactTable
	}
	return ""
}

type CMsgSteamLearnModelNodeConditionalExtract_FilterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppidReleaseRecencyMonths *uint32 `protobuf:"varint,1,opt,name=appid_release_recency_months,json=appidReleaseRecencyMonths" json:"appid_release_recency_months,omitempty"`
	AppidPublisherId          *uint32 `protobuf:"varint,2,opt,name=appid_publisher_id,json=appidPublisherId" json:"appid_publisher_id,omitempty"`
	AppidFeaturedTagId        *uint32 `protobuf:"varint,3,opt,name=appid_featured_tag_id,json=appidFeaturedTagId" json:"appid_featured_tag_id,omitempty"`
	AppidThemeTagId           *uint32 `protobuf:"varint,4,opt,name=appid_theme_tag_id,json=appidThemeTagId" json:"appid_theme_tag_id,omitempty"`
}

func (x *CMsgSteamLearnModelNodeConditionalExtract_FilterInfo) Reset() {
	*x = CMsgSteamLearnModelNodeConditionalExtract_FilterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeConditionalExtract_FilterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeConditionalExtract_FilterInfo) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeConditionalExtract_FilterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeConditionalExtract_FilterInfo.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeConditionalExtract_FilterInfo) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{107}
}

func (x *CMsgSteamLearnModelNodeConditionalExtract_FilterInfo) GetAppidReleaseRecencyMonths() uint32 {
	if x != nil && x.AppidReleaseRecencyMonths != nil {
		return *x.AppidReleaseRecencyMonths
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeConditionalExtract_FilterInfo) GetAppidPublisherId() uint32 {
	if x != nil && x.AppidPublisherId != nil {
		return *x.AppidPublisherId
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeConditionalExtract_FilterInfo) GetAppidFeaturedTagId() uint32 {
	if x != nil && x.AppidFeaturedTagId != nil {
		return *x.AppidFeaturedTagId
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeConditionalExtract_FilterInfo) GetAppidThemeTagId() uint32 {
	if x != nil && x.AppidThemeTagId != nil {
		return *x.AppidThemeTagId
	}
	return 0
}

type CMsgSteamLearnModelNodeConditionalExtract_WeightInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppidReleaseRecencyBias *float32 `protobuf:"fixed32,1,opt,name=appid_release_recency_bias,json=appidReleaseRecencyBias" json:"appid_release_recency_bias,omitempty"`
	InputNumber             *uint32  `protobuf:"varint,2,opt,name=input_number,json=inputNumber" json:"input_number,omitempty"`
	InputStrength           *float32 `protobuf:"fixed32,3,opt,name=input_strength,json=inputStrength" json:"input_strength,omitempty"`
}

func (x *CMsgSteamLearnModelNodeConditionalExtract_WeightInfo) Reset() {
	*x = CMsgSteamLearnModelNodeConditionalExtract_WeightInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeConditionalExtract_WeightInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeConditionalExtract_WeightInfo) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeConditionalExtract_WeightInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeConditionalExtract_WeightInfo.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeConditionalExtract_WeightInfo) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{108}
}

func (x *CMsgSteamLearnModelNodeConditionalExtract_WeightInfo) GetAppidReleaseRecencyBias() float32 {
	if x != nil && x.AppidReleaseRecencyBias != nil {
		return *x.AppidReleaseRecencyBias
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeConditionalExtract_WeightInfo) GetInputNumber() uint32 {
	if x != nil && x.InputNumber != nil {
		return *x.InputNumber
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeConditionalExtract_WeightInfo) GetInputStrength() float32 {
	if x != nil && x.InputStrength != nil {
		return *x.InputStrength
	}
	return 0
}

type CMsgSteamLearnModelNodeConditionalSwap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgSteamLearnModelNodeConditionalSwap) Reset() {
	*x = CMsgSteamLearnModelNodeConditionalSwap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeConditionalSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeConditionalSwap) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeConditionalSwap) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeConditionalSwap.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeConditionalSwap) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{109}
}

type CMsgSteamLearnModelNodeConv1D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters    *uint32 `protobuf:"varint,1,opt,name=filters" json:"filters,omitempty"`
	KernelSize *uint32 `protobuf:"varint,2,opt,name=kernel_size,json=kernelSize" json:"kernel_size,omitempty"`
	Strides    *uint32 `protobuf:"varint,3,opt,name=strides" json:"strides,omitempty"`
	Activation *int32  `protobuf:"varint,4,opt,name=activation" json:"activation,omitempty"`
}

func (x *CMsgSteamLearnModelNodeConv1D) Reset() {
	*x = CMsgSteamLearnModelNodeConv1D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeConv1D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeConv1D) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeConv1D) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeConv1D.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeConv1D) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{110}
}

func (x *CMsgSteamLearnModelNodeConv1D) GetFilters() uint32 {
	if x != nil && x.Filters != nil {
		return *x.Filters
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeConv1D) GetKernelSize() uint32 {
	if x != nil && x.KernelSize != nil {
		return *x.KernelSize
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeConv1D) GetStrides() uint32 {
	if x != nil && x.Strides != nil {
		return *x.Strides
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeConv1D) GetActivation() int32 {
	if x != nil && x.Activation != nil {
		return *x.Activation
	}
	return 0
}

type CMsgSteamLearnModelNodeDense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activation     *int32  `protobuf:"varint,1,opt,name=activation" json:"activation,omitempty"`
	Width          *uint32 `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Regularization *int32  `protobuf:"varint,3,opt,name=regularization" json:"regularization,omitempty"`
}

func (x *CMsgSteamLearnModelNodeDense) Reset() {
	*x = CMsgSteamLearnModelNodeDense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeDense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeDense) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeDense) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeDense.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeDense) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{111}
}

func (x *CMsgSteamLearnModelNodeDense) GetActivation() int32 {
	if x != nil && x.Activation != nil {
		return *x.Activation
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeDense) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeDense) GetRegularization() int32 {
	if x != nil && x.Regularization != nil {
		return *x.Regularization
	}
	return 0
}

type CMsgSteamLearnModelNodeDenseStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activation     *int32   `protobuf:"varint,1,opt,name=activation" json:"activation,omitempty"`
	Width          []uint32 `protobuf:"varint,2,rep,name=width" json:"width,omitempty"`
	DropoutPct     *uint32  `protobuf:"varint,3,opt,name=dropout_pct,json=dropoutPct" json:"dropout_pct,omitempty"`
	Regularization *int32   `protobuf:"varint,4,opt,name=regularization" json:"regularization,omitempty"`
}

func (x *CMsgSteamLearnModelNodeDenseStack) Reset() {
	*x = CMsgSteamLearnModelNodeDenseStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeDenseStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeDenseStack) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeDenseStack) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeDenseStack.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeDenseStack) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{112}
}

func (x *CMsgSteamLearnModelNodeDenseStack) GetActivation() int32 {
	if x != nil && x.Activation != nil {
		return *x.Activation
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeDenseStack) GetWidth() []uint32 {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *CMsgSteamLearnModelNodeDenseStack) GetDropoutPct() uint32 {
	if x != nil && x.DropoutPct != nil {
		return *x.DropoutPct
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeDenseStack) GetRegularization() int32 {
	if x != nil && x.Regularization != nil {
		return *x.Regularization
	}
	return 0
}

type CMsgSteamLearnModelNodeDot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Normalize *bool `protobuf:"varint,1,opt,name=normalize" json:"normalize,omitempty"`
}

func (x *CMsgSteamLearnModelNodeDot) Reset() {
	*x = CMsgSteamLearnModelNodeDot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeDot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeDot) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeDot) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeDot.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeDot) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{113}
}

func (x *CMsgSteamLearnModelNodeDot) GetNormalize() bool {
	if x != nil && x.Normalize != nil {
		return *x.Normalize
	}
	return false
}

type CMsgSteamLearnModelNodeDropout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropoutPct *uint32 `protobuf:"varint,1,opt,name=dropout_pct,json=dropoutPct" json:"dropout_pct,omitempty"`
}

func (x *CMsgSteamLearnModelNodeDropout) Reset() {
	*x = CMsgSteamLearnModelNodeDropout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeDropout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeDropout) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeDropout) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeDropout.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeDropout) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{114}
}

func (x *CMsgSteamLearnModelNodeDropout) GetDropoutPct() uint32 {
	if x != nil && x.DropoutPct != nil {
		return *x.DropoutPct
	}
	return 0
}

type CMsgSteamLearnModelNodeEmbedding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxValue       *uint32 `protobuf:"varint,1,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	CompactTable   *string `protobuf:"bytes,2,opt,name=compact_table,json=compactTable" json:"compact_table,omitempty"`
	EmbeddingWidth *uint32 `protobuf:"varint,3,opt,name=embedding_width,json=embeddingWidth" json:"embedding_width,omitempty"`
	Flatten        *bool   `protobuf:"varint,4,opt,name=flatten" json:"flatten,omitempty"`
	ExportName     *string `protobuf:"bytes,5,opt,name=export_name,json=exportName" json:"export_name,omitempty"`
	EmbedName      *string `protobuf:"bytes,6,opt,name=embed_name,json=embedName" json:"embed_name,omitempty"`
}

func (x *CMsgSteamLearnModelNodeEmbedding) Reset() {
	*x = CMsgSteamLearnModelNodeEmbedding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeEmbedding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeEmbedding) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeEmbedding) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeEmbedding.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeEmbedding) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{115}
}

func (x *CMsgSteamLearnModelNodeEmbedding) GetMaxValue() uint32 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeEmbedding) GetCompactTable() string {
	if x != nil && x.CompactTable != nil {
		return *x.CompactTable
	}
	return ""
}

func (x *CMsgSteamLearnModelNodeEmbedding) GetEmbeddingWidth() uint32 {
	if x != nil && x.EmbeddingWidth != nil {
		return *x.EmbeddingWidth
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeEmbedding) GetFlatten() bool {
	if x != nil && x.Flatten != nil {
		return *x.Flatten
	}
	return false
}

func (x *CMsgSteamLearnModelNodeEmbedding) GetExportName() string {
	if x != nil && x.ExportName != nil {
		return *x.ExportName
	}
	return ""
}

func (x *CMsgSteamLearnModelNodeEmbedding) GetEmbedName() string {
	if x != nil && x.EmbedName != nil {
		return *x.EmbedName
	}
	return ""
}

type CMsgSteamLearnModelNodeExplode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgSteamLearnModelNodeExplode) Reset() {
	*x = CMsgSteamLearnModelNodeExplode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeExplode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeExplode) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeExplode) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeExplode.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeExplode) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{116}
}

type CMsgSteamLearnModelNodeExternalEmbedding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId     *uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	TrainId       *uint32 `protobuf:"varint,2,opt,name=train_id,json=trainId" json:"train_id,omitempty"`
	EmbeddingName *string `protobuf:"bytes,3,opt,name=embedding_name,json=embeddingName" json:"embedding_name,omitempty"`
	CompactTable  *string `protobuf:"bytes,4,opt,name=compact_table,json=compactTable" json:"compact_table,omitempty"`
}

func (x *CMsgSteamLearnModelNodeExternalEmbedding) Reset() {
	*x = CMsgSteamLearnModelNodeExternalEmbedding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeExternalEmbedding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeExternalEmbedding) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeExternalEmbedding) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeExternalEmbedding.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeExternalEmbedding) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{117}
}

func (x *CMsgSteamLearnModelNodeExternalEmbedding) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeExternalEmbedding) GetTrainId() uint32 {
	if x != nil && x.TrainId != nil {
		return *x.TrainId
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeExternalEmbedding) GetEmbeddingName() string {
	if x != nil && x.EmbeddingName != nil {
		return *x.EmbeddingName
	}
	return ""
}

func (x *CMsgSteamLearnModelNodeExternalEmbedding) GetCompactTable() string {
	if x != nil && x.CompactTable != nil {
		return *x.CompactTable
	}
	return ""
}

type CMsgSteamLearnModelNodeExternalModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          *uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	TrainId            *uint32 `protobuf:"varint,2,opt,name=train_id,json=trainId" json:"train_id,omitempty"`
	NamedInferenceName *string `protobuf:"bytes,3,opt,name=named_inference_name,json=namedInferenceName" json:"named_inference_name,omitempty"`
	FreezeWeights      *bool   `protobuf:"varint,4,opt,name=freeze_weights,json=freezeWeights" json:"freeze_weights,omitempty"`
}

func (x *CMsgSteamLearnModelNodeExternalModel) Reset() {
	*x = CMsgSteamLearnModelNodeExternalModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeExternalModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeExternalModel) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeExternalModel) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeExternalModel.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeExternalModel) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{118}
}

func (x *CMsgSteamLearnModelNodeExternalModel) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeExternalModel) GetTrainId() uint32 {
	if x != nil && x.TrainId != nil {
		return *x.TrainId
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeExternalModel) GetNamedInferenceName() string {
	if x != nil && x.NamedInferenceName != nil {
		return *x.NamedInferenceName
	}
	return ""
}

func (x *CMsgSteamLearnModelNodeExternalModel) GetFreezeWeights() bool {
	if x != nil && x.FreezeWeights != nil {
		return *x.FreezeWeights
	}
	return false
}

type CMsgSteamLearnModelNodeExtract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputType             *int32   `protobuf:"varint,1,opt,name=input_type,json=inputType" json:"input_type,omitempty"`
	Mode                  *int32   `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
	Exclusion             *int32   `protobuf:"varint,3,opt,name=exclusion" json:"exclusion,omitempty"`
	Selection             *int32   `protobuf:"varint,4,opt,name=selection" json:"selection,omitempty"`
	BiasStart             *float32 `protobuf:"fixed32,5,opt,name=bias_start,json=biasStart" json:"bias_start,omitempty"`
	BiasEnd               *float32 `protobuf:"fixed32,6,opt,name=bias_end,json=biasEnd" json:"bias_end,omitempty"`
	InputBiasInputNumber  *uint32  `protobuf:"varint,7,opt,name=input_bias_input_number,json=inputBiasInputNumber" json:"input_bias_input_number,omitempty"`
	InputBiasStrength     *float32 `protobuf:"fixed32,8,opt,name=input_bias_strength,json=inputBiasStrength" json:"input_bias_strength,omitempty"`
	PositiveSamplePercent *uint32  `protobuf:"varint,9,opt,name=positive_sample_percent,json=positiveSamplePercent" json:"positive_sample_percent,omitempty"`
	CompactTable          *string  `protobuf:"bytes,10,opt,name=compact_table,json=compactTable" json:"compact_table,omitempty"`
	ExtractedCompactTable *string  `protobuf:"bytes,11,opt,name=extracted_compact_table,json=extractedCompactTable" json:"extracted_compact_table,omitempty"`
	RecencyMonths         *uint32  `protobuf:"varint,12,opt,name=recency_months,json=recencyMonths" json:"recency_months,omitempty"`
	FestName              *string  `protobuf:"bytes,13,opt,name=fest_name,json=festName" json:"fest_name,omitempty"`
}

func (x *CMsgSteamLearnModelNodeExtract) Reset() {
	*x = CMsgSteamLearnModelNodeExtract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeExtract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeExtract) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeExtract) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeExtract.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeExtract) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{119}
}

func (x *CMsgSteamLearnModelNodeExtract) GetInputType() int32 {
	if x != nil && x.InputType != nil {
		return *x.InputType
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeExtract) GetMode() int32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeExtract) GetExclusion() int32 {
	if x != nil && x.Exclusion != nil {
		return *x.Exclusion
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeExtract) GetSelection() int32 {
	if x != nil && x.Selection != nil {
		return *x.Selection
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeExtract) GetBiasStart() float32 {
	if x != nil && x.BiasStart != nil {
		return *x.BiasStart
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeExtract) GetBiasEnd() float32 {
	if x != nil && x.BiasEnd != nil {
		return *x.BiasEnd
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeExtract) GetInputBiasInputNumber() uint32 {
	if x != nil && x.InputBiasInputNumber != nil {
		return *x.InputBiasInputNumber
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeExtract) GetInputBiasStrength() float32 {
	if x != nil && x.InputBiasStrength != nil {
		return *x.InputBiasStrength
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeExtract) GetPositiveSamplePercent() uint32 {
	if x != nil && x.PositiveSamplePercent != nil {
		return *x.PositiveSamplePercent
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeExtract) GetCompactTable() string {
	if x != nil && x.CompactTable != nil {
		return *x.CompactTable
	}
	return ""
}

func (x *CMsgSteamLearnModelNodeExtract) GetExtractedCompactTable() string {
	if x != nil && x.ExtractedCompactTable != nil {
		return *x.ExtractedCompactTable
	}
	return ""
}

func (x *CMsgSteamLearnModelNodeExtract) GetRecencyMonths() uint32 {
	if x != nil && x.RecencyMonths != nil {
		return *x.RecencyMonths
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeExtract) GetFestName() string {
	if x != nil && x.FestName != nil {
		return *x.FestName
	}
	return ""
}

type CMsgSteamLearnModelNodeFlatten struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgSteamLearnModelNodeFlatten) Reset() {
	*x = CMsgSteamLearnModelNodeFlatten{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeFlatten) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeFlatten) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeFlatten) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeFlatten.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeFlatten) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{120}
}

type CMsgSteamLearnModelNodeGlobalAvgPooling1D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgSteamLearnModelNodeGlobalAvgPooling1D) Reset() {
	*x = CMsgSteamLearnModelNodeGlobalAvgPooling1D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeGlobalAvgPooling1D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeGlobalAvgPooling1D) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeGlobalAvgPooling1D) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeGlobalAvgPooling1D.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeGlobalAvgPooling1D) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{121}
}

type CMsgSteamLearnModelNodeGlobalMaxPooling1D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgSteamLearnModelNodeGlobalMaxPooling1D) Reset() {
	*x = CMsgSteamLearnModelNodeGlobalMaxPooling1D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeGlobalMaxPooling1D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeGlobalMaxPooling1D) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeGlobalMaxPooling1D) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeGlobalMaxPooling1D.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeGlobalMaxPooling1D) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{122}
}

type CMsgSteamLearnModelNodeInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputNum *uint32 `protobuf:"varint,1,opt,name=input_num,json=inputNum" json:"input_num,omitempty"`
}

func (x *CMsgSteamLearnModelNodeInput) Reset() {
	*x = CMsgSteamLearnModelNodeInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeInput) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeInput) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeInput.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeInput) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{123}
}

func (x *CMsgSteamLearnModelNodeInput) GetInputNum() uint32 {
	if x != nil && x.InputNum != nil {
		return *x.InputNum
	}
	return 0
}

type CMsgSteamLearnModelNodeKMeansCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumClusters      *uint32 `protobuf:"varint,1,opt,name=num_clusters,json=numClusters" json:"num_clusters,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	GenerateClusters *bool   `protobuf:"varint,3,opt,name=generate_clusters,json=generateClusters" json:"generate_clusters,omitempty"`
}

func (x *CMsgSteamLearnModelNodeKMeansCluster) Reset() {
	*x = CMsgSteamLearnModelNodeKMeansCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeKMeansCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeKMeansCluster) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeKMeansCluster) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeKMeansCluster.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeKMeansCluster) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{124}
}

func (x *CMsgSteamLearnModelNodeKMeansCluster) GetNumClusters() uint32 {
	if x != nil && x.NumClusters != nil {
		return *x.NumClusters
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeKMeansCluster) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSteamLearnModelNodeKMeansCluster) GetGenerateClusters() bool {
	if x != nil && x.GenerateClusters != nil {
		return *x.GenerateClusters
	}
	return false
}

type CMsgSteamLearnModelNodeMaskedHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgSteamLearnModelNodeMaskedHead) Reset() {
	*x = CMsgSteamLearnModelNodeMaskedHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeMaskedHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeMaskedHead) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeMaskedHead) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeMaskedHead.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeMaskedHead) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{125}
}

type CMsgSteamLearnModelNodeMaxPooling1D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolSize *uint32 `protobuf:"varint,1,opt,name=pool_size,json=poolSize" json:"pool_size,omitempty"`
	Strides  *uint32 `protobuf:"varint,2,opt,name=strides" json:"strides,omitempty"`
}

func (x *CMsgSteamLearnModelNodeMaxPooling1D) Reset() {
	*x = CMsgSteamLearnModelNodeMaxPooling1D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeMaxPooling1D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeMaxPooling1D) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeMaxPooling1D) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeMaxPooling1D.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeMaxPooling1D) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{126}
}

func (x *CMsgSteamLearnModelNodeMaxPooling1D) GetPoolSize() uint32 {
	if x != nil && x.PoolSize != nil {
		return *x.PoolSize
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeMaxPooling1D) GetStrides() uint32 {
	if x != nil && x.Strides != nil {
		return *x.Strides
	}
	return 0
}

type CMsgSteamLearnModelNodeNamedInference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	OnlyInference *bool   `protobuf:"varint,2,opt,name=only_inference,json=onlyInference" json:"only_inference,omitempty"`
}

func (x *CMsgSteamLearnModelNodeNamedInference) Reset() {
	*x = CMsgSteamLearnModelNodeNamedInference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeNamedInference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeNamedInference) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeNamedInference) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeNamedInference.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeNamedInference) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{127}
}

func (x *CMsgSteamLearnModelNodeNamedInference) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSteamLearnModelNodeNamedInference) GetOnlyInference() bool {
	if x != nil && x.OnlyInference != nil {
		return *x.OnlyInference
	}
	return false
}

type CMsgSteamLearnModelNodeNormalize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgSteamLearnModelNodeNormalize) Reset() {
	*x = CMsgSteamLearnModelNodeNormalize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeNormalize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeNormalize) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeNormalize) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeNormalize.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeNormalize) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{128}
}

type CMsgSteamLearnModelNodeOnehot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width        *uint32 `protobuf:"varint,1,opt,name=width" json:"width,omitempty"`
	CompactTable *string `protobuf:"bytes,2,opt,name=compact_table,json=compactTable" json:"compact_table,omitempty"`
	MultiHot     *bool   `protobuf:"varint,3,opt,name=multi_hot,json=multiHot" json:"multi_hot,omitempty"`
}

func (x *CMsgSteamLearnModelNodeOnehot) Reset() {
	*x = CMsgSteamLearnModelNodeOnehot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeOnehot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeOnehot) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeOnehot) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeOnehot.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeOnehot) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{129}
}

func (x *CMsgSteamLearnModelNodeOnehot) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeOnehot) GetCompactTable() string {
	if x != nil && x.CompactTable != nil {
		return *x.CompactTable
	}
	return ""
}

func (x *CMsgSteamLearnModelNodeOnehot) GetMultiHot() bool {
	if x != nil && x.MultiHot != nil {
		return *x.MultiHot
	}
	return false
}

type CMsgSteamLearnModelNodeSequenceSplit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadSplitChance   *uint32 `protobuf:"varint,1,opt,name=head_split_chance,json=headSplitChance" json:"head_split_chance,omitempty"`
	MidSplitChance    *uint32 `protobuf:"varint,2,opt,name=mid_split_chance,json=midSplitChance" json:"mid_split_chance,omitempty"`
	TailSplitChance   *uint32 `protobuf:"varint,3,opt,name=tail_split_chance,json=tailSplitChance" json:"tail_split_chance,omitempty"`
	SequenceTableName *string `protobuf:"bytes,4,opt,name=sequence_table_name,json=sequenceTableName" json:"sequence_table_name,omitempty"`
	CompactTableName  *string `protobuf:"bytes,5,opt,name=compact_table_name,json=compactTableName" json:"compact_table_name,omitempty"`
}

func (x *CMsgSteamLearnModelNodeSequenceSplit) Reset() {
	*x = CMsgSteamLearnModelNodeSequenceSplit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeSequenceSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeSequenceSplit) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeSequenceSplit) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeSequenceSplit.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeSequenceSplit) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{130}
}

func (x *CMsgSteamLearnModelNodeSequenceSplit) GetHeadSplitChance() uint32 {
	if x != nil && x.HeadSplitChance != nil {
		return *x.HeadSplitChance
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeSequenceSplit) GetMidSplitChance() uint32 {
	if x != nil && x.MidSplitChance != nil {
		return *x.MidSplitChance
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeSequenceSplit) GetTailSplitChance() uint32 {
	if x != nil && x.TailSplitChance != nil {
		return *x.TailSplitChance
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeSequenceSplit) GetSequenceTableName() string {
	if x != nil && x.SequenceTableName != nil {
		return *x.SequenceTableName
	}
	return ""
}

func (x *CMsgSteamLearnModelNodeSequenceSplit) GetCompactTableName() string {
	if x != nil && x.CompactTableName != nil {
		return *x.CompactTableName
	}
	return ""
}

type CMsgSteamLearnModelNodeShuffle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExcludeZeroes *bool `protobuf:"varint,1,opt,name=exclude_zeroes,json=excludeZeroes" json:"exclude_zeroes,omitempty"`
}

func (x *CMsgSteamLearnModelNodeShuffle) Reset() {
	*x = CMsgSteamLearnModelNodeShuffle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeShuffle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeShuffle) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeShuffle) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeShuffle.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeShuffle) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{131}
}

func (x *CMsgSteamLearnModelNodeShuffle) GetExcludeZeroes() bool {
	if x != nil && x.ExcludeZeroes != nil {
		return *x.ExcludeZeroes
	}
	return false
}

type CMsgSteamLearnModelNodeSyncedShuffle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExcludeZeroes *bool `protobuf:"varint,1,opt,name=exclude_zeroes,json=excludeZeroes" json:"exclude_zeroes,omitempty"`
}

func (x *CMsgSteamLearnModelNodeSyncedShuffle) Reset() {
	*x = CMsgSteamLearnModelNodeSyncedShuffle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeSyncedShuffle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeSyncedShuffle) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeSyncedShuffle) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeSyncedShuffle.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeSyncedShuffle) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{132}
}

func (x *CMsgSteamLearnModelNodeSyncedShuffle) GetExcludeZeroes() bool {
	if x != nil && x.ExcludeZeroes != nil {
		return *x.ExcludeZeroes
	}
	return false
}

type CMsgSteamLearnModelNodeTextVectorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VocabularySize *uint32 `protobuf:"varint,1,opt,name=vocabulary_size,json=vocabularySize" json:"vocabulary_size,omitempty"`
	Standardize    *int32  `protobuf:"varint,2,opt,name=standardize" json:"standardize,omitempty"`
	Output         *int32  `protobuf:"varint,3,opt,name=output" json:"output,omitempty"`
	SequenceLength *uint32 `protobuf:"varint,4,opt,name=sequence_length,json=sequenceLength" json:"sequence_length,omitempty"`
	Split          *int32  `protobuf:"varint,5,opt,name=split" json:"split,omitempty"`
	Ngrams         *uint32 `protobuf:"varint,6,opt,name=ngrams" json:"ngrams,omitempty"`
	OtherProjectId *uint32 `protobuf:"varint,7,opt,name=other_project_id,json=otherProjectId" json:"other_project_id,omitempty"`
	OtherFetchId   *uint32 `protobuf:"varint,8,opt,name=other_fetch_id,json=otherFetchId" json:"other_fetch_id,omitempty"`
}

func (x *CMsgSteamLearnModelNodeTextVectorization) Reset() {
	*x = CMsgSteamLearnModelNodeTextVectorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeTextVectorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeTextVectorization) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeTextVectorization) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeTextVectorization.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeTextVectorization) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{133}
}

func (x *CMsgSteamLearnModelNodeTextVectorization) GetVocabularySize() uint32 {
	if x != nil && x.VocabularySize != nil {
		return *x.VocabularySize
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTextVectorization) GetStandardize() int32 {
	if x != nil && x.Standardize != nil {
		return *x.Standardize
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTextVectorization) GetOutput() int32 {
	if x != nil && x.Output != nil {
		return *x.Output
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTextVectorization) GetSequenceLength() uint32 {
	if x != nil && x.SequenceLength != nil {
		return *x.SequenceLength
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTextVectorization) GetSplit() int32 {
	if x != nil && x.Split != nil {
		return *x.Split
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTextVectorization) GetNgrams() uint32 {
	if x != nil && x.Ngrams != nil {
		return *x.Ngrams
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTextVectorization) GetOtherProjectId() uint32 {
	if x != nil && x.OtherProjectId != nil {
		return *x.OtherProjectId
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTextVectorization) GetOtherFetchId() uint32 {
	if x != nil && x.OtherFetchId != nil {
		return *x.OtherFetchId
	}
	return 0
}

type CMsgSteamLearnModelNodeTimeDistributedDense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activation *int32  `protobuf:"varint,1,opt,name=activation" json:"activation,omitempty"`
	Width      *uint32 `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
}

func (x *CMsgSteamLearnModelNodeTimeDistributedDense) Reset() {
	*x = CMsgSteamLearnModelNodeTimeDistributedDense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeTimeDistributedDense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeTimeDistributedDense) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeTimeDistributedDense) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeTimeDistributedDense.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeTimeDistributedDense) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{134}
}

func (x *CMsgSteamLearnModelNodeTimeDistributedDense) GetActivation() int32 {
	if x != nil && x.Activation != nil {
		return *x.Activation
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTimeDistributedDense) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

type CMsgSteamLearnModelNodeTokenMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaskPct        *uint32 `protobuf:"varint,1,opt,name=mask_pct,json=maskPct" json:"mask_pct,omitempty"`
	MaskCountLimit *uint32 `protobuf:"varint,2,opt,name=mask_count_limit,json=maskCountLimit" json:"mask_count_limit,omitempty"`
	RandomPct      *uint32 `protobuf:"varint,3,opt,name=random_pct,json=randomPct" json:"random_pct,omitempty"`
	KeepPct        *uint32 `protobuf:"varint,4,opt,name=keep_pct,json=keepPct" json:"keep_pct,omitempty"`
}

func (x *CMsgSteamLearnModelNodeTokenMask) Reset() {
	*x = CMsgSteamLearnModelNodeTokenMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeTokenMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeTokenMask) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeTokenMask) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeTokenMask.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeTokenMask) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{135}
}

func (x *CMsgSteamLearnModelNodeTokenMask) GetMaskPct() uint32 {
	if x != nil && x.MaskPct != nil {
		return *x.MaskPct
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTokenMask) GetMaskCountLimit() uint32 {
	if x != nil && x.MaskCountLimit != nil {
		return *x.MaskCountLimit
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTokenMask) GetRandomPct() uint32 {
	if x != nil && x.RandomPct != nil {
		return *x.RandomPct
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTokenMask) GetKeepPct() uint32 {
	if x != nil && x.KeepPct != nil {
		return *x.KeepPct
	}
	return 0
}

type CMsgSteamLearnModelNodeTokenTransformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VocabularySize        *uint32 `protobuf:"varint,1,opt,name=vocabulary_size,json=vocabularySize" json:"vocabulary_size,omitempty"`
	SequenceLength        *uint32 `protobuf:"varint,2,opt,name=sequence_length,json=sequenceLength" json:"sequence_length,omitempty"`
	EmbeddingWidth        *uint32 `protobuf:"varint,3,opt,name=embedding_width,json=embeddingWidth" json:"embedding_width,omitempty"`
	TransformerLayers     *uint32 `protobuf:"varint,4,opt,name=transformer_layers,json=transformerLayers" json:"transformer_layers,omitempty"`
	TransformerDim        *uint32 `protobuf:"varint,5,opt,name=transformer_dim,json=transformerDim" json:"transformer_dim,omitempty"`
	TransformerHeads      *uint32 `protobuf:"varint,6,opt,name=transformer_heads,json=transformerHeads" json:"transformer_heads,omitempty"`
	TransformerDropoutPct *uint32 `protobuf:"varint,7,opt,name=transformer_dropout_pct,json=transformerDropoutPct" json:"transformer_dropout_pct,omitempty"`
	CompactTable          *string `protobuf:"bytes,8,opt,name=compact_table,json=compactTable" json:"compact_table,omitempty"`
}

func (x *CMsgSteamLearnModelNodeTokenTransformer) Reset() {
	*x = CMsgSteamLearnModelNodeTokenTransformer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeTokenTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeTokenTransformer) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeTokenTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeTokenTransformer.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeTokenTransformer) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{136}
}

func (x *CMsgSteamLearnModelNodeTokenTransformer) GetVocabularySize() uint32 {
	if x != nil && x.VocabularySize != nil {
		return *x.VocabularySize
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTokenTransformer) GetSequenceLength() uint32 {
	if x != nil && x.SequenceLength != nil {
		return *x.SequenceLength
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTokenTransformer) GetEmbeddingWidth() uint32 {
	if x != nil && x.EmbeddingWidth != nil {
		return *x.EmbeddingWidth
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTokenTransformer) GetTransformerLayers() uint32 {
	if x != nil && x.TransformerLayers != nil {
		return *x.TransformerLayers
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTokenTransformer) GetTransformerDim() uint32 {
	if x != nil && x.TransformerDim != nil {
		return *x.TransformerDim
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTokenTransformer) GetTransformerHeads() uint32 {
	if x != nil && x.TransformerHeads != nil {
		return *x.TransformerHeads
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTokenTransformer) GetTransformerDropoutPct() uint32 {
	if x != nil && x.TransformerDropoutPct != nil {
		return *x.TransformerDropoutPct
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTokenTransformer) GetCompactTable() string {
	if x != nil && x.CompactTable != nil {
		return *x.CompactTable
	}
	return ""
}

type CMsgSteamLearnModelNodeTrain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputCount     *uint32  `protobuf:"varint,1,opt,name=input_count,json=inputCount" json:"input_count,omitempty"`
	Activation     *int32   `protobuf:"varint,2,opt,name=activation" json:"activation,omitempty"`
	Width          *uint32  `protobuf:"varint,3,opt,name=width" json:"width,omitempty"`
	CompactTable   *string  `protobuf:"bytes,4,opt,name=compact_table,json=compactTable" json:"compact_table,omitempty"`
	Loss           *int32   `protobuf:"varint,6,opt,name=loss" json:"loss,omitempty"`
	LearningRate   *float32 `protobuf:"fixed32,7,opt,name=learning_rate,json=learningRate" json:"learning_rate,omitempty"`
	UsesWeightMask *bool    `protobuf:"varint,8,opt,name=uses_weight_mask,json=usesWeightMask" json:"uses_weight_mask,omitempty"`
}

func (x *CMsgSteamLearnModelNodeTrain) Reset() {
	*x = CMsgSteamLearnModelNodeTrain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeTrain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeTrain) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeTrain) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeTrain.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeTrain) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{137}
}

func (x *CMsgSteamLearnModelNodeTrain) GetInputCount() uint32 {
	if x != nil && x.InputCount != nil {
		return *x.InputCount
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTrain) GetActivation() int32 {
	if x != nil && x.Activation != nil {
		return *x.Activation
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTrain) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTrain) GetCompactTable() string {
	if x != nil && x.CompactTable != nil {
		return *x.CompactTable
	}
	return ""
}

func (x *CMsgSteamLearnModelNodeTrain) GetLoss() int32 {
	if x != nil && x.Loss != nil {
		return *x.Loss
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTrain) GetLearningRate() float32 {
	if x != nil && x.LearningRate != nil {
		return *x.LearningRate
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTrain) GetUsesWeightMask() bool {
	if x != nil && x.UsesWeightMask != nil {
		return *x.UsesWeightMask
	}
	return false
}

type CMsgSteamLearnModelNodeTransformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumHeads          *uint32 `protobuf:"varint,1,opt,name=num_heads,json=numHeads" json:"num_heads,omitempty"`
	FeedforwardSize   *uint32 `protobuf:"varint,3,opt,name=feedforward_size,json=feedforwardSize" json:"feedforward_size,omitempty"`
	DropoutPct        *uint32 `protobuf:"varint,4,opt,name=dropout_pct,json=dropoutPct" json:"dropout_pct,omitempty"`
	NumInternalBlocks *uint32 `protobuf:"varint,5,opt,name=num_internal_blocks,json=numInternalBlocks" json:"num_internal_blocks,omitempty"`
	Regularization    *int32  `protobuf:"varint,6,opt,name=regularization" json:"regularization,omitempty"`
}

func (x *CMsgSteamLearnModelNodeTransformer) Reset() {
	*x = CMsgSteamLearnModelNodeTransformer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeTransformer) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeTransformer.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeTransformer) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{138}
}

func (x *CMsgSteamLearnModelNodeTransformer) GetNumHeads() uint32 {
	if x != nil && x.NumHeads != nil {
		return *x.NumHeads
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTransformer) GetFeedforwardSize() uint32 {
	if x != nil && x.FeedforwardSize != nil {
		return *x.FeedforwardSize
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTransformer) GetDropoutPct() uint32 {
	if x != nil && x.DropoutPct != nil {
		return *x.DropoutPct
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTransformer) GetNumInternalBlocks() uint32 {
	if x != nil && x.NumInternalBlocks != nil {
		return *x.NumInternalBlocks
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeTransformer) GetRegularization() int32 {
	if x != nil && x.Regularization != nil {
		return *x.Regularization
	}
	return 0
}

type CMsgSteamLearnModelNodeWeightedAverage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Axis       *uint32 `protobuf:"varint,1,opt,name=axis" json:"axis,omitempty"`
	UseWeights *bool   `protobuf:"varint,2,opt,name=use_weights,json=useWeights" json:"use_weights,omitempty"`
}

func (x *CMsgSteamLearnModelNodeWeightedAverage) Reset() {
	*x = CMsgSteamLearnModelNodeWeightedAverage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnModelNodeWeightedAverage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnModelNodeWeightedAverage) ProtoMessage() {}

func (x *CMsgSteamLearnModelNodeWeightedAverage) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnModelNodeWeightedAverage.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnModelNodeWeightedAverage) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{139}
}

func (x *CMsgSteamLearnModelNodeWeightedAverage) GetAxis() uint32 {
	if x != nil && x.Axis != nil {
		return *x.Axis
	}
	return 0
}

func (x *CMsgSteamLearnModelNodeWeightedAverage) GetUseWeights() bool {
	if x != nil && x.UseWeights != nil {
		return *x.UseWeights
	}
	return false
}

type CMsgSteamLearnProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          *uint32                        `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	ProjectName        *string                        `protobuf:"bytes,2,opt,name=project_name,json=projectName" json:"project_name,omitempty"`
	ProjectDescription *string                        `protobuf:"bytes,3,opt,name=project_description,json=projectDescription" json:"project_description,omitempty"`
	CreatorAccountId   *uint32                        `protobuf:"varint,4,opt,name=creator_account_id,json=creatorAccountId" json:"creator_account_id,omitempty"`
	CreateTime         *uint32                        `protobuf:"varint,5,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UnpublishedConfig  *CMsgSteamLearnProjectConfig   `protobuf:"bytes,6,opt,name=unpublished_config,json=unpublishedConfig" json:"unpublished_config,omitempty"`
	PublishedConfigs   []*CMsgSteamLearnProjectConfig `protobuf:"bytes,7,rep,name=published_configs,json=publishedConfigs" json:"published_configs,omitempty"`
}

func (x *CMsgSteamLearnProject) Reset() {
	*x = CMsgSteamLearnProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnProject) ProtoMessage() {}

func (x *CMsgSteamLearnProject) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnProject.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnProject) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{140}
}

func (x *CMsgSteamLearnProject) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearnProject) GetProjectName() string {
	if x != nil && x.ProjectName != nil {
		return *x.ProjectName
	}
	return ""
}

func (x *CMsgSteamLearnProject) GetProjectDescription() string {
	if x != nil && x.ProjectDescription != nil {
		return *x.ProjectDescription
	}
	return ""
}

func (x *CMsgSteamLearnProject) GetCreatorAccountId() uint32 {
	if x != nil && x.CreatorAccountId != nil {
		return *x.CreatorAccountId
	}
	return 0
}

func (x *CMsgSteamLearnProject) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *CMsgSteamLearnProject) GetUnpublishedConfig() *CMsgSteamLearnProjectConfig {
	if x != nil {
		return x.UnpublishedConfig
	}
	return nil
}

func (x *CMsgSteamLearnProject) GetPublishedConfigs() []*CMsgSteamLearnProjectConfig {
	if x != nil {
		return x.PublishedConfigs
	}
	return nil
}

type CMsgSteamLearnProjectConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId               *uint32                                                     `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	PublishTime             *uint32                                                     `protobuf:"varint,2,opt,name=publish_time,json=publishTime" json:"publish_time,omitempty"`
	PublishedVersion        *uint32                                                     `protobuf:"varint,3,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
	DataSourceIds           []uint32                                                    `protobuf:"varint,4,rep,name=data_source_ids,json=dataSourceIds" json:"data_source_ids,omitempty"`
	DataSourceElementUsages []*CMsgSteamLearnDataSourceElementUsage                     `protobuf:"bytes,5,rep,name=data_source_element_usages,json=dataSourceElementUsages" json:"data_source_element_usages,omitempty"`
	ProjectNodes            []*CMsgSteamLearnProjectNode                                `protobuf:"bytes,6,rep,name=project_nodes,json=projectNodes" json:"project_nodes,omitempty"`
	SnapshotConfig          *CMsgSteamLearnProjectSnapshotConfig                        `protobuf:"bytes,7,opt,name=snapshot_config,json=snapshotConfig" json:"snapshot_config,omitempty"`
	TrainConfig             *CMsgSteamLearnTrainConfig                                  `protobuf:"bytes,8,opt,name=train_config,json=trainConfig" json:"train_config,omitempty"`
	SnapshotFilter          *CMsgSteamLearnProjectSnapshotFilter                        `protobuf:"bytes,11,opt,name=snapshot_filter,json=snapshotFilter" json:"snapshot_filter,omitempty"`
	MapDataElementSqlColumn []*CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry `protobuf:"bytes,12,rep,name=map_data_element_sql_column,json=mapDataElementSqlColumn" json:"map_data_element_sql_column,omitempty"`
	TotalSqlColumns         *uint32                                                     `protobuf:"varint,13,opt,name=total_sql_columns,json=totalSqlColumns" json:"total_sql_columns,omitempty"`
	DataRetentionConfig     *CMsgSteamLearnDataRetentionConfig                          `protobuf:"bytes,14,opt,name=data_retention_config,json=dataRetentionConfig" json:"data_retention_config,omitempty"`
	ScheduledTrainConfig    *CMsgSteamLearnScheduledTrainConfig                         `protobuf:"bytes,16,opt,name=scheduled_train_config,json=scheduledTrainConfig" json:"scheduled_train_config,omitempty"`
	FetchInfos              []*CMsgSteamLearnFetchInfo                                  `protobuf:"bytes,17,rep,name=fetch_infos,json=fetchInfos" json:"fetch_infos,omitempty"`
	TrainInfos              []*CMsgSteamLearnTrainInfo                                  `protobuf:"bytes,18,rep,name=train_infos,json=trainInfos" json:"train_infos,omitempty"`
}

func (x *CMsgSteamLearnProjectConfig) Reset() {
	*x = CMsgSteamLearnProjectConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnProjectConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnProjectConfig) ProtoMessage() {}

func (x *CMsgSteamLearnProjectConfig) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnProjectConfig.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnProjectConfig) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{141}
}

func (x *CMsgSteamLearnProjectConfig) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearnProjectConfig) GetPublishTime() uint32 {
	if x != nil && x.PublishTime != nil {
		return *x.PublishTime
	}
	return 0
}

func (x *CMsgSteamLearnProjectConfig) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

func (x *CMsgSteamLearnProjectConfig) GetDataSourceIds() []uint32 {
	if x != nil {
		return x.DataSourceIds
	}
	return nil
}

func (x *CMsgSteamLearnProjectConfig) GetDataSourceElementUsages() []*CMsgSteamLearnDataSourceElementUsage {
	if x != nil {
		return x.DataSourceElementUsages
	}
	return nil
}

func (x *CMsgSteamLearnProjectConfig) GetProjectNodes() []*CMsgSteamLearnProjectNode {
	if x != nil {
		return x.ProjectNodes
	}
	return nil
}

func (x *CMsgSteamLearnProjectConfig) GetSnapshotConfig() *CMsgSteamLearnProjectSnapshotConfig {
	if x != nil {
		return x.SnapshotConfig
	}
	return nil
}

func (x *CMsgSteamLearnProjectConfig) GetTrainConfig() *CMsgSteamLearnTrainConfig {
	if x != nil {
		return x.TrainConfig
	}
	return nil
}

func (x *CMsgSteamLearnProjectConfig) GetSnapshotFilter() *CMsgSteamLearnProjectSnapshotFilter {
	if x != nil {
		return x.SnapshotFilter
	}
	return nil
}

func (x *CMsgSteamLearnProjectConfig) GetMapDataElementSqlColumn() []*CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry {
	if x != nil {
		return x.MapDataElementSqlColumn
	}
	return nil
}

func (x *CMsgSteamLearnProjectConfig) GetTotalSqlColumns() uint32 {
	if x != nil && x.TotalSqlColumns != nil {
		return *x.TotalSqlColumns
	}
	return 0
}

func (x *CMsgSteamLearnProjectConfig) GetDataRetentionConfig() *CMsgSteamLearnDataRetentionConfig {
	if x != nil {
		return x.DataRetentionConfig
	}
	return nil
}

func (x *CMsgSteamLearnProjectConfig) GetScheduledTrainConfig() *CMsgSteamLearnScheduledTrainConfig {
	if x != nil {
		return x.ScheduledTrainConfig
	}
	return nil
}

func (x *CMsgSteamLearnProjectConfig) GetFetchInfos() []*CMsgSteamLearnFetchInfo {
	if x != nil {
		return x.FetchInfos
	}
	return nil
}

func (x *CMsgSteamLearnProjectConfig) GetTrainInfos() []*CMsgSteamLearnTrainInfo {
	if x != nil {
		return x.TrainInfos
	}
	return nil
}

type CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *int32  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry) Reset() {
	*x = CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry) ProtoMessage() {}

func (x *CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{142}
}

func (x *CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CMsgSteamLearnProjectNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId               *uint32                                      `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	LocationX            *int32                                       `protobuf:"varint,2,opt,name=location_x,json=locationX" json:"location_x,omitempty"`
	LocationY            *int32                                       `protobuf:"varint,3,opt,name=location_y,json=locationY" json:"location_y,omitempty"`
	Comment              *string                                      `protobuf:"bytes,4,opt,name=comment" json:"comment,omitempty"`
	Type                 *int32                                       `protobuf:"varint,5,opt,name=type" json:"type,omitempty"`
	Connectors           []*CMsgSteamLearnProjectNodeConnector        `protobuf:"bytes,6,rep,name=connectors" json:"connectors,omitempty"`
	Input                *CMsgSteamLearnModelNodeInput                `protobuf:"bytes,10,opt,name=input" json:"input,omitempty"`
	Dense                *CMsgSteamLearnModelNodeDense                `protobuf:"bytes,11,opt,name=dense" json:"dense,omitempty"`
	DenseStack           *CMsgSteamLearnModelNodeDenseStack           `protobuf:"bytes,12,opt,name=dense_stack,json=denseStack" json:"dense_stack,omitempty"`
	Dropout              *CMsgSteamLearnModelNodeDropout              `protobuf:"bytes,13,opt,name=dropout" json:"dropout,omitempty"`
	Embedding            *CMsgSteamLearnModelNodeEmbedding            `protobuf:"bytes,14,opt,name=embedding" json:"embedding,omitempty"`
	Train                *CMsgSteamLearnModelNodeTrain                `protobuf:"bytes,15,opt,name=train" json:"train,omitempty"`
	ConditionalExtract   *CMsgSteamLearnModelNodeConditionalExtract   `protobuf:"bytes,16,opt,name=conditional_extract,json=conditionalExtract" json:"conditional_extract,omitempty"`
	Concatenate          *CMsgSteamLearnModelNodeConcatenate          `protobuf:"bytes,17,opt,name=concatenate" json:"concatenate,omitempty"`
	Shuffle              *CMsgSteamLearnModelNodeShuffle              `protobuf:"bytes,18,opt,name=shuffle" json:"shuffle,omitempty"`
	SyncedShuffle        *CMsgSteamLearnModelNodeSyncedShuffle        `protobuf:"bytes,19,opt,name=synced_shuffle,json=syncedShuffle" json:"synced_shuffle,omitempty"`
	Onehot               *CMsgSteamLearnModelNodeOnehot               `protobuf:"bytes,20,opt,name=onehot" json:"onehot,omitempty"`
	Explode              *CMsgSteamLearnModelNodeExplode              `protobuf:"bytes,21,opt,name=explode" json:"explode,omitempty"`
	ConditionalSwap      *CMsgSteamLearnModelNodeConditionalSwap      `protobuf:"bytes,22,opt,name=conditional_swap,json=conditionalSwap" json:"conditional_swap,omitempty"`
	Kmeans               *CMsgSteamLearnModelNodeKMeansCluster        `protobuf:"bytes,23,opt,name=kmeans" json:"kmeans,omitempty"`
	Combine              *CMsgSteamLearnModelNodeCombine              `protobuf:"bytes,24,opt,name=combine" json:"combine,omitempty"`
	TextVectorization    *CMsgSteamLearnModelNodeTextVectorization    `protobuf:"bytes,25,opt,name=text_vectorization,json=textVectorization" json:"text_vectorization,omitempty"`
	BatchNormalization   *CMsgSteamLearnModelNodeBatchNormalization   `protobuf:"bytes,26,opt,name=batch_normalization,json=batchNormalization" json:"batch_normalization,omitempty"`
	Normalize            *CMsgSteamLearnModelNodeNormalize            `protobuf:"bytes,27,opt,name=normalize" json:"normalize,omitempty"`
	NamedInference       *CMsgSteamLearnModelNodeNamedInference       `protobuf:"bytes,28,opt,name=named_inference,json=namedInference" json:"named_inference,omitempty"`
	Dot                  *CMsgSteamLearnModelNodeDot                  `protobuf:"bytes,29,opt,name=dot" json:"dot,omitempty"`
	Extract              *CMsgSteamLearnModelNodeExtract              `protobuf:"bytes,30,opt,name=extract" json:"extract,omitempty"`
	Conv_1D              *CMsgSteamLearnModelNodeConv1D               `protobuf:"bytes,31,opt,name=conv_1d,json=conv1d" json:"conv_1d,omitempty"`
	MaxPooling_1D        *CMsgSteamLearnModelNodeMaxPooling1D         `protobuf:"bytes,32,opt,name=max_pooling_1d,json=maxPooling1d" json:"max_pooling_1d,omitempty"`
	Flatten              *CMsgSteamLearnModelNodeFlatten              `protobuf:"bytes,33,opt,name=flatten" json:"flatten,omitempty"`
	GlobalMaxPooling     *CMsgSteamLearnModelNodeGlobalMaxPooling1D   `protobuf:"bytes,34,opt,name=global_max_pooling,json=globalMaxPooling" json:"global_max_pooling,omitempty"`
	Transformer          *CMsgSteamLearnModelNodeTransformer          `protobuf:"bytes,35,opt,name=transformer" json:"transformer,omitempty"`
	ExternalEmbedding    *CMsgSteamLearnModelNodeExternalEmbedding    `protobuf:"bytes,36,opt,name=external_embedding,json=externalEmbedding" json:"external_embedding,omitempty"`
	TimeDistributedDense *CMsgSteamLearnModelNodeTimeDistributedDense `protobuf:"bytes,37,opt,name=time_distributed_dense,json=timeDistributedDense" json:"time_distributed_dense,omitempty"`
	SequenceSplit        *CMsgSteamLearnModelNodeSequenceSplit        `protobuf:"bytes,38,opt,name=sequence_split,json=sequenceSplit" json:"sequence_split,omitempty"`
	WeightedAverage      *CMsgSteamLearnModelNodeWeightedAverage      `protobuf:"bytes,39,opt,name=weighted_average,json=weightedAverage" json:"weighted_average,omitempty"`
	GlobalAvgPooling_1D  *CMsgSteamLearnModelNodeGlobalAvgPooling1D   `protobuf:"bytes,40,opt,name=global_avg_pooling_1d,json=globalAvgPooling1d" json:"global_avg_pooling_1d,omitempty"`
	TokenMask            *CMsgSteamLearnModelNodeTokenMask            `protobuf:"bytes,41,opt,name=token_mask,json=tokenMask" json:"token_mask,omitempty"`
	MaskedHead           *CMsgSteamLearnModelNodeMaskedHead           `protobuf:"bytes,42,opt,name=masked_head,json=maskedHead" json:"masked_head,omitempty"`
	TokenTransformer     *CMsgSteamLearnModelNodeTokenTransformer     `protobuf:"bytes,43,opt,name=token_transformer,json=tokenTransformer" json:"token_transformer,omitempty"`
	ExternalModel        *CMsgSteamLearnModelNodeExternalModel        `protobuf:"bytes,44,opt,name=external_model,json=externalModel" json:"external_model,omitempty"`
}

func (x *CMsgSteamLearnProjectNode) Reset() {
	*x = CMsgSteamLearnProjectNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnProjectNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnProjectNode) ProtoMessage() {}

func (x *CMsgSteamLearnProjectNode) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnProjectNode.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnProjectNode) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{143}
}

func (x *CMsgSteamLearnProjectNode) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *CMsgSteamLearnProjectNode) GetLocationX() int32 {
	if x != nil && x.LocationX != nil {
		return *x.LocationX
	}
	return 0
}

func (x *CMsgSteamLearnProjectNode) GetLocationY() int32 {
	if x != nil && x.LocationY != nil {
		return *x.LocationY
	}
	return 0
}

func (x *CMsgSteamLearnProjectNode) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *CMsgSteamLearnProjectNode) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CMsgSteamLearnProjectNode) GetConnectors() []*CMsgSteamLearnProjectNodeConnector {
	if x != nil {
		return x.Connectors
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetInput() *CMsgSteamLearnModelNodeInput {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetDense() *CMsgSteamLearnModelNodeDense {
	if x != nil {
		return x.Dense
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetDenseStack() *CMsgSteamLearnModelNodeDenseStack {
	if x != nil {
		return x.DenseStack
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetDropout() *CMsgSteamLearnModelNodeDropout {
	if x != nil {
		return x.Dropout
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetEmbedding() *CMsgSteamLearnModelNodeEmbedding {
	if x != nil {
		return x.Embedding
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetTrain() *CMsgSteamLearnModelNodeTrain {
	if x != nil {
		return x.Train
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetConditionalExtract() *CMsgSteamLearnModelNodeConditionalExtract {
	if x != nil {
		return x.ConditionalExtract
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetConcatenate() *CMsgSteamLearnModelNodeConcatenate {
	if x != nil {
		return x.Concatenate
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetShuffle() *CMsgSteamLearnModelNodeShuffle {
	if x != nil {
		return x.Shuffle
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetSyncedShuffle() *CMsgSteamLearnModelNodeSyncedShuffle {
	if x != nil {
		return x.SyncedShuffle
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetOnehot() *CMsgSteamLearnModelNodeOnehot {
	if x != nil {
		return x.Onehot
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetExplode() *CMsgSteamLearnModelNodeExplode {
	if x != nil {
		return x.Explode
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetConditionalSwap() *CMsgSteamLearnModelNodeConditionalSwap {
	if x != nil {
		return x.ConditionalSwap
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetKmeans() *CMsgSteamLearnModelNodeKMeansCluster {
	if x != nil {
		return x.Kmeans
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetCombine() *CMsgSteamLearnModelNodeCombine {
	if x != nil {
		return x.Combine
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetTextVectorization() *CMsgSteamLearnModelNodeTextVectorization {
	if x != nil {
		return x.TextVectorization
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetBatchNormalization() *CMsgSteamLearnModelNodeBatchNormalization {
	if x != nil {
		return x.BatchNormalization
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetNormalize() *CMsgSteamLearnModelNodeNormalize {
	if x != nil {
		return x.Normalize
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetNamedInference() *CMsgSteamLearnModelNodeNamedInference {
	if x != nil {
		return x.NamedInference
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetDot() *CMsgSteamLearnModelNodeDot {
	if x != nil {
		return x.Dot
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetExtract() *CMsgSteamLearnModelNodeExtract {
	if x != nil {
		return x.Extract
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetConv_1D() *CMsgSteamLearnModelNodeConv1D {
	if x != nil {
		return x.Conv_1D
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetMaxPooling_1D() *CMsgSteamLearnModelNodeMaxPooling1D {
	if x != nil {
		return x.MaxPooling_1D
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetFlatten() *CMsgSteamLearnModelNodeFlatten {
	if x != nil {
		return x.Flatten
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetGlobalMaxPooling() *CMsgSteamLearnModelNodeGlobalMaxPooling1D {
	if x != nil {
		return x.GlobalMaxPooling
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetTransformer() *CMsgSteamLearnModelNodeTransformer {
	if x != nil {
		return x.Transformer
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetExternalEmbedding() *CMsgSteamLearnModelNodeExternalEmbedding {
	if x != nil {
		return x.ExternalEmbedding
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetTimeDistributedDense() *CMsgSteamLearnModelNodeTimeDistributedDense {
	if x != nil {
		return x.TimeDistributedDense
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetSequenceSplit() *CMsgSteamLearnModelNodeSequenceSplit {
	if x != nil {
		return x.SequenceSplit
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetWeightedAverage() *CMsgSteamLearnModelNodeWeightedAverage {
	if x != nil {
		return x.WeightedAverage
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetGlobalAvgPooling_1D() *CMsgSteamLearnModelNodeGlobalAvgPooling1D {
	if x != nil {
		return x.GlobalAvgPooling_1D
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetTokenMask() *CMsgSteamLearnModelNodeTokenMask {
	if x != nil {
		return x.TokenMask
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetMaskedHead() *CMsgSteamLearnModelNodeMaskedHead {
	if x != nil {
		return x.MaskedHead
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetTokenTransformer() *CMsgSteamLearnModelNodeTokenTransformer {
	if x != nil {
		return x.TokenTransformer
	}
	return nil
}

func (x *CMsgSteamLearnProjectNode) GetExternalModel() *CMsgSteamLearnModelNodeExternalModel {
	if x != nil {
		return x.ExternalModel
	}
	return nil
}

type CMsgSteamLearnProjectNodeConnector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorId        *uint32  `protobuf:"varint,1,opt,name=connector_id,json=connectorId" json:"connector_id,omitempty"`
	LinkedConnectorIds []uint32 `protobuf:"varint,2,rep,name=linked_connector_ids,json=linkedConnectorIds" json:"linked_connector_ids,omitempty"`
	IsInputConnector   *bool    `protobuf:"varint,3,opt,name=is_input_connector,json=isInputConnector" json:"is_input_connector,omitempty"`
}

func (x *CMsgSteamLearnProjectNodeConnector) Reset() {
	*x = CMsgSteamLearnProjectNodeConnector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnProjectNodeConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnProjectNodeConnector) ProtoMessage() {}

func (x *CMsgSteamLearnProjectNodeConnector) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnProjectNodeConnector.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnProjectNodeConnector) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{144}
}

func (x *CMsgSteamLearnProjectNodeConnector) GetConnectorId() uint32 {
	if x != nil && x.ConnectorId != nil {
		return *x.ConnectorId
	}
	return 0
}

func (x *CMsgSteamLearnProjectNodeConnector) GetLinkedConnectorIds() []uint32 {
	if x != nil {
		return x.LinkedConnectorIds
	}
	return nil
}

func (x *CMsgSteamLearnProjectNodeConnector) GetIsInputConnector() bool {
	if x != nil && x.IsInputConnector != nil {
		return *x.IsInputConnector
	}
	return false
}

type CMsgSteamLearnProjectSnapshotConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotType               *int32                                           `protobuf:"varint,1,opt,name=snapshot_type,json=snapshotType" json:"snapshot_type,omitempty"`
	ConfigAccountIds           *CMsgSteamLearnProjectSnapshotConfigAccountIDs   `protobuf:"bytes,2,opt,name=config_account_ids,json=configAccountIds" json:"config_account_ids,omitempty"`
	ConfigAppIds               *CMsgSteamLearnProjectSnapshotConfigAppIDs       `protobuf:"bytes,3,opt,name=config_app_ids,json=configAppIds" json:"config_app_ids,omitempty"`
	ConfigOtherProject         *CMsgSteamLearnProjectSnapshotConfigOtherProject `protobuf:"bytes,4,opt,name=config_other_project,json=configOtherProject" json:"config_other_project,omitempty"`
	SnapshotScheduleType       *int32                                           `protobuf:"varint,5,opt,name=snapshot_schedule_type,json=snapshotScheduleType" json:"snapshot_schedule_type,omitempty"`
	SnapshotScheduleDayOfWeek  *uint32                                          `protobuf:"varint,6,opt,name=snapshot_schedule_day_of_week,json=snapshotScheduleDayOfWeek" json:"snapshot_schedule_day_of_week,omitempty"`
	SnapshotScheduleDayOfMonth *uint32                                          `protobuf:"varint,7,opt,name=snapshot_schedule_day_of_month,json=snapshotScheduleDayOfMonth" json:"snapshot_schedule_day_of_month,omitempty"`
	Compress                   *bool                                            `protobuf:"varint,8,opt,name=compress" json:"compress,omitempty"`
	JobCount                   *uint32                                          `protobuf:"varint,9,opt,name=job_count,json=jobCount" json:"job_count,omitempty"`
	SnapshotScheduleHourOfDay  *uint32                                          `protobuf:"varint,10,opt,name=snapshot_schedule_hour_of_day,json=snapshotScheduleHourOfDay" json:"snapshot_schedule_hour_of_day,omitempty"`
	SnapshotLocation           *int32                                           `protobuf:"varint,11,opt,name=snapshot_location,json=snapshotLocation" json:"snapshot_location,omitempty"`
	ConfigDataSource           *CMsgSteamLearnProjectSnapshotConfigDataSource   `protobuf:"bytes,12,opt,name=config_data_source,json=configDataSource" json:"config_data_source,omitempty"`
}

func (x *CMsgSteamLearnProjectSnapshotConfig) Reset() {
	*x = CMsgSteamLearnProjectSnapshotConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnProjectSnapshotConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnProjectSnapshotConfig) ProtoMessage() {}

func (x *CMsgSteamLearnProjectSnapshotConfig) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnProjectSnapshotConfig.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnProjectSnapshotConfig) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{145}
}

func (x *CMsgSteamLearnProjectSnapshotConfig) GetSnapshotType() int32 {
	if x != nil && x.SnapshotType != nil {
		return *x.SnapshotType
	}
	return 0
}

func (x *CMsgSteamLearnProjectSnapshotConfig) GetConfigAccountIds() *CMsgSteamLearnProjectSnapshotConfigAccountIDs {
	if x != nil {
		return x.ConfigAccountIds
	}
	return nil
}

func (x *CMsgSteamLearnProjectSnapshotConfig) GetConfigAppIds() *CMsgSteamLearnProjectSnapshotConfigAppIDs {
	if x != nil {
		return x.ConfigAppIds
	}
	return nil
}

func (x *CMsgSteamLearnProjectSnapshotConfig) GetConfigOtherProject() *CMsgSteamLearnProjectSnapshotConfigOtherProject {
	if x != nil {
		return x.ConfigOtherProject
	}
	return nil
}

func (x *CMsgSteamLearnProjectSnapshotConfig) GetSnapshotScheduleType() int32 {
	if x != nil && x.SnapshotScheduleType != nil {
		return *x.SnapshotScheduleType
	}
	return 0
}

func (x *CMsgSteamLearnProjectSnapshotConfig) GetSnapshotScheduleDayOfWeek() uint32 {
	if x != nil && x.SnapshotScheduleDayOfWeek != nil {
		return *x.SnapshotScheduleDayOfWeek
	}
	return 0
}

func (x *CMsgSteamLearnProjectSnapshotConfig) GetSnapshotScheduleDayOfMonth() uint32 {
	if x != nil && x.SnapshotScheduleDayOfMonth != nil {
		return *x.SnapshotScheduleDayOfMonth
	}
	return 0
}

func (x *CMsgSteamLearnProjectSnapshotConfig) GetCompress() bool {
	if x != nil && x.Compress != nil {
		return *x.Compress
	}
	return false
}

func (x *CMsgSteamLearnProjectSnapshotConfig) GetJobCount() uint32 {
	if x != nil && x.JobCount != nil {
		return *x.JobCount
	}
	return 0
}

func (x *CMsgSteamLearnProjectSnapshotConfig) GetSnapshotScheduleHourOfDay() uint32 {
	if x != nil && x.SnapshotScheduleHourOfDay != nil {
		return *x.SnapshotScheduleHourOfDay
	}
	return 0
}

func (x *CMsgSteamLearnProjectSnapshotConfig) GetSnapshotLocation() int32 {
	if x != nil && x.SnapshotLocation != nil {
		return *x.SnapshotLocation
	}
	return 0
}

func (x *CMsgSteamLearnProjectSnapshotConfig) GetConfigDataSource() *CMsgSteamLearnProjectSnapshotConfigDataSource {
	if x != nil {
		return x.ConfigDataSource
	}
	return nil
}

type CMsgSteamLearnProjectSnapshotConfigAccountIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percent             *uint32 `protobuf:"varint,1,opt,name=percent" json:"percent,omitempty"`
	ActivityRecencyDays *uint32 `protobuf:"varint,2,opt,name=activity_recency_days,json=activityRecencyDays" json:"activity_recency_days,omitempty"`
	Filter              *int32  `protobuf:"varint,3,opt,name=filter" json:"filter,omitempty"`
}

func (x *CMsgSteamLearnProjectSnapshotConfigAccountIDs) Reset() {
	*x = CMsgSteamLearnProjectSnapshotConfigAccountIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnProjectSnapshotConfigAccountIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnProjectSnapshotConfigAccountIDs) ProtoMessage() {}

func (x *CMsgSteamLearnProjectSnapshotConfigAccountIDs) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnProjectSnapshotConfigAccountIDs.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnProjectSnapshotConfigAccountIDs) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{146}
}

func (x *CMsgSteamLearnProjectSnapshotConfigAccountIDs) GetPercent() uint32 {
	if x != nil && x.Percent != nil {
		return *x.Percent
	}
	return 0
}

func (x *CMsgSteamLearnProjectSnapshotConfigAccountIDs) GetActivityRecencyDays() uint32 {
	if x != nil && x.ActivityRecencyDays != nil {
		return *x.ActivityRecencyDays
	}
	return 0
}

func (x *CMsgSteamLearnProjectSnapshotConfigAccountIDs) GetFilter() int32 {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return 0
}

type CMsgSteamLearnProjectSnapshotConfigAppIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percent            *uint32 `protobuf:"varint,1,opt,name=percent" json:"percent,omitempty"`
	ReleaseRecencyDays *uint32 `protobuf:"varint,2,opt,name=release_recency_days,json=releaseRecencyDays" json:"release_recency_days,omitempty"`
}

func (x *CMsgSteamLearnProjectSnapshotConfigAppIDs) Reset() {
	*x = CMsgSteamLearnProjectSnapshotConfigAppIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnProjectSnapshotConfigAppIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnProjectSnapshotConfigAppIDs) ProtoMessage() {}

func (x *CMsgSteamLearnProjectSnapshotConfigAppIDs) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnProjectSnapshotConfigAppIDs.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnProjectSnapshotConfigAppIDs) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{147}
}

func (x *CMsgSteamLearnProjectSnapshotConfigAppIDs) GetPercent() uint32 {
	if x != nil && x.Percent != nil {
		return *x.Percent
	}
	return 0
}

func (x *CMsgSteamLearnProjectSnapshotConfigAppIDs) GetReleaseRecencyDays() uint32 {
	if x != nil && x.ReleaseRecencyDays != nil {
		return *x.ReleaseRecencyDays
	}
	return 0
}

type CMsgSteamLearnProjectSnapshotConfigDataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSourceId *uint32 `protobuf:"varint,1,opt,name=data_source_id,json=dataSourceId" json:"data_source_id,omitempty"`
}

func (x *CMsgSteamLearnProjectSnapshotConfigDataSource) Reset() {
	*x = CMsgSteamLearnProjectSnapshotConfigDataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnProjectSnapshotConfigDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnProjectSnapshotConfigDataSource) ProtoMessage() {}

func (x *CMsgSteamLearnProjectSnapshotConfigDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnProjectSnapshotConfigDataSource.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnProjectSnapshotConfigDataSource) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{148}
}

func (x *CMsgSteamLearnProjectSnapshotConfigDataSource) GetDataSourceId() uint32 {
	if x != nil && x.DataSourceId != nil {
		return *x.DataSourceId
	}
	return 0
}

type CMsgSteamLearnProjectSnapshotConfigOtherProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        *uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	PublishedVersion *uint32 `protobuf:"varint,2,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
}

func (x *CMsgSteamLearnProjectSnapshotConfigOtherProject) Reset() {
	*x = CMsgSteamLearnProjectSnapshotConfigOtherProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnProjectSnapshotConfigOtherProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnProjectSnapshotConfigOtherProject) ProtoMessage() {}

func (x *CMsgSteamLearnProjectSnapshotConfigOtherProject) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnProjectSnapshotConfigOtherProject.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnProjectSnapshotConfigOtherProject) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{149}
}

func (x *CMsgSteamLearnProjectSnapshotConfigOtherProject) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearnProjectSnapshotConfigOtherProject) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

type CMsgSteamLearnProjectSnapshotFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleReducePercent *uint32                                       `protobuf:"varint,1,opt,name=sample_reduce_percent,json=sampleReducePercent" json:"sample_reduce_percent,omitempty"`
	Histogram           *CMsgSteamLearnProjectSnapshotFilterHistogram `protobuf:"bytes,2,opt,name=histogram" json:"histogram,omitempty"`
}

func (x *CMsgSteamLearnProjectSnapshotFilter) Reset() {
	*x = CMsgSteamLearnProjectSnapshotFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnProjectSnapshotFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnProjectSnapshotFilter) ProtoMessage() {}

func (x *CMsgSteamLearnProjectSnapshotFilter) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnProjectSnapshotFilter.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnProjectSnapshotFilter) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{150}
}

func (x *CMsgSteamLearnProjectSnapshotFilter) GetSampleReducePercent() uint32 {
	if x != nil && x.SampleReducePercent != nil {
		return *x.SampleReducePercent
	}
	return 0
}

func (x *CMsgSteamLearnProjectSnapshotFilter) GetHistogram() *CMsgSteamLearnProjectSnapshotFilterHistogram {
	if x != nil {
		return x.Histogram
	}
	return nil
}

type CMsgSteamLearnProjectSnapshotFilterHistogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataElementPath *string  `protobuf:"bytes,1,opt,name=data_element_path,json=dataElementPath" json:"data_element_path,omitempty"`
	MinValue        *float32 `protobuf:"fixed32,2,opt,name=min_value,json=minValue" json:"min_value,omitempty"`
	MaxValue        *float32 `protobuf:"fixed32,3,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	NumBuckets      *uint32  `protobuf:"varint,4,opt,name=num_buckets,json=numBuckets" json:"num_buckets,omitempty"`
}

func (x *CMsgSteamLearnProjectSnapshotFilterHistogram) Reset() {
	*x = CMsgSteamLearnProjectSnapshotFilterHistogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnProjectSnapshotFilterHistogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnProjectSnapshotFilterHistogram) ProtoMessage() {}

func (x *CMsgSteamLearnProjectSnapshotFilterHistogram) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnProjectSnapshotFilterHistogram.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnProjectSnapshotFilterHistogram) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{151}
}

func (x *CMsgSteamLearnProjectSnapshotFilterHistogram) GetDataElementPath() string {
	if x != nil && x.DataElementPath != nil {
		return *x.DataElementPath
	}
	return ""
}

func (x *CMsgSteamLearnProjectSnapshotFilterHistogram) GetMinValue() float32 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *CMsgSteamLearnProjectSnapshotFilterHistogram) GetMaxValue() float32 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

func (x *CMsgSteamLearnProjectSnapshotFilterHistogram) GetNumBuckets() uint32 {
	if x != nil && x.NumBuckets != nil {
		return *x.NumBuckets
	}
	return 0
}

type CMsgSteamLearnRawDataElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloatValue  *float32 `protobuf:"fixed32,1,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	StringValue *string  `protobuf:"bytes,2,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
}

func (x *CMsgSteamLearnRawDataElement) Reset() {
	*x = CMsgSteamLearnRawDataElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnRawDataElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnRawDataElement) ProtoMessage() {}

func (x *CMsgSteamLearnRawDataElement) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnRawDataElement.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnRawDataElement) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{152}
}

func (x *CMsgSteamLearnRawDataElement) GetFloatValue() float32 {
	if x != nil && x.FloatValue != nil {
		return *x.FloatValue
	}
	return 0
}

func (x *CMsgSteamLearnRawDataElement) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

type CMsgSteamLearnScheduledTrainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledType                 *int32   `protobuf:"varint,1,opt,name=scheduled_type,json=scheduledType" json:"scheduled_type,omitempty"`
	ScheduledMinute               *uint32  `protobuf:"varint,2,opt,name=scheduled_minute,json=scheduledMinute" json:"scheduled_minute,omitempty"`
	ScheduledHour                 *uint32  `protobuf:"varint,3,opt,name=scheduled_hour,json=scheduledHour" json:"scheduled_hour,omitempty"`
	ScheduledDayOfWeek            *uint32  `protobuf:"varint,4,opt,name=scheduled_day_of_week,json=scheduledDayOfWeek" json:"scheduled_day_of_week,omitempty"`
	ScheduledDayOfMonth           *uint32  `protobuf:"varint,5,opt,name=scheduled_day_of_month,json=scheduledDayOfMonth" json:"scheduled_day_of_month,omitempty"`
	AutoActivateAccuracyThreshold *float32 `protobuf:"fixed32,6,opt,name=auto_activate_accuracy_threshold,json=autoActivateAccuracyThreshold" json:"auto_activate_accuracy_threshold,omitempty"`
}

func (x *CMsgSteamLearnScheduledTrainConfig) Reset() {
	*x = CMsgSteamLearnScheduledTrainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnScheduledTrainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnScheduledTrainConfig) ProtoMessage() {}

func (x *CMsgSteamLearnScheduledTrainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnScheduledTrainConfig.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnScheduledTrainConfig) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{153}
}

func (x *CMsgSteamLearnScheduledTrainConfig) GetScheduledType() int32 {
	if x != nil && x.ScheduledType != nil {
		return *x.ScheduledType
	}
	return 0
}

func (x *CMsgSteamLearnScheduledTrainConfig) GetScheduledMinute() uint32 {
	if x != nil && x.ScheduledMinute != nil {
		return *x.ScheduledMinute
	}
	return 0
}

func (x *CMsgSteamLearnScheduledTrainConfig) GetScheduledHour() uint32 {
	if x != nil && x.ScheduledHour != nil {
		return *x.ScheduledHour
	}
	return 0
}

func (x *CMsgSteamLearnScheduledTrainConfig) GetScheduledDayOfWeek() uint32 {
	if x != nil && x.ScheduledDayOfWeek != nil {
		return *x.ScheduledDayOfWeek
	}
	return 0
}

func (x *CMsgSteamLearnScheduledTrainConfig) GetScheduledDayOfMonth() uint32 {
	if x != nil && x.ScheduledDayOfMonth != nil {
		return *x.ScheduledDayOfMonth
	}
	return 0
}

func (x *CMsgSteamLearnScheduledTrainConfig) GetAutoActivateAccuracyThreshold() float32 {
	if x != nil && x.AutoActivateAccuracyThreshold != nil {
		return *x.AutoActivateAccuracyThreshold
	}
	return 0
}

type CMsgSteamLearnSnapshotStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapStorageElements []*CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry `protobuf:"bytes,1,rep,name=map_storage_elements,json=mapStorageElements" json:"map_storage_elements,omitempty"`
}

func (x *CMsgSteamLearnSnapshotStorage) Reset() {
	*x = CMsgSteamLearnSnapshotStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnSnapshotStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnSnapshotStorage) ProtoMessage() {}

func (x *CMsgSteamLearnSnapshotStorage) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnSnapshotStorage.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnSnapshotStorage) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{154}
}

func (x *CMsgSteamLearnSnapshotStorage) GetMapStorageElements() []*CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry {
	if x != nil {
		return x.MapStorageElements
	}
	return nil
}

type CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *uint32                                       `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	Value *CMsgSteamLearnSnapshotStorage_StorageElement `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry) Reset() {
	*x = CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry) ProtoMessage() {}

func (x *CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{155}
}

func (x *CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry) GetValue() *CMsgSteamLearnSnapshotStorage_StorageElement {
	if x != nil {
		return x.Value
	}
	return nil
}

type CMsgSteamLearnSnapshotStorage_StorageElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloatValue  *float32 `protobuf:"fixed32,1,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	StringValue *string  `protobuf:"bytes,2,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
}

func (x *CMsgSteamLearnSnapshotStorage_StorageElement) Reset() {
	*x = CMsgSteamLearnSnapshotStorage_StorageElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnSnapshotStorage_StorageElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnSnapshotStorage_StorageElement) ProtoMessage() {}

func (x *CMsgSteamLearnSnapshotStorage_StorageElement) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnSnapshotStorage_StorageElement.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnSnapshotStorage_StorageElement) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{156}
}

func (x *CMsgSteamLearnSnapshotStorage_StorageElement) GetFloatValue() float32 {
	if x != nil && x.FloatValue != nil {
		return *x.FloatValue
	}
	return 0
}

func (x *CMsgSteamLearnSnapshotStorage_StorageElement) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

type CMsgSteamLearnTrainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FetchWorkers                     *uint32  `protobuf:"varint,1,opt,name=fetch_workers,json=fetchWorkers" json:"fetch_workers,omitempty"`
	FetchChunkSize                   *uint32  `protobuf:"varint,2,opt,name=fetch_chunk_size,json=fetchChunkSize" json:"fetch_chunk_size,omitempty"`
	TrainBatchSize                   *uint32  `protobuf:"varint,3,opt,name=train_batch_size,json=trainBatchSize" json:"train_batch_size,omitempty"`
	TrainEpochCount                  *uint32  `protobuf:"varint,4,opt,name=train_epoch_count,json=trainEpochCount" json:"train_epoch_count,omitempty"`
	TrainLossImprovementThreshold    *float32 `protobuf:"fixed32,5,opt,name=train_loss_improvement_threshold,json=trainLossImprovementThreshold" json:"train_loss_improvement_threshold,omitempty"`
	TrainNoLossImprovementEpochLimit *uint32  `protobuf:"varint,6,opt,name=train_no_loss_improvement_epoch_limit,json=trainNoLossImprovementEpochLimit" json:"train_no_loss_improvement_epoch_limit,omitempty"`
	TrainOptimizer                   *int32   `protobuf:"varint,7,opt,name=train_optimizer,json=trainOptimizer" json:"train_optimizer,omitempty"`
	TrainLearningRate                *float32 `protobuf:"fixed32,8,opt,name=train_learning_rate,json=trainLearningRate" json:"train_learning_rate,omitempty"`
	TrainGpu                         *int32   `protobuf:"varint,9,opt,name=train_gpu,json=trainGpu" json:"train_gpu,omitempty"`
	GpuCount                         *uint32  `protobuf:"varint,10,opt,name=gpu_count,json=gpuCount" json:"gpu_count,omitempty"`
	MixedPrecision                   *bool    `protobuf:"varint,11,opt,name=mixed_precision,json=mixedPrecision" json:"mixed_precision,omitempty"`
	SnapshotLocation                 *int32   `protobuf:"varint,12,opt,name=snapshot_location,json=snapshotLocation" json:"snapshot_location,omitempty"`
	TrainWeightDecay                 *float32 `protobuf:"fixed32,13,opt,name=train_weight_decay,json=trainWeightDecay" json:"train_weight_decay,omitempty"`
	TrainClipNorm                    *float32 `protobuf:"fixed32,14,opt,name=train_clip_norm,json=trainClipNorm" json:"train_clip_norm,omitempty"`
	UseClassWeights                  *bool    `protobuf:"varint,15,opt,name=use_class_weights,json=useClassWeights" json:"use_class_weights,omitempty"`
	TrainWarmupSteps                 *uint32  `protobuf:"varint,16,opt,name=train_warmup_steps,json=trainWarmupSteps" json:"train_warmup_steps,omitempty"`
	TrainWarmupStart                 *float32 `protobuf:"fixed32,17,opt,name=train_warmup_start,json=trainWarmupStart" json:"train_warmup_start,omitempty"`
	TrainDecaySteps                  *int32   `protobuf:"varint,18,opt,name=train_decay_steps,json=trainDecaySteps" json:"train_decay_steps,omitempty"`
	TrainDecayRate                   *float32 `protobuf:"fixed32,19,opt,name=train_decay_rate,json=trainDecayRate" json:"train_decay_rate,omitempty"`
}

func (x *CMsgSteamLearnTrainConfig) Reset() {
	*x = CMsgSteamLearnTrainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnTrainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnTrainConfig) ProtoMessage() {}

func (x *CMsgSteamLearnTrainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnTrainConfig.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnTrainConfig) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{157}
}

func (x *CMsgSteamLearnTrainConfig) GetFetchWorkers() uint32 {
	if x != nil && x.FetchWorkers != nil {
		return *x.FetchWorkers
	}
	return 0
}

func (x *CMsgSteamLearnTrainConfig) GetFetchChunkSize() uint32 {
	if x != nil && x.FetchChunkSize != nil {
		return *x.FetchChunkSize
	}
	return 0
}

func (x *CMsgSteamLearnTrainConfig) GetTrainBatchSize() uint32 {
	if x != nil && x.TrainBatchSize != nil {
		return *x.TrainBatchSize
	}
	return 0
}

func (x *CMsgSteamLearnTrainConfig) GetTrainEpochCount() uint32 {
	if x != nil && x.TrainEpochCount != nil {
		return *x.TrainEpochCount
	}
	return 0
}

func (x *CMsgSteamLearnTrainConfig) GetTrainLossImprovementThreshold() float32 {
	if x != nil && x.TrainLossImprovementThreshold != nil {
		return *x.TrainLossImprovementThreshold
	}
	return 0
}

func (x *CMsgSteamLearnTrainConfig) GetTrainNoLossImprovementEpochLimit() uint32 {
	if x != nil && x.TrainNoLossImprovementEpochLimit != nil {
		return *x.TrainNoLossImprovementEpochLimit
	}
	return 0
}

func (x *CMsgSteamLearnTrainConfig) GetTrainOptimizer() int32 {
	if x != nil && x.TrainOptimizer != nil {
		return *x.TrainOptimizer
	}
	return 0
}

func (x *CMsgSteamLearnTrainConfig) GetTrainLearningRate() float32 {
	if x != nil && x.TrainLearningRate != nil {
		return *x.TrainLearningRate
	}
	return 0
}

func (x *CMsgSteamLearnTrainConfig) GetTrainGpu() int32 {
	if x != nil && x.TrainGpu != nil {
		return *x.TrainGpu
	}
	return 0
}

func (x *CMsgSteamLearnTrainConfig) GetGpuCount() uint32 {
	if x != nil && x.GpuCount != nil {
		return *x.GpuCount
	}
	return 0
}

func (x *CMsgSteamLearnTrainConfig) GetMixedPrecision() bool {
	if x != nil && x.MixedPrecision != nil {
		return *x.MixedPrecision
	}
	return false
}

func (x *CMsgSteamLearnTrainConfig) GetSnapshotLocation() int32 {
	if x != nil && x.SnapshotLocation != nil {
		return *x.SnapshotLocation
	}
	return 0
}

func (x *CMsgSteamLearnTrainConfig) GetTrainWeightDecay() float32 {
	if x != nil && x.TrainWeightDecay != nil {
		return *x.TrainWeightDecay
	}
	return 0
}

func (x *CMsgSteamLearnTrainConfig) GetTrainClipNorm() float32 {
	if x != nil && x.TrainClipNorm != nil {
		return *x.TrainClipNorm
	}
	return 0
}

func (x *CMsgSteamLearnTrainConfig) GetUseClassWeights() bool {
	if x != nil && x.UseClassWeights != nil {
		return *x.UseClassWeights
	}
	return false
}

func (x *CMsgSteamLearnTrainConfig) GetTrainWarmupSteps() uint32 {
	if x != nil && x.TrainWarmupSteps != nil {
		return *x.TrainWarmupSteps
	}
	return 0
}

func (x *CMsgSteamLearnTrainConfig) GetTrainWarmupStart() float32 {
	if x != nil && x.TrainWarmupStart != nil {
		return *x.TrainWarmupStart
	}
	return 0
}

func (x *CMsgSteamLearnTrainConfig) GetTrainDecaySteps() int32 {
	if x != nil && x.TrainDecaySteps != nil {
		return *x.TrainDecaySteps
	}
	return 0
}

func (x *CMsgSteamLearnTrainConfig) GetTrainDecayRate() float32 {
	if x != nil && x.TrainDecayRate != nil {
		return *x.TrainDecayRate
	}
	return 0
}

type CMsgSteamLearnTrainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FetchId             *uint32 `protobuf:"varint,1,opt,name=fetch_id,json=fetchId" json:"fetch_id,omitempty"`
	TrainId             *uint32 `protobuf:"varint,2,opt,name=train_id,json=trainId" json:"train_id,omitempty"`
	ScheduledTrain      *bool   `protobuf:"varint,3,opt,name=scheduled_train,json=scheduledTrain" json:"scheduled_train,omitempty"`
	AutoSnapshotPending *bool   `protobuf:"varint,4,opt,name=auto_snapshot_pending,json=autoSnapshotPending" json:"auto_snapshot_pending,omitempty"`
}

func (x *CMsgSteamLearnTrainInfo) Reset() {
	*x = CMsgSteamLearnTrainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_steamlearn_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnTrainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnTrainInfo) ProtoMessage() {}

func (x *CMsgSteamLearnTrainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamlearn_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnTrainInfo.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnTrainInfo) Descriptor() ([]byte, []int) {
	return file_service_steamlearn_proto_rawDescGZIP(), []int{158}
}

func (x *CMsgSteamLearnTrainInfo) GetFetchId() uint32 {
	if x != nil && x.FetchId != nil {
		return *x.FetchId
	}
	return 0
}

func (x *CMsgSteamLearnTrainInfo) GetTrainId() uint32 {
	if x != nil && x.TrainId != nil {
		return *x.TrainId
	}
	return 0
}

func (x *CMsgSteamLearnTrainInfo) GetScheduledTrain() bool {
	if x != nil && x.ScheduledTrain != nil {
		return *x.ScheduledTrain
	}
	return false
}

func (x *CMsgSteamLearnTrainInfo) GetAutoSnapshotPending() bool {
	if x != nil && x.AutoSnapshotPending != nil {
		return *x.AutoSnapshotPending
	}
	return false
}

var File_service_steamlearn_proto protoreflect.FileDescriptor

var file_service_steamlearn_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x02,
	0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x13, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x11, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x50, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x11, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x22, 0xac, 0x02, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a,
	0x14, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x12, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x13,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x12, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x22, 0x6e, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x59, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x11, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x0f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x7a, 0x0a, 0x24,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x45, 0x64, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x23, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x45, 0x64,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x3e, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4d, 0x0a, 0x0e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x4d, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xf0,
	0x01, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18,
	0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a,
	0x0f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12,
	0x50, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x22, 0x4c, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x63, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x22, 0xb0, 0x01, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x60, 0x0a, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xaf, 0x01, 0x0a, 0x38, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x0f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x61, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0xc1, 0x04, 0x0a, 0x26, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x6f, 0x77, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4c,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc4, 0x01, 0x0a,
	0x2f, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x47, 0x65, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2f, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e,
	0x75, 0x6d, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f, 0x77,
	0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x6f,
	0x77, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x7b, 0x0a, 0x2d, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xda, 0x02, 0x0a, 0x2a,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6f, 0x63,
	0x75, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x2b, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e,
	0x75, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x63, 0x0a, 0x0f, 0x6e, 0x65,
	0x61, 0x72, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x4e, 0x65, 0x61, 0x72, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x0e, 0x6e, 0x65, 0x61, 0x72, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x98, 0x01, 0x0a, 0x39, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x4e, 0x65, 0x61, 0x72, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0f, 0x65, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x21, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x56,
	0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x16, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdc, 0x04, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x11,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x13, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d,
	0x52, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4b, 0x65,
	0x79, 0x4d, 0x61, 0x78, 0x22, 0x7a, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x22, 0xa8, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x70, 0x75, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x70, 0x75, 0x4c, 0x6f, 0x67, 0x22, 0x61, 0x0a, 0x25, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xfd,
	0x05, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x52, 0x06, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x6c, 0x6f, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74,
	0x4c, 0x6f, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x76, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x94,
	0x01, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c,
	0x6f, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x31, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x07, 0x66, 0x31, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x22, 0xe5, 0x04, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x4c,
	0x6f, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x15, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x52, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x58, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x31, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x02, 0x52, 0x14, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x46, 0x31, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x14,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x31, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x02, 0x52, 0x11, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x46, 0x31, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x7b, 0x0a,
	0x2d, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd0, 0x02, 0x0a, 0x20, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0e,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x61, 0x6d,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x21,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x10, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18,
	0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x22, 0x97, 0x02, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x76, 0x0a, 0x28, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x22, 0x59, 0x0a, 0x41, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70,
	0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd1, 0x01,
	0x0a, 0x46, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x6f,
	0x70, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0xd1, 0x01, 0x0a, 0x46, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x4d,
	0x75, 0x74, 0x6c, 0x69, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x8d, 0x04, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x73, 0x0a, 0x13, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x6f, 0x70, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x12, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x12, 0x82,
	0x01, 0x0a, 0x18, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x6f, 0x70, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x17, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x72,
	0x6f, 0x70, 0x79, 0x12, 0x83, 0x01, 0x0a, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x4d, 0x75, 0x74, 0x6c, 0x69, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x52, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x12, 0x5a, 0x0a, 0x0a, 0x72, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x39, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a, 0x31, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xaa, 0x06, 0x0a, 0x29,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x19, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5,
	0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x17, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x50, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x52,
	0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x48, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x08, 0x73,
	0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76,
	0x52, 0x07, 0x73, 0x74, 0x64, 0x44, 0x65, 0x76, 0x73, 0x12, 0x5e, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x06, 0x6b, 0x6d, 0x65,
	0x61, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x4b, 0x4d, 0x65, 0x61, 0x6e, 0x73, 0x52, 0x06, 0x6b, 0x6d,
	0x65, 0x61, 0x6e, 0x73, 0x12, 0x6b, 0x0a, 0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x11,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x12, 0x52, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x61, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xac, 0x02, 0x0a, 0x31, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x64,
	0x65, 0x6e, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x44, 0x65, 0x6e, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x57, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x61, 0x63, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69,
	0x6e, 0x75, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x69, 0x6f,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x64, 0x75,
	0x6c, 0x74, 0x56, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64,
	0x75, 0x6c, 0x74, 0x5f, 0x73, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61,
	0x64, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x78, 0x22, 0x94, 0x01, 0x0a, 0x36, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc1,
	0x02, 0x0a, 0x36, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a,
	0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x46, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x4d, 0x61, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x3c, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x47, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xae, 0x01, 0x0a,
	0x45, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9d, 0x01,
	0x0a, 0x30, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x4b, 0x4d, 0x65, 0x61,
	0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x4b, 0x4d, 0x65, 0x61, 0x6e, 0x73, 0x5f, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xd7, 0x01,
	0x0a, 0x38, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x4b, 0x4d, 0x65, 0x61,
	0x6e, 0x73, 0x5f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x37, 0x35, 0x70, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x37, 0x35, 0x70, 0x63,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x35, 0x30, 0x70, 0x63,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x35,
	0x30, 0x70, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x32,
	0x35, 0x70, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x32, 0x35, 0x70, 0x63, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x66, 0x0a, 0x32, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x52,
	0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x72,
	0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x52, 0x6f, 0x77,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x22, 0xc4, 0x02, 0x0a, 0x37, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x0a, 0x6d, 0x61, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x6c, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x7f, 0x0a, 0x3d, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x72, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x72, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xb2, 0x01, 0x0a, 0x48, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x4d, 0x61,
	0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x46, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x3b, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x30, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12, 0x2a,
	0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x73, 0x74, 0x64, 0x44, 0x65, 0x76, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x67, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x23, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x22, 0xd7, 0x03, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x4c, 0x6f, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x44,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x45,
	0x6e, 0x64, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x4c, 0x6f,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x76,
	0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x0c, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xba, 0x01,
	0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6b, 0x65, 0x79, 0x45, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x22, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x4c, 0x6f,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x65,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x31, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x66, 0x31, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x5c, 0x0a, 0x24, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x4c, 0x6f, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22,
	0x7e, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6e,
	0x65, 0x77, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x65, 0x77, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x8a, 0x01, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x8a, 0x01, 0x0a,
	0x2a, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18,
	0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x23, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x53, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22,
	0x48, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75,
	0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x26, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a,
	0x27, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x1c,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x39, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x39, 0x0a, 0x05,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x52, 0x05, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x22, 0x66, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x22,
	0x8f, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x22, 0x41, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xb8, 0x03, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x21, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x69, 0x0a,
	0x18, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x15, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x7b, 0x0a, 0x1e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x1b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x68, 0x0a, 0x17, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x15, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22,
	0x7a, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x73, 0x0a, 0x2f, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x79, 0x0a, 0x35, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x12,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x3a, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x08,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x42, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x41, 0x0a, 0x16,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x52, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4b, 0x65, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x65, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x85, 0x03, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x09,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x72, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x72, 0x63, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x42,
	0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x23, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x66, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x91, 0x06, 0x0a, 0x24, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x37, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x11, 0x70, 0x72, 0x65,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x64, 0x5f,
	0x64, 0x65, 0x76, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x74, 0x64, 0x44, 0x65,
	0x76, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x3a, 0x0a, 0x19, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x17, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x10,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x17,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x22, 0x2b, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x20, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x22, 0x38, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x78, 0x69, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x78, 0x69, 0x73, 0x22, 0xac, 0x03, 0x0a, 0x29,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x13, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d,
	0x52, 0x11, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x11, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a,
	0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x56, 0x0a, 0x0b, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x34, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x70, 0x70, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x69, 0x64, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x61, 0x70, 0x70, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x69, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x61, 0x70, 0x70, 0x69, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x54, 0x61, 0x67, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x69, 0x64, 0x5f, 0x74,
	0x68, 0x65, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x54, 0x61, 0x67,
	0x49, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x34, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x1a, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x17, 0x61, 0x70, 0x70, 0x69, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x63, 0x79, 0x42, 0x69, 0x61, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x77, 0x61, 0x70, 0x22, 0x9e, 0x01, 0x0a,
	0x1d, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x31, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75,
	0x6d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01,
	0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x30,
	0x0a, 0x0e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d,
	0x52, 0x0e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xb6, 0x01, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04,
	0x65, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x75,
	0x74, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x72, 0x6f,
	0x70, 0x6f, 0x75, 0x74, 0x50, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x1a, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x22, 0x41, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x44, 0x72, 0x6f, 0x70, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x6f,
	0x75, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x72,
	0x6f, 0x70, 0x6f, 0x75, 0x74, 0x50, 0x63, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x64, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x61,
	0x6d, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x22, 0xb1, 0x04, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04,
	0x65, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82,
	0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e,
	0x75, 0x6d, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x62, 0x69, 0x61, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x69, 0x61, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x62, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x42,
	0x69, 0x61, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x42, 0x69, 0x61, 0x73, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x36,
	0x0a, 0x17, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x63, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x46, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x22, 0x2b, 0x0a, 0x29, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x76, 0x67, 0x50, 0x6f, 0x6f,
	0x6c, 0x69, 0x6e, 0x67, 0x31, 0x44, 0x22, 0x2b, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x69, 0x6e,
	0x67, 0x31, 0x44, 0x22, 0x3b, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x75, 0x6d,
	0x22, 0x8a, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x4d, 0x65, 0x61,
	0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x23, 0x0a,
	0x21, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x22, 0x5c, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x78,
	0x50, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x31, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f,
	0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x22, 0x62, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x22, 0x77, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x4f, 0x6e, 0x65, 0x68, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x68, 0x6f,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x6f,
	0x74, 0x22, 0x86, 0x02, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x65,
	0x61, 0x64, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x64, 0x5f, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6d, 0x69, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61, 0x69,
	0x6c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x1e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5a, 0x65, 0x72,
	0x6f, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x65, 0x64, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5a, 0x65, 0x72, 0x6f,
	0x65, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82,
	0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x1e, 0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08,
	0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6e, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04,
	0x65, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0xa1, 0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x73, 0x6b, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d,
	0x61, 0x73, 0x6b, 0x50, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6d, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x63, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x50, 0x63, 0x74, 0x22, 0x86, 0x03, 0x0a, 0x27, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x44, 0x69, 0x6d, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x48, 0x65, 0x61, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x44, 0x72, 0x6f, 0x70, 0x6f, 0x75, 0x74, 0x50, 0x63, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x91, 0x02, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x6c, 0x6f,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e,
	0x75, 0x6d, 0x52, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x73, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xef, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x66,
	0x65, 0x65, 0x64, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x64, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x75,
	0x74, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x72, 0x6f,
	0x70, 0x6f, 0x75, 0x74, 0x50, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x26, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x78, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x61, 0x78, 0x69, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0xf1, 0x02, 0x0a, 0x15, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11,
	0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x49, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x84, 0x08, 0x0a,
	0x1b, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x62, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x17,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x77, 0x0a, 0x1b, 0x6d, 0x61, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x6d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x15, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x59, 0x0a, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a,
	0x0b, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x62, 0x0a, 0x38, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbc, 0x15, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x33,
	0x0a, 0x05, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x64, 0x65,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0a, 0x64, 0x65,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70,
	0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70,
	0x6f, 0x75, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x52, 0x05, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x5b, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x6e, 0x61, 0x74, 0x65,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a,
	0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x52,
	0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x5f, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64,
	0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x53,
	0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x6f, 0x6e, 0x65, 0x68, 0x6f, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x4f, 0x6e, 0x65, 0x68, 0x6f, 0x74, 0x52, 0x06, 0x6f, 0x6e, 0x65, 0x68, 0x6f, 0x74, 0x12, 0x39,
	0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x77, 0x61, 0x70, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x77, 0x61, 0x70, 0x12, 0x3d, 0x0a,
	0x06, 0x6b, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x4d, 0x65, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x06, 0x6b, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x12, 0x58, 0x0a, 0x12, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x74, 0x65, 0x78, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5b, 0x0a, 0x13, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x52, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12,
	0x4f, 0x0a, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x2d, 0x0a, 0x03, 0x64, 0x6f, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x6f, 0x74, 0x52, 0x03, 0x64, 0x6f, 0x74, 0x12,
	0x39, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x07, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x76, 0x5f, 0x31, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x31, 0x44, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x76, 0x31, 0x64, 0x12, 0x4a, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x31, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x31,
	0x44, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x31, 0x64, 0x12,
	0x39, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6c, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x58, 0x0a, 0x12, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67,
	0x31, 0x44, 0x52, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x6f,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x12, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x62, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x52, 0x0a, 0x10, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x15, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x31, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x76, 0x67, 0x50, 0x6f, 0x6f,
	0x6c, 0x69, 0x6e, 0x67, 0x31, 0x44, 0x52, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x76,
	0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x31, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x43, 0x0a, 0x0b,
	0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x65,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x48, 0x65, 0x61,
	0x64, 0x12, 0x55, 0x0a, 0x11, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0xa7, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0xbe, 0x06, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x41, 0x70, 0x70, 0x49, 0x44, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x41, 0x70, 0x70, 0x49, 0x64, 0x73, 0x12, 0x62, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x16, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18,
	0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x14, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x19, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x42, 0x0a,
	0x1e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6a, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x12, 0x35, 0x0a, 0x11,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75,
	0x6d, 0x52, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x9f, 0x01, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x77, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x70, 0x70, 0x49, 0x44, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x61, 0x79, 0x73, 0x22, 0x55, 0x0a, 0x2d,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x4b,
	0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0xb5, 0x01, 0x0a, 0x2c,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x11,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x22, 0x62, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd8, 0x02, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f,
	0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d,
	0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x48, 0x6f, 0x75,
	0x72, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x79, 0x4f, 0x66,
	0x57, 0x65, 0x65, 0x6b, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44,
	0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x47, 0x0a, 0x20, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x68, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6d, 0x61, 0x70, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8e,
	0x01, 0x0a, 0x35, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x72, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x95, 0x07, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x65, 0x74, 0x63, 0x68, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f,
	0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x49, 0x6d, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x4f, 0x0a, 0x25, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x6f, 0x73, 0x73,
	0x5f, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x4c, 0x6f, 0x73, 0x73, 0x49, 0x6d, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x31, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x11, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x67, 0x70, 0x75,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d,
	0x52, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x47, 0x70, 0x75, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x70,
	0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67,
	0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x78, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18,
	0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x44, 0x65, 0x63, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x63,
	0x6c, 0x69, 0x70, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x70, 0x4e, 0x6f, 0x72, 0x6d, 0x12, 0x2a, 0x0a,
	0x11, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x57, 0x61, 0x72, 0x6d,
	0x75, 0x70, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x5f, 0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x57, 0x61, 0x72, 0x6d, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x64,
	0x65, 0x63, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x63, 0x61, 0x79, 0x53, 0x74, 0x65, 0x70,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x44, 0x65, 0x63, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x17,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x32, 0x92, 0x15, 0x0a, 0x0a, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x12, 0x61, 0x0a, 0x0e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5e, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x25, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x0b, 0x45, 0x64, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x45, 0x64, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x45, 0x64, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x57, 0x65, 0x62,
	0x12, 0x27, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x2a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x47, 0x65, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47,
	0x65, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x61,
	0x72, 0x65, 0x73, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x47, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x24, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x10, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x28,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x11, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x64, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x27, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x26, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x4c, 0x69, 0x76, 0x65, 0x12, 0x24, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x69,
	0x76, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x53, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x64, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x12, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
}

var (
	file_service_steamlearn_proto_rawDescOnce sync.Once
	file_service_steamlearn_proto_rawDescData = file_service_steamlearn_proto_rawDesc
)

func file_service_steamlearn_proto_rawDescGZIP() []byte {
	file_service_steamlearn_proto_rawDescOnce.Do(func() {
		file_service_steamlearn_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_steamlearn_proto_rawDescData)
	})
	return file_service_steamlearn_proto_rawDescData
}

var file_service_steamlearn_proto_msgTypes = make([]protoimpl.MessageInfo, 159)
var file_service_steamlearn_proto_goTypes = []any{
	(*CMsgSteamLearn_BatchOperation_Request)(nil),                                    // 0: CMsgSteamLearn_BatchOperation_Request
	(*CMsgSteamLearn_BatchOperation_Response)(nil),                                   // 1: CMsgSteamLearn_BatchOperation_Response
	(*CMsgSteamLearn_CacheData_Request)(nil),                                         // 2: CMsgSteamLearn_CacheData_Request
	(*CMsgSteamLearn_CacheData_Response)(nil),                                        // 3: CMsgSteamLearn_CacheData_Response
	(*CMsgSteamLearn_CreateProject_Request)(nil),                                     // 4: CMsgSteamLearn_CreateProject_Request
	(*CMsgSteamLearn_CreateProject_Response)(nil),                                    // 5: CMsgSteamLearn_CreateProject_Response
	(*CMsgSteamLearn_EditProject_Request)(nil),                                       // 6: CMsgSteamLearn_EditProject_Request
	(*CMsgSteamLearn_EditProject_Response)(nil),                                      // 7: CMsgSteamLearn_EditProject_Response
	(*CMsgSteamLearn_GetAccessTokens_Request)(nil),                                   // 8: CMsgSteamLearn_GetAccessTokens_Request
	(*CMsgSteamLearn_GetAccessTokens_Response)(nil),                                  // 9: CMsgSteamLearn_GetAccessTokens_Response
	(*CMsgSteamLearn_GetBatchedStatus_Request)(nil),                                  // 10: CMsgSteamLearn_GetBatchedStatus_Request
	(*CMsgSteamLearn_GetBatchedStatus_Response)(nil),                                 // 11: CMsgSteamLearn_GetBatchedStatus_Response
	(*CMsgSteamLearn_GetDataSource_Request)(nil),                                     // 12: CMsgSteamLearn_GetDataSource_Request
	(*CMsgSteamLearn_GetDataSource_Response)(nil),                                    // 13: CMsgSteamLearn_GetDataSource_Response
	(*CMsgSteamLearn_GetEmbeddingValues_Request)(nil),                                // 14: CMsgSteamLearn_GetEmbeddingValues_Request
	(*CMsgSteamLearn_GetEmbeddingValues_Response)(nil),                               // 15: CMsgSteamLearn_GetEmbeddingValues_Response
	(*CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData)(nil),                 // 16: CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData
	(*CMsgSteamLearn_GetFetchStatus_Request)(nil),                                    // 17: CMsgSteamLearn_GetFetchStatus_Request
	(*CMsgSteamLearn_GetFetchStatus_Response)(nil),                                   // 18: CMsgSteamLearn_GetFetchStatus_Response
	(*CMsgSteamLearn_GetFetchStatus_Response_Metadata)(nil),                          // 19: CMsgSteamLearn_GetFetchStatus_Response_Metadata
	(*CMsgSteamLearn_GetFetchStatus_Response_Worker)(nil),                            // 20: CMsgSteamLearn_GetFetchStatus_Response_Worker
	(*CMsgSteamLearn_GetFetchStatusVersions_Request)(nil),                            // 21: CMsgSteamLearn_GetFetchStatusVersions_Request
	(*CMsgSteamLearn_GetFetchStatusVersions_Response)(nil),                           // 22: CMsgSteamLearn_GetFetchStatusVersions_Response
	(*CMsgSteamLearn_GetLogEvents_Request)(nil),                                      // 23: CMsgSteamLearn_GetLogEvents_Request
	(*CMsgSteamLearn_GetLogEvents_Response)(nil),                                     // 24: CMsgSteamLearn_GetLogEvents_Response
	(*CMsgSteamLearn_GetNearestEmbedding_Request)(nil),                               // 25: CMsgSteamLearn_GetNearestEmbedding_Request
	(*CMsgSteamLearn_GetNearestEmbedding_Response)(nil),                              // 26: CMsgSteamLearn_GetNearestEmbedding_Response
	(*CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding)(nil),                // 27: CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding
	(*CMsgSteamLearn_GetProject_Request)(nil),                                        // 28: CMsgSteamLearn_GetProject_Request
	(*CMsgSteamLearn_GetProject_Response)(nil),                                       // 29: CMsgSteamLearn_GetProject_Response
	(*CMsgSteamLearn_GetSnapshotStatus_Request)(nil),                                 // 30: CMsgSteamLearn_GetSnapshotStatus_Request
	(*CMsgSteamLearn_GetSnapshotStatus_Response)(nil),                                // 31: CMsgSteamLearn_GetSnapshotStatus_Response
	(*CMsgSteamLearn_GetTrainLogs_Request)(nil),                                      // 32: CMsgSteamLearn_GetTrainLogs_Request
	(*CMsgSteamLearn_GetTrainLogs_Response)(nil),                                     // 33: CMsgSteamLearn_GetTrainLogs_Response
	(*CMsgSteamLearn_GetTrainStatus_Request)(nil),                                    // 34: CMsgSteamLearn_GetTrainStatus_Request
	(*CMsgSteamLearn_GetTrainStatus_Response)(nil),                                   // 35: CMsgSteamLearn_GetTrainStatus_Response
	(*CMsgSteamLearn_GetTrainStatus_Response_Batch)(nil),                             // 36: CMsgSteamLearn_GetTrainStatus_Response_Batch
	(*CMsgSteamLearn_GetTrainStatus_Response_Epoch)(nil),                             // 37: CMsgSteamLearn_GetTrainStatus_Response_Epoch
	(*CMsgSteamLearn_GetTrainStatusVersions_Request)(nil),                            // 38: CMsgSteamLearn_GetTrainStatusVersions_Request
	(*CMsgSteamLearn_GetTrainStatusVersions_Response)(nil),                           // 39: CMsgSteamLearn_GetTrainStatusVersions_Response
	(*CMsgSteamLearn_Inference_Request)(nil),                                         // 40: CMsgSteamLearn_Inference_Request
	(*CMsgSteamLearn_Inference_Response)(nil),                                        // 41: CMsgSteamLearn_Inference_Response
	(*CMsgSteamLearn_InferenceBackend_Request)(nil),                                  // 42: CMsgSteamLearn_InferenceBackend_Request
	(*CMsgSteamLearn_InferenceBackend_Response)(nil),                                 // 43: CMsgSteamLearn_InferenceBackend_Response
	(*CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput)(nil),        // 44: CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput
	(*CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput)(nil),   // 45: CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput
	(*CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput)(nil),   // 46: CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput
	(*CMsgSteamLearn_InferenceBackend_Response_Output)(nil),                          // 47: CMsgSteamLearn_InferenceBackend_Response_Output
	(*CMsgSteamLearn_InferenceBackend_Response_RegressionOutput)(nil),                // 48: CMsgSteamLearn_InferenceBackend_Response_RegressionOutput
	(*CMsgSteamLearn_InferenceBackend_Response_Sequence)(nil),                        // 49: CMsgSteamLearn_InferenceBackend_Response_Sequence
	(*CMsgSteamLearn_InferenceMetadata_Request)(nil),                                 // 50: CMsgSteamLearn_InferenceMetadata_Request
	(*CMsgSteamLearn_InferenceMetadata_Response)(nil),                                // 51: CMsgSteamLearn_InferenceMetadata_Response
	(*CMsgSteamLearn_InferenceMetadata_Response_AppInfo)(nil),                        // 52: CMsgSteamLearn_InferenceMetadata_Response_AppInfo
	(*CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry)(nil),                   // 53: CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry
	(*CMsgSteamLearn_InferenceMetadata_Response_CompactTable)(nil),                   // 54: CMsgSteamLearn_InferenceMetadata_Response_CompactTable
	(*CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry)(nil),             // 55: CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry
	(*CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry)(nil),  // 56: CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry
	(*CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry)(nil),    // 57: CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry
	(*CMsgSteamLearn_InferenceMetadata_Response_KMeans)(nil),                         // 58: CMsgSteamLearn_InferenceMetadata_Response_KMeans
	(*CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster)(nil),                 // 59: CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster
	(*CMsgSteamLearn_InferenceMetadata_Response_Range)(nil),                          // 60: CMsgSteamLearn_InferenceMetadata_Response_Range
	(*CMsgSteamLearn_InferenceMetadata_Response_RowRange)(nil),                       // 61: CMsgSteamLearn_InferenceMetadata_Response_RowRange
	(*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable)(nil),                  // 62: CMsgSteamLearn_InferenceMetadata_Response_SequenceTable
	(*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry)(nil),            // 63: CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry
	(*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry)(nil), // 64: CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry
	(*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry)(nil),   // 65: CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry
	(*CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram)(nil),              // 66: CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram
	(*CMsgSteamLearn_InferenceMetadata_Response_StdDev)(nil),                         // 67: CMsgSteamLearn_InferenceMetadata_Response_StdDev
	(*CMsgSteamLearn_ListDataSources_Request)(nil),                                   // 68: CMsgSteamLearn_ListDataSources_Request
	(*CMsgSteamLearn_ListDataSources_Response)(nil),                                  // 69: CMsgSteamLearn_ListDataSources_Response
	(*CMsgSteamLearn_ListProjects_Request)(nil),                                      // 70: CMsgSteamLearn_ListProjects_Request
	(*CMsgSteamLearn_ListProjects_Response)(nil),                                     // 71: CMsgSteamLearn_ListProjects_Response
	(*CMsgSteamLearn_LogEvent)(nil),                                                  // 72: CMsgSteamLearn_LogEvent
	(*CMsgSteamLearn_LogEvent_Autosnapshot)(nil),                                     // 73: CMsgSteamLearn_LogEvent_Autosnapshot
	(*CMsgSteamLearn_LogEvent_TrainEnded)(nil),                                       // 74: CMsgSteamLearn_LogEvent_TrainEnded
	(*CMsgSteamLearn_LogEvent_TrainSetLive)(nil),                                     // 75: CMsgSteamLearn_LogEvent_TrainSetLive
	(*CMsgSteamLearn_LogEvent_TrainStarted)(nil),                                     // 76: CMsgSteamLearn_LogEvent_TrainStarted
	(*CMsgSteamLearn_PublishProject_Request)(nil),                                    // 77: CMsgSteamLearn_PublishProject_Request
	(*CMsgSteamLearn_PublishProject_Response)(nil),                                   // 78: CMsgSteamLearn_PublishProject_Response
	(*CMsgSteamLearn_RegisterDataSource_Request)(nil),                                // 79: CMsgSteamLearn_RegisterDataSource_Request
	(*CMsgSteamLearn_RegisterDataSource_Response)(nil),                               // 80: CMsgSteamLearn_RegisterDataSource_Response
	(*CMsgSteamLearn_SetTrainLive_Request)(nil),                                      // 81: CMsgSteamLearn_SetTrainLive_Request
	(*CMsgSteamLearn_SetTrainLive_Response)(nil),                                     // 82: CMsgSteamLearn_SetTrainLive_Response
	(*CMsgSteamLearn_SnapshotProject_Request)(nil),                                   // 83: CMsgSteamLearn_SnapshotProject_Request
	(*CMsgSteamLearn_SnapshotProject_Response)(nil),                                  // 84: CMsgSteamLearn_SnapshotProject_Response
	(*CMsgSteamLearn_Train_Request)(nil),                                             // 85: CMsgSteamLearn_Train_Request
	(*CMsgSteamLearn_Train_Request_Fetch)(nil),                                       // 86: CMsgSteamLearn_Train_Request_Fetch
	(*CMsgSteamLearn_Train_Request_Train)(nil),                                       // 87: CMsgSteamLearn_Train_Request_Train
	(*CMsgSteamLearn_Train_Response)(nil),                                            // 88: CMsgSteamLearn_Train_Response
	(*CMsgSteamLearnAccessTokens)(nil),                                               // 89: CMsgSteamLearnAccessTokens
	(*CMsgSteamLearnAccessTokens_CacheDataAccessToken)(nil),                          // 90: CMsgSteamLearnAccessTokens_CacheDataAccessToken
	(*CMsgSteamLearnAccessTokens_InferenceAccessToken)(nil),                          // 91: CMsgSteamLearnAccessTokens_InferenceAccessToken
	(*CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken)(nil),                    // 92: CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken
	(*CMsgSteamLearnData)(nil),                                                       // 93: CMsgSteamLearnData
	(*CMsgSteamLearnDataElement)(nil),                                                // 94: CMsgSteamLearnDataElement
	(*CMsgSteamLearnDataList)(nil),                                                   // 95: CMsgSteamLearnDataList
	(*CMsgSteamLearnDataObject)(nil),                                                 // 96: CMsgSteamLearnDataObject
	(*CMsgSteamLearnDataRetentionConfig)(nil),                                        // 97: CMsgSteamLearnDataRetentionConfig
	(*CMsgSteamLearnDataSource)(nil),                                                 // 98: CMsgSteamLearnDataSource
	(*CMsgSteamLearnDataSourceDescElement)(nil),                                      // 99: CMsgSteamLearnDataSourceDescElement
	(*CMsgSteamLearnDataSourceDescObject)(nil),                                       // 100: CMsgSteamLearnDataSourceDescObject
	(*CMsgSteamLearnDataSourceElementUsage)(nil),                                     // 101: CMsgSteamLearnDataSourceElementUsage
	(*CMsgSteamLearnFetchInfo)(nil),                                                  // 102: CMsgSteamLearnFetchInfo
	(*CMsgSteamLearnModelNodeBatchNormalization)(nil),                                // 103: CMsgSteamLearnModelNodeBatchNormalization
	(*CMsgSteamLearnModelNodeCombine)(nil),                                           // 104: CMsgSteamLearnModelNodeCombine
	(*CMsgSteamLearnModelNodeConcatenate)(nil),                                       // 105: CMsgSteamLearnModelNodeConcatenate
	(*CMsgSteamLearnModelNodeConditionalExtract)(nil),                                // 106: CMsgSteamLearnModelNodeConditionalExtract
	(*CMsgSteamLearnModelNodeConditionalExtract_FilterInfo)(nil),                     // 107: CMsgSteamLearnModelNodeConditionalExtract_FilterInfo
	(*CMsgSteamLearnModelNodeConditionalExtract_WeightInfo)(nil),                     // 108: CMsgSteamLearnModelNodeConditionalExtract_WeightInfo
	(*CMsgSteamLearnModelNodeConditionalSwap)(nil),                                   // 109: CMsgSteamLearnModelNodeConditionalSwap
	(*CMsgSteamLearnModelNodeConv1D)(nil),                                            // 110: CMsgSteamLearnModelNodeConv1D
	(*CMsgSteamLearnModelNodeDense)(nil),                                             // 111: CMsgSteamLearnModelNodeDense
	(*CMsgSteamLearnModelNodeDenseStack)(nil),                                        // 112: CMsgSteamLearnModelNodeDenseStack
	(*CMsgSteamLearnModelNodeDot)(nil),                                               // 113: CMsgSteamLearnModelNodeDot
	(*CMsgSteamLearnModelNodeDropout)(nil),                                           // 114: CMsgSteamLearnModelNodeDropout
	(*CMsgSteamLearnModelNodeEmbedding)(nil),                                         // 115: CMsgSteamLearnModelNodeEmbedding
	(*CMsgSteamLearnModelNodeExplode)(nil),                                           // 116: CMsgSteamLearnModelNodeExplode
	(*CMsgSteamLearnModelNodeExternalEmbedding)(nil),                                 // 117: CMsgSteamLearnModelNodeExternalEmbedding
	(*CMsgSteamLearnModelNodeExternalModel)(nil),                                     // 118: CMsgSteamLearnModelNodeExternalModel
	(*CMsgSteamLearnModelNodeExtract)(nil),                                           // 119: CMsgSteamLearnModelNodeExtract
	(*CMsgSteamLearnModelNodeFlatten)(nil),                                           // 120: CMsgSteamLearnModelNodeFlatten
	(*CMsgSteamLearnModelNodeGlobalAvgPooling1D)(nil),                                // 121: CMsgSteamLearnModelNodeGlobalAvgPooling1D
	(*CMsgSteamLearnModelNodeGlobalMaxPooling1D)(nil),                                // 122: CMsgSteamLearnModelNodeGlobalMaxPooling1D
	(*CMsgSteamLearnModelNodeInput)(nil),                                             // 123: CMsgSteamLearnModelNodeInput
	(*CMsgSteamLearnModelNodeKMeansCluster)(nil),                                     // 124: CMsgSteamLearnModelNodeKMeansCluster
	(*CMsgSteamLearnModelNodeMaskedHead)(nil),                                        // 125: CMsgSteamLearnModelNodeMaskedHead
	(*CMsgSteamLearnModelNodeMaxPooling1D)(nil),                                      // 126: CMsgSteamLearnModelNodeMaxPooling1D
	(*CMsgSteamLearnModelNodeNamedInference)(nil),                                    // 127: CMsgSteamLearnModelNodeNamedInference
	(*CMsgSteamLearnModelNodeNormalize)(nil),                                         // 128: CMsgSteamLearnModelNodeNormalize
	(*CMsgSteamLearnModelNodeOnehot)(nil),                                            // 129: CMsgSteamLearnModelNodeOnehot
	(*CMsgSteamLearnModelNodeSequenceSplit)(nil),                                     // 130: CMsgSteamLearnModelNodeSequenceSplit
	(*CMsgSteamLearnModelNodeShuffle)(nil),                                           // 131: CMsgSteamLearnModelNodeShuffle
	(*CMsgSteamLearnModelNodeSyncedShuffle)(nil),                                     // 132: CMsgSteamLearnModelNodeSyncedShuffle
	(*CMsgSteamLearnModelNodeTextVectorization)(nil),                                 // 133: CMsgSteamLearnModelNodeTextVectorization
	(*CMsgSteamLearnModelNodeTimeDistributedDense)(nil),                              // 134: CMsgSteamLearnModelNodeTimeDistributedDense
	(*CMsgSteamLearnModelNodeTokenMask)(nil),                                         // 135: CMsgSteamLearnModelNodeTokenMask
	(*CMsgSteamLearnModelNodeTokenTransformer)(nil),                                  // 136: CMsgSteamLearnModelNodeTokenTransformer
	(*CMsgSteamLearnModelNodeTrain)(nil),                                             // 137: CMsgSteamLearnModelNodeTrain
	(*CMsgSteamLearnModelNodeTransformer)(nil),                                       // 138: CMsgSteamLearnModelNodeTransformer
	(*CMsgSteamLearnModelNodeWeightedAverage)(nil),                                   // 139: CMsgSteamLearnModelNodeWeightedAverage
	(*CMsgSteamLearnProject)(nil),                                                    // 140: CMsgSteamLearnProject
	(*CMsgSteamLearnProjectConfig)(nil),                                              // 141: CMsgSteamLearnProjectConfig
	(*CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry)(nil),                 // 142: CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry
	(*CMsgSteamLearnProjectNode)(nil),                                                // 143: CMsgSteamLearnProjectNode
	(*CMsgSteamLearnProjectNodeConnector)(nil),                                       // 144: CMsgSteamLearnProjectNodeConnector
	(*CMsgSteamLearnProjectSnapshotConfig)(nil),                                      // 145: CMsgSteamLearnProjectSnapshotConfig
	(*CMsgSteamLearnProjectSnapshotConfigAccountIDs)(nil),                            // 146: CMsgSteamLearnProjectSnapshotConfigAccountIDs
	(*CMsgSteamLearnProjectSnapshotConfigAppIDs)(nil),                                // 147: CMsgSteamLearnProjectSnapshotConfigAppIDs
	(*CMsgSteamLearnProjectSnapshotConfigDataSource)(nil),                            // 148: CMsgSteamLearnProjectSnapshotConfigDataSource
	(*CMsgSteamLearnProjectSnapshotConfigOtherProject)(nil),                          // 149: CMsgSteamLearnProjectSnapshotConfigOtherProject
	(*CMsgSteamLearnProjectSnapshotFilter)(nil),                                      // 150: CMsgSteamLearnProjectSnapshotFilter
	(*CMsgSteamLearnProjectSnapshotFilterHistogram)(nil),                             // 151: CMsgSteamLearnProjectSnapshotFilterHistogram
	(*CMsgSteamLearnRawDataElement)(nil),                                             // 152: CMsgSteamLearnRawDataElement
	(*CMsgSteamLearnScheduledTrainConfig)(nil),                                       // 153: CMsgSteamLearnScheduledTrainConfig
	(*CMsgSteamLearnSnapshotStorage)(nil),                                            // 154: CMsgSteamLearnSnapshotStorage
	(*CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry)(nil),                    // 155: CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry
	(*CMsgSteamLearnSnapshotStorage_StorageElement)(nil),                             // 156: CMsgSteamLearnSnapshotStorage_StorageElement
	(*CMsgSteamLearnTrainConfig)(nil),                                                // 157: CMsgSteamLearnTrainConfig
	(*CMsgSteamLearnTrainInfo)(nil),                                                  // 158: CMsgSteamLearnTrainInfo
}
var file_service_steamlearn_proto_depIdxs = []int32{
	2,   // 0: CMsgSteamLearn_BatchOperation_Request.cache_data_requests:type_name -> CMsgSteamLearn_CacheData_Request
	83,  // 1: CMsgSteamLearn_BatchOperation_Request.snapshot_requests:type_name -> CMsgSteamLearn_SnapshotProject_Request
	40,  // 2: CMsgSteamLearn_BatchOperation_Request.inference_requests:type_name -> CMsgSteamLearn_Inference_Request
	3,   // 3: CMsgSteamLearn_BatchOperation_Response.cache_data_responses:type_name -> CMsgSteamLearn_CacheData_Response
	84,  // 4: CMsgSteamLearn_BatchOperation_Response.snapshot_responses:type_name -> CMsgSteamLearn_SnapshotProject_Response
	41,  // 5: CMsgSteamLearn_BatchOperation_Response.inference_responses:type_name -> CMsgSteamLearn_Inference_Response
	93,  // 6: CMsgSteamLearn_CacheData_Request.data:type_name -> CMsgSteamLearnData
	140, // 7: CMsgSteamLearn_CreateProject_Response.project:type_name -> CMsgSteamLearnProject
	140, // 8: CMsgSteamLearn_EditProject_Request.project:type_name -> CMsgSteamLearnProject
	89,  // 9: CMsgSteamLearn_GetAccessTokens_Response.access_tokens:type_name -> CMsgSteamLearnAccessTokens
	17,  // 10: CMsgSteamLearn_GetBatchedStatus_Request.fetch_requests:type_name -> CMsgSteamLearn_GetFetchStatus_Request
	34,  // 11: CMsgSteamLearn_GetBatchedStatus_Request.train_requests:type_name -> CMsgSteamLearn_GetTrainStatus_Request
	18,  // 12: CMsgSteamLearn_GetBatchedStatus_Response.fetch_responses:type_name -> CMsgSteamLearn_GetFetchStatus_Response
	35,  // 13: CMsgSteamLearn_GetBatchedStatus_Response.train_responses:type_name -> CMsgSteamLearn_GetTrainStatus_Response
	98,  // 14: CMsgSteamLearn_GetDataSource_Response.data_source:type_name -> CMsgSteamLearnDataSource
	16,  // 15: CMsgSteamLearn_GetEmbeddingValues_Response.embedding_data:type_name -> CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData
	20,  // 16: CMsgSteamLearn_GetFetchStatus_Response.workers:type_name -> CMsgSteamLearn_GetFetchStatus_Response_Worker
	19,  // 17: CMsgSteamLearn_GetFetchStatus_Response.metadata:type_name -> CMsgSteamLearn_GetFetchStatus_Response_Metadata
	72,  // 18: CMsgSteamLearn_GetLogEvents_Response.event_list:type_name -> CMsgSteamLearn_LogEvent
	27,  // 19: CMsgSteamLearn_GetNearestEmbedding_Response.near_embeddings:type_name -> CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding
	140, // 20: CMsgSteamLearn_GetProject_Response.project:type_name -> CMsgSteamLearnProject
	154, // 21: CMsgSteamLearn_GetSnapshotStatus_Response.snapshot_examples:type_name -> CMsgSteamLearnSnapshotStorage
	37,  // 22: CMsgSteamLearn_GetTrainStatus_Response.epochs:type_name -> CMsgSteamLearn_GetTrainStatus_Response_Epoch
	36,  // 23: CMsgSteamLearn_GetTrainStatus_Response.test_batches:type_name -> CMsgSteamLearn_GetTrainStatus_Response_Batch
	36,  // 24: CMsgSteamLearn_GetTrainStatus_Response_Epoch.train_batches:type_name -> CMsgSteamLearn_GetTrainStatus_Response_Batch
	36,  // 25: CMsgSteamLearn_GetTrainStatus_Response_Epoch.validate_batches:type_name -> CMsgSteamLearn_GetTrainStatus_Response_Batch
	95,  // 26: CMsgSteamLearn_Inference_Request.data:type_name -> CMsgSteamLearnDataList
	43,  // 27: CMsgSteamLearn_Inference_Response.backend_response:type_name -> CMsgSteamLearn_InferenceBackend_Response
	152, // 28: CMsgSteamLearn_InferenceBackend_Request.data:type_name -> CMsgSteamLearnRawDataElement
	47,  // 29: CMsgSteamLearn_InferenceBackend_Response.outputs:type_name -> CMsgSteamLearn_InferenceBackend_Response_Output
	49,  // 30: CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput.value_sequence:type_name -> CMsgSteamLearn_InferenceBackend_Response_Sequence
	49,  // 31: CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput.value_sequence:type_name -> CMsgSteamLearn_InferenceBackend_Response_Sequence
	44,  // 32: CMsgSteamLearn_InferenceBackend_Response_Output.binary_crossentropy:type_name -> CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput
	45,  // 33: CMsgSteamLearn_InferenceBackend_Response_Output.categorical_crossentropy:type_name -> CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput
	46,  // 34: CMsgSteamLearn_InferenceBackend_Response_Output.multi_binary_crossentropy:type_name -> CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput
	48,  // 35: CMsgSteamLearn_InferenceBackend_Response_Output.regression:type_name -> CMsgSteamLearn_InferenceBackend_Response_RegressionOutput
	61,  // 36: CMsgSteamLearn_InferenceMetadata_Response.row_range:type_name -> CMsgSteamLearn_InferenceMetadata_Response_RowRange
	60,  // 37: CMsgSteamLearn_InferenceMetadata_Response.ranges:type_name -> CMsgSteamLearn_InferenceMetadata_Response_Range
	67,  // 38: CMsgSteamLearn_InferenceMetadata_Response.std_devs:type_name -> CMsgSteamLearn_InferenceMetadata_Response_StdDev
	54,  // 39: CMsgSteamLearn_InferenceMetadata_Response.compact_tables:type_name -> CMsgSteamLearn_InferenceMetadata_Response_CompactTable
	58,  // 40: CMsgSteamLearn_InferenceMetadata_Response.kmeans:type_name -> CMsgSteamLearn_InferenceMetadata_Response_KMeans
	66,  // 41: CMsgSteamLearn_InferenceMetadata_Response.snapshot_histogram:type_name -> CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram
	53,  // 42: CMsgSteamLearn_InferenceMetadata_Response.app_info:type_name -> CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry
	62,  // 43: CMsgSteamLearn_InferenceMetadata_Response.sequence_tables:type_name -> CMsgSteamLearn_InferenceMetadata_Response_SequenceTable
	52,  // 44: CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry.value:type_name -> CMsgSteamLearn_InferenceMetadata_Response_AppInfo
	57,  // 45: CMsgSteamLearn_InferenceMetadata_Response_CompactTable.map_values:type_name -> CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry
	56,  // 46: CMsgSteamLearn_InferenceMetadata_Response_CompactTable.map_mappings:type_name -> CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry
	55,  // 47: CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry.value:type_name -> CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry
	55,  // 48: CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry.value:type_name -> CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry
	59,  // 49: CMsgSteamLearn_InferenceMetadata_Response_KMeans.clusters:type_name -> CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster
	65,  // 50: CMsgSteamLearn_InferenceMetadata_Response_SequenceTable.map_values:type_name -> CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry
	64,  // 51: CMsgSteamLearn_InferenceMetadata_Response_SequenceTable.map_mappings:type_name -> CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry
	63,  // 52: CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry.value:type_name -> CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry
	63,  // 53: CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry.value:type_name -> CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry
	98,  // 54: CMsgSteamLearn_ListDataSources_Response.data_sources:type_name -> CMsgSteamLearnDataSource
	140, // 55: CMsgSteamLearn_ListProjects_Response.projects:type_name -> CMsgSteamLearnProject
	76,  // 56: CMsgSteamLearn_LogEvent.train_started:type_name -> CMsgSteamLearn_LogEvent_TrainStarted
	74,  // 57: CMsgSteamLearn_LogEvent.train_ended:type_name -> CMsgSteamLearn_LogEvent_TrainEnded
	75,  // 58: CMsgSteamLearn_LogEvent.train_set_live:type_name -> CMsgSteamLearn_LogEvent_TrainSetLive
	73,  // 59: CMsgSteamLearn_LogEvent.auto_snapshot:type_name -> CMsgSteamLearn_LogEvent_Autosnapshot
	98,  // 60: CMsgSteamLearn_RegisterDataSource_Request.data_source:type_name -> CMsgSteamLearnDataSource
	98,  // 61: CMsgSteamLearn_RegisterDataSource_Response.data_source:type_name -> CMsgSteamLearnDataSource
	93,  // 62: CMsgSteamLearn_SnapshotProject_Request.data:type_name -> CMsgSteamLearnData
	141, // 63: CMsgSteamLearn_Train_Request.project_config:type_name -> CMsgSteamLearnProjectConfig
	86,  // 64: CMsgSteamLearn_Train_Request.fetch:type_name -> CMsgSteamLearn_Train_Request_Fetch
	87,  // 65: CMsgSteamLearn_Train_Request.train:type_name -> CMsgSteamLearn_Train_Request_Train
	90,  // 66: CMsgSteamLearnAccessTokens.cache_data_access_tokens:type_name -> CMsgSteamLearnAccessTokens_CacheDataAccessToken
	92,  // 67: CMsgSteamLearnAccessTokens.snapshot_project_access_tokens:type_name -> CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken
	91,  // 68: CMsgSteamLearnAccessTokens.inference_access_tokens:type_name -> CMsgSteamLearnAccessTokens_InferenceAccessToken
	96,  // 69: CMsgSteamLearnData.data_object:type_name -> CMsgSteamLearnDataObject
	96,  // 70: CMsgSteamLearnDataElement.data_objects:type_name -> CMsgSteamLearnDataObject
	93,  // 71: CMsgSteamLearnDataList.data:type_name -> CMsgSteamLearnData
	94,  // 72: CMsgSteamLearnDataObject.elements:type_name -> CMsgSteamLearnDataElement
	100, // 73: CMsgSteamLearnDataSource.structure:type_name -> CMsgSteamLearnDataSourceDescObject
	100, // 74: CMsgSteamLearnDataSourceDescElement.object:type_name -> CMsgSteamLearnDataSourceDescObject
	99,  // 75: CMsgSteamLearnDataSourceDescObject.elements:type_name -> CMsgSteamLearnDataSourceDescElement
	107, // 76: CMsgSteamLearnModelNodeConditionalExtract.filter_info:type_name -> CMsgSteamLearnModelNodeConditionalExtract_FilterInfo
	108, // 77: CMsgSteamLearnModelNodeConditionalExtract.weight_info:type_name -> CMsgSteamLearnModelNodeConditionalExtract_WeightInfo
	141, // 78: CMsgSteamLearnProject.unpublished_config:type_name -> CMsgSteamLearnProjectConfig
	141, // 79: CMsgSteamLearnProject.published_configs:type_name -> CMsgSteamLearnProjectConfig
	101, // 80: CMsgSteamLearnProjectConfig.data_source_element_usages:type_name -> CMsgSteamLearnDataSourceElementUsage
	143, // 81: CMsgSteamLearnProjectConfig.project_nodes:type_name -> CMsgSteamLearnProjectNode
	145, // 82: CMsgSteamLearnProjectConfig.snapshot_config:type_name -> CMsgSteamLearnProjectSnapshotConfig
	157, // 83: CMsgSteamLearnProjectConfig.train_config:type_name -> CMsgSteamLearnTrainConfig
	150, // 84: CMsgSteamLearnProjectConfig.snapshot_filter:type_name -> CMsgSteamLearnProjectSnapshotFilter
	142, // 85: CMsgSteamLearnProjectConfig.map_data_element_sql_column:type_name -> CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry
	97,  // 86: CMsgSteamLearnProjectConfig.data_retention_config:type_name -> CMsgSteamLearnDataRetentionConfig
	153, // 87: CMsgSteamLearnProjectConfig.scheduled_train_config:type_name -> CMsgSteamLearnScheduledTrainConfig
	102, // 88: CMsgSteamLearnProjectConfig.fetch_infos:type_name -> CMsgSteamLearnFetchInfo
	158, // 89: CMsgSteamLearnProjectConfig.train_infos:type_name -> CMsgSteamLearnTrainInfo
	144, // 90: CMsgSteamLearnProjectNode.connectors:type_name -> CMsgSteamLearnProjectNodeConnector
	123, // 91: CMsgSteamLearnProjectNode.input:type_name -> CMsgSteamLearnModelNodeInput
	111, // 92: CMsgSteamLearnProjectNode.dense:type_name -> CMsgSteamLearnModelNodeDense
	112, // 93: CMsgSteamLearnProjectNode.dense_stack:type_name -> CMsgSteamLearnModelNodeDenseStack
	114, // 94: CMsgSteamLearnProjectNode.dropout:type_name -> CMsgSteamLearnModelNodeDropout
	115, // 95: CMsgSteamLearnProjectNode.embedding:type_name -> CMsgSteamLearnModelNodeEmbedding
	137, // 96: CMsgSteamLearnProjectNode.train:type_name -> CMsgSteamLearnModelNodeTrain
	106, // 97: CMsgSteamLearnProjectNode.conditional_extract:type_name -> CMsgSteamLearnModelNodeConditionalExtract
	105, // 98: CMsgSteamLearnProjectNode.concatenate:type_name -> CMsgSteamLearnModelNodeConcatenate
	131, // 99: CMsgSteamLearnProjectNode.shuffle:type_name -> CMsgSteamLearnModelNodeShuffle
	132, // 100: CMsgSteamLearnProjectNode.synced_shuffle:type_name -> CMsgSteamLearnModelNodeSyncedShuffle
	129, // 101: CMsgSteamLearnProjectNode.onehot:type_name -> CMsgSteamLearnModelNodeOnehot
	116, // 102: CMsgSteamLearnProjectNode.explode:type_name -> CMsgSteamLearnModelNodeExplode
	109, // 103: CMsgSteamLearnProjectNode.conditional_swap:type_name -> CMsgSteamLearnModelNodeConditionalSwap
	124, // 104: CMsgSteamLearnProjectNode.kmeans:type_name -> CMsgSteamLearnModelNodeKMeansCluster
	104, // 105: CMsgSteamLearnProjectNode.combine:type_name -> CMsgSteamLearnModelNodeCombine
	133, // 106: CMsgSteamLearnProjectNode.text_vectorization:type_name -> CMsgSteamLearnModelNodeTextVectorization
	103, // 107: CMsgSteamLearnProjectNode.batch_normalization:type_name -> CMsgSteamLearnModelNodeBatchNormalization
	128, // 108: CMsgSteamLearnProjectNode.normalize:type_name -> CMsgSteamLearnModelNodeNormalize
	127, // 109: CMsgSteamLearnProjectNode.named_inference:type_name -> CMsgSteamLearnModelNodeNamedInference
	113, // 110: CMsgSteamLearnProjectNode.dot:type_name -> CMsgSteamLearnModelNodeDot
	119, // 111: CMsgSteamLearnProjectNode.extract:type_name -> CMsgSteamLearnModelNodeExtract
	110, // 112: CMsgSteamLearnProjectNode.conv_1d:type_name -> CMsgSteamLearnModelNodeConv1D
	126, // 113: CMsgSteamLearnProjectNode.max_pooling_1d:type_name -> CMsgSteamLearnModelNodeMaxPooling1D
	120, // 114: CMsgSteamLearnProjectNode.flatten:type_name -> CMsgSteamLearnModelNodeFlatten
	122, // 115: CMsgSteamLearnProjectNode.global_max_pooling:type_name -> CMsgSteamLearnModelNodeGlobalMaxPooling1D
	138, // 116: CMsgSteamLearnProjectNode.transformer:type_name -> CMsgSteamLearnModelNodeTransformer
	117, // 117: CMsgSteamLearnProjectNode.external_embedding:type_name -> CMsgSteamLearnModelNodeExternalEmbedding
	134, // 118: CMsgSteamLearnProjectNode.time_distributed_dense:type_name -> CMsgSteamLearnModelNodeTimeDistributedDense
	130, // 119: CMsgSteamLearnProjectNode.sequence_split:type_name -> CMsgSteamLearnModelNodeSequenceSplit
	139, // 120: CMsgSteamLearnProjectNode.weighted_average:type_name -> CMsgSteamLearnModelNodeWeightedAverage
	121, // 121: CMsgSteamLearnProjectNode.global_avg_pooling_1d:type_name -> CMsgSteamLearnModelNodeGlobalAvgPooling1D
	135, // 122: CMsgSteamLearnProjectNode.token_mask:type_name -> CMsgSteamLearnModelNodeTokenMask
	125, // 123: CMsgSteamLearnProjectNode.masked_head:type_name -> CMsgSteamLearnModelNodeMaskedHead
	136, // 124: CMsgSteamLearnProjectNode.token_transformer:type_name -> CMsgSteamLearnModelNodeTokenTransformer
	118, // 125: CMsgSteamLearnProjectNode.external_model:type_name -> CMsgSteamLearnModelNodeExternalModel
	146, // 126: CMsgSteamLearnProjectSnapshotConfig.config_account_ids:type_name -> CMsgSteamLearnProjectSnapshotConfigAccountIDs
	147, // 127: CMsgSteamLearnProjectSnapshotConfig.config_app_ids:type_name -> CMsgSteamLearnProjectSnapshotConfigAppIDs
	149, // 128: CMsgSteamLearnProjectSnapshotConfig.config_other_project:type_name -> CMsgSteamLearnProjectSnapshotConfigOtherProject
	148, // 129: CMsgSteamLearnProjectSnapshotConfig.config_data_source:type_name -> CMsgSteamLearnProjectSnapshotConfigDataSource
	151, // 130: CMsgSteamLearnProjectSnapshotFilter.histogram:type_name -> CMsgSteamLearnProjectSnapshotFilterHistogram
	155, // 131: CMsgSteamLearnSnapshotStorage.map_storage_elements:type_name -> CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry
	156, // 132: CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry.value:type_name -> CMsgSteamLearnSnapshotStorage_StorageElement
	0,   // 133: SteamLearn.BatchOperation:input_type -> CMsgSteamLearn_BatchOperation_Request
	2,   // 134: SteamLearn.CacheData:input_type -> CMsgSteamLearn_CacheData_Request
	4,   // 135: SteamLearn.CreateProject:input_type -> CMsgSteamLearn_CreateProject_Request
	6,   // 136: SteamLearn.EditProject:input_type -> CMsgSteamLearn_EditProject_Request
	8,   // 137: SteamLearn.GetAccessTokensWeb:input_type -> CMsgSteamLearn_GetAccessTokens_Request
	10,  // 138: SteamLearn.GetBatchedStatus:input_type -> CMsgSteamLearn_GetBatchedStatus_Request
	12,  // 139: SteamLearn.GetDataSource:input_type -> CMsgSteamLearn_GetDataSource_Request
	14,  // 140: SteamLearn.GetEmbeddingValues:input_type -> CMsgSteamLearn_GetEmbeddingValues_Request
	17,  // 141: SteamLearn.GetFetchStatus:input_type -> CMsgSteamLearn_GetFetchStatus_Request
	21,  // 142: SteamLearn.GetFetchStatusVersions:input_type -> CMsgSteamLearn_GetFetchStatusVersions_Request
	23,  // 143: SteamLearn.GetLogEvents:input_type -> CMsgSteamLearn_GetLogEvents_Request
	25,  // 144: SteamLearn.GetNearestEmbedding:input_type -> CMsgSteamLearn_GetNearestEmbedding_Request
	28,  // 145: SteamLearn.GetProject:input_type -> CMsgSteamLearn_GetProject_Request
	30,  // 146: SteamLearn.GetSnapshotStatus:input_type -> CMsgSteamLearn_GetSnapshotStatus_Request
	32,  // 147: SteamLearn.GetTrainLogs:input_type -> CMsgSteamLearn_GetTrainLogs_Request
	34,  // 148: SteamLearn.GetTrainStatus:input_type -> CMsgSteamLearn_GetTrainStatus_Request
	38,  // 149: SteamLearn.GetTrainStatusVersions:input_type -> CMsgSteamLearn_GetTrainStatusVersions_Request
	40,  // 150: SteamLearn.Inference:input_type -> CMsgSteamLearn_Inference_Request
	42,  // 151: SteamLearn.InferenceBackend:input_type -> CMsgSteamLearn_InferenceBackend_Request
	50,  // 152: SteamLearn.InferenceMetadata:input_type -> CMsgSteamLearn_InferenceMetadata_Request
	68,  // 153: SteamLearn.ListDataSources:input_type -> CMsgSteamLearn_ListDataSources_Request
	70,  // 154: SteamLearn.ListProjects:input_type -> CMsgSteamLearn_ListProjects_Request
	77,  // 155: SteamLearn.PublishProject:input_type -> CMsgSteamLearn_PublishProject_Request
	79,  // 156: SteamLearn.RegisterDataSource:input_type -> CMsgSteamLearn_RegisterDataSource_Request
	81,  // 157: SteamLearn.SetTrainLive:input_type -> CMsgSteamLearn_SetTrainLive_Request
	83,  // 158: SteamLearn.SnapshotProject:input_type -> CMsgSteamLearn_SnapshotProject_Request
	85,  // 159: SteamLearn.Train:input_type -> CMsgSteamLearn_Train_Request
	1,   // 160: SteamLearn.BatchOperation:output_type -> CMsgSteamLearn_BatchOperation_Response
	3,   // 161: SteamLearn.CacheData:output_type -> CMsgSteamLearn_CacheData_Response
	5,   // 162: SteamLearn.CreateProject:output_type -> CMsgSteamLearn_CreateProject_Response
	7,   // 163: SteamLearn.EditProject:output_type -> CMsgSteamLearn_EditProject_Response
	9,   // 164: SteamLearn.GetAccessTokensWeb:output_type -> CMsgSteamLearn_GetAccessTokens_Response
	11,  // 165: SteamLearn.GetBatchedStatus:output_type -> CMsgSteamLearn_GetBatchedStatus_Response
	13,  // 166: SteamLearn.GetDataSource:output_type -> CMsgSteamLearn_GetDataSource_Response
	15,  // 167: SteamLearn.GetEmbeddingValues:output_type -> CMsgSteamLearn_GetEmbeddingValues_Response
	18,  // 168: SteamLearn.GetFetchStatus:output_type -> CMsgSteamLearn_GetFetchStatus_Response
	22,  // 169: SteamLearn.GetFetchStatusVersions:output_type -> CMsgSteamLearn_GetFetchStatusVersions_Response
	24,  // 170: SteamLearn.GetLogEvents:output_type -> CMsgSteamLearn_GetLogEvents_Response
	26,  // 171: SteamLearn.GetNearestEmbedding:output_type -> CMsgSteamLearn_GetNearestEmbedding_Response
	29,  // 172: SteamLearn.GetProject:output_type -> CMsgSteamLearn_GetProject_Response
	31,  // 173: SteamLearn.GetSnapshotStatus:output_type -> CMsgSteamLearn_GetSnapshotStatus_Response
	33,  // 174: SteamLearn.GetTrainLogs:output_type -> CMsgSteamLearn_GetTrainLogs_Response
	35,  // 175: SteamLearn.GetTrainStatus:output_type -> CMsgSteamLearn_GetTrainStatus_Response
	39,  // 176: SteamLearn.GetTrainStatusVersions:output_type -> CMsgSteamLearn_GetTrainStatusVersions_Response
	41,  // 177: SteamLearn.Inference:output_type -> CMsgSteamLearn_Inference_Response
	43,  // 178: SteamLearn.InferenceBackend:output_type -> CMsgSteamLearn_InferenceBackend_Response
	51,  // 179: SteamLearn.InferenceMetadata:output_type -> CMsgSteamLearn_InferenceMetadata_Response
	69,  // 180: SteamLearn.ListDataSources:output_type -> CMsgSteamLearn_ListDataSources_Response
	71,  // 181: SteamLearn.ListProjects:output_type -> CMsgSteamLearn_ListProjects_Response
	78,  // 182: SteamLearn.PublishProject:output_type -> CMsgSteamLearn_PublishProject_Response
	80,  // 183: SteamLearn.RegisterDataSource:output_type -> CMsgSteamLearn_RegisterDataSource_Response
	82,  // 184: SteamLearn.SetTrainLive:output_type -> CMsgSteamLearn_SetTrainLive_Response
	84,  // 185: SteamLearn.SnapshotProject:output_type -> CMsgSteamLearn_SnapshotProject_Response
	88,  // 186: SteamLearn.Train:output_type -> CMsgSteamLearn_Train_Response
	160, // [160:187] is the sub-list for method output_type
	133, // [133:160] is the sub-list for method input_type
	133, // [133:133] is the sub-list for extension type_name
	133, // [133:133] is the sub-list for extension extendee
	0,   // [0:133] is the sub-list for field type_name
}

func init() { file_service_steamlearn_proto_init() }
func file_service_steamlearn_proto_init() {
	if File_service_steamlearn_proto != nil {
		return
	}
	file_common_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_steamlearn_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_BatchOperation_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_BatchOperation_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_CacheData_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_CacheData_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_CreateProject_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_CreateProject_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_EditProject_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_EditProject_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetAccessTokens_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetAccessTokens_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetBatchedStatus_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetBatchedStatus_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetDataSource_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetDataSource_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetEmbeddingValues_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetEmbeddingValues_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetEmbeddingValues_Response_EmbeddingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetFetchStatus_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetFetchStatus_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetFetchStatus_Response_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetFetchStatus_Response_Worker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetFetchStatusVersions_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetFetchStatusVersions_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetLogEvents_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetLogEvents_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetNearestEmbedding_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetNearestEmbedding_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetNearestEmbedding_Response_NearEmbedding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetProject_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetProject_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetSnapshotStatus_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetSnapshotStatus_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetTrainLogs_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetTrainLogs_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetTrainStatus_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetTrainStatus_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetTrainStatus_Response_Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetTrainStatus_Response_Epoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetTrainStatusVersions_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_GetTrainStatusVersions_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_Inference_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_Inference_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceBackend_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceBackend_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceBackend_Response_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceBackend_Response_RegressionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceBackend_Response_Sequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Response_AppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Response_AppInfoEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Response_CompactTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Response_CompactTable_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapMappingsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Response_CompactTable_MapValuesEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Response_KMeans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Response_KMeans_Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Response_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Response_RowRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapMappingsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Response_SequenceTable_MapValuesEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Response_SnapshotHistogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_InferenceMetadata_Response_StdDev); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_ListDataSources_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_ListDataSources_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_ListProjects_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_ListProjects_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_LogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_LogEvent_Autosnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_LogEvent_TrainEnded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_LogEvent_TrainSetLive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_LogEvent_TrainStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_PublishProject_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_PublishProject_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_RegisterDataSource_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_RegisterDataSource_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_SetTrainLive_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_SetTrainLive_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_SnapshotProject_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_SnapshotProject_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_Train_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_Train_Request_Fetch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_Train_Request_Train); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearn_Train_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnAccessTokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnAccessTokens_CacheDataAccessToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnAccessTokens_InferenceAccessToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnAccessTokens_SnapshotProjectAccessToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnDataElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnDataObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnDataRetentionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnDataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnDataSourceDescElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnDataSourceDescObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnDataSourceElementUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnFetchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeBatchNormalization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeCombine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeConcatenate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeConditionalExtract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeConditionalExtract_FilterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeConditionalExtract_WeightInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeConditionalSwap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeConv1D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeDense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeDenseStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeDot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeDropout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[115].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeEmbedding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[116].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeExplode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[117].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeExternalEmbedding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[118].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeExternalModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[119].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeExtract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[120].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeFlatten); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[121].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeGlobalAvgPooling1D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[122].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeGlobalMaxPooling1D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[123].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[124].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeKMeansCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[125].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeMaskedHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[126].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeMaxPooling1D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[127].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeNamedInference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[128].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeNormalize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[129].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeOnehot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[130].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeSequenceSplit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[131].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeShuffle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[132].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeSyncedShuffle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[133].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeTextVectorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[134].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeTimeDistributedDense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[135].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeTokenMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[136].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeTokenTransformer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[137].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeTrain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[138].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeTransformer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[139].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnModelNodeWeightedAverage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[140].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[141].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnProjectConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[142].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnProjectConfig_MapDataElementSqlColumnEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[143].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnProjectNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[144].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnProjectNodeConnector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[145].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnProjectSnapshotConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[146].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnProjectSnapshotConfigAccountIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[147].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnProjectSnapshotConfigAppIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[148].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnProjectSnapshotConfigDataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[149].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnProjectSnapshotConfigOtherProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[150].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnProjectSnapshotFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[151].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnProjectSnapshotFilterHistogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[152].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnRawDataElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[153].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnScheduledTrainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[154].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnSnapshotStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[155].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnSnapshotStorage_MapStorageElementsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[156].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnSnapshotStorage_StorageElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[157].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnTrainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_steamlearn_proto_msgTypes[158].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgSteamLearnTrainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_steamlearn_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   159,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_steamlearn_proto_goTypes,
		DependencyIndexes: file_service_steamlearn_proto_depIdxs,
		MessageInfos:      file_service_steamlearn_proto_msgTypes,
	}.Build()
	File_service_steamlearn_proto = out.File
	file_service_steamlearn_proto_rawDesc = nil
	file_service_steamlearn_proto_goTypes = nil
	file_service_steamlearn_proto_depIdxs = nil
}
