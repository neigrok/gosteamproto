// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: service_clientmetrics.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CClientMetrics_ReportClientArgs_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientArgs                     []string `protobuf:"bytes,1,rep,name=client_args,json=clientArgs" json:"client_args,omitempty"`
	GpuWebviewRegkeyDisabled       *bool    `protobuf:"varint,2,opt,name=gpu_webview_regkey_disabled,json=gpuWebviewRegkeyDisabled" json:"gpu_webview_regkey_disabled,omitempty"`
	SuppressGpuChrome              *bool    `protobuf:"varint,3,opt,name=suppress_gpu_chrome,json=suppressGpuChrome" json:"suppress_gpu_chrome,omitempty"`
	BrowserNotSupported            *bool    `protobuf:"varint,4,opt,name=browser_not_supported,json=browserNotSupported" json:"browser_not_supported,omitempty"`
	HwAccelVideoRegkeyDisabled     *bool    `protobuf:"varint,5,opt,name=hw_accel_video_regkey_disabled,json=hwAccelVideoRegkeyDisabled" json:"hw_accel_video_regkey_disabled,omitempty"`
	MiniModeEnabled                *bool    `protobuf:"varint,6,opt,name=mini_mode_enabled,json=miniModeEnabled" json:"mini_mode_enabled,omitempty"`
	FpsCounterEnabled              *bool    `protobuf:"varint,7,opt,name=fps_counter_enabled,json=fpsCounterEnabled" json:"fps_counter_enabled,omitempty"`
	LibraryLowBandwidthModeEnabled *bool    `protobuf:"varint,8,opt,name=library_low_bandwidth_mode_enabled,json=libraryLowBandwidthModeEnabled" json:"library_low_bandwidth_mode_enabled,omitempty"`
	LibraryLowPerfModeEnabled      *bool    `protobuf:"varint,9,opt,name=library_low_perf_mode_enabled,json=libraryLowPerfModeEnabled" json:"library_low_perf_mode_enabled,omitempty"`
	GrMode                         *int32   `protobuf:"varint,10,opt,name=gr_mode,json=grMode" json:"gr_mode,omitempty"`
}

func (x *CClientMetrics_ReportClientArgs_Notification) Reset() {
	*x = CClientMetrics_ReportClientArgs_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clientmetrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportClientArgs_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportClientArgs_Notification) ProtoMessage() {}

func (x *CClientMetrics_ReportClientArgs_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_clientmetrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportClientArgs_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportClientArgs_Notification) Descriptor() ([]byte, []int) {
	return file_service_clientmetrics_proto_rawDescGZIP(), []int{0}
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetClientArgs() []string {
	if x != nil {
		return x.ClientArgs
	}
	return nil
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetGpuWebviewRegkeyDisabled() bool {
	if x != nil && x.GpuWebviewRegkeyDisabled != nil {
		return *x.GpuWebviewRegkeyDisabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetSuppressGpuChrome() bool {
	if x != nil && x.SuppressGpuChrome != nil {
		return *x.SuppressGpuChrome
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetBrowserNotSupported() bool {
	if x != nil && x.BrowserNotSupported != nil {
		return *x.BrowserNotSupported
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetHwAccelVideoRegkeyDisabled() bool {
	if x != nil && x.HwAccelVideoRegkeyDisabled != nil {
		return *x.HwAccelVideoRegkeyDisabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetMiniModeEnabled() bool {
	if x != nil && x.MiniModeEnabled != nil {
		return *x.MiniModeEnabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetFpsCounterEnabled() bool {
	if x != nil && x.FpsCounterEnabled != nil {
		return *x.FpsCounterEnabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetLibraryLowBandwidthModeEnabled() bool {
	if x != nil && x.LibraryLowBandwidthModeEnabled != nil {
		return *x.LibraryLowBandwidthModeEnabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetLibraryLowPerfModeEnabled() bool {
	if x != nil && x.LibraryLowPerfModeEnabled != nil {
		return *x.LibraryLowPerfModeEnabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetGrMode() int32 {
	if x != nil && x.GrMode != nil {
		return *x.GrMode
	}
	return 0
}

type CClientMetrics_ReportClientError_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product *string                                                `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
	Version *string                                                `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Errors  []*CClientMetrics_ReportClientError_Notification_Error `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
}

func (x *CClientMetrics_ReportClientError_Notification) Reset() {
	*x = CClientMetrics_ReportClientError_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clientmetrics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportClientError_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportClientError_Notification) ProtoMessage() {}

func (x *CClientMetrics_ReportClientError_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_clientmetrics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportClientError_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportClientError_Notification) Descriptor() ([]byte, []int) {
	return file_service_clientmetrics_proto_rawDescGZIP(), []int{1}
}

func (x *CClientMetrics_ReportClientError_Notification) GetProduct() string {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return ""
}

func (x *CClientMetrics_ReportClientError_Notification) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *CClientMetrics_ReportClientError_Notification) GetErrors() []*CClientMetrics_ReportClientError_Notification_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type CClientMetrics_ReportClientError_Notification_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier *string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Message    *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Count      *uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Context    *string `protobuf:"bytes,4,opt,name=context" json:"context,omitempty"`
}

func (x *CClientMetrics_ReportClientError_Notification_Error) Reset() {
	*x = CClientMetrics_ReportClientError_Notification_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clientmetrics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportClientError_Notification_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportClientError_Notification_Error) ProtoMessage() {}

func (x *CClientMetrics_ReportClientError_Notification_Error) ProtoReflect() protoreflect.Message {
	mi := &file_service_clientmetrics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportClientError_Notification_Error.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportClientError_Notification_Error) Descriptor() ([]byte, []int) {
	return file_service_clientmetrics_proto_rawDescGZIP(), []int{2}
}

func (x *CClientMetrics_ReportClientError_Notification_Error) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *CClientMetrics_ReportClientError_Notification_Error) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CClientMetrics_ReportClientError_Notification_Error) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CClientMetrics_ReportClientError_Notification_Error) GetContext() string {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ""
}

type CClientMetrics_ReportLinuxStats_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlibcVersionMajor *int32  `protobuf:"varint,1,opt,name=glibc_version_major,json=glibcVersionMajor" json:"glibc_version_major,omitempty"`
	GlibcVersionMinor *int32  `protobuf:"varint,2,opt,name=glibc_version_minor,json=glibcVersionMinor" json:"glibc_version_minor,omitempty"`
	AccountType       *int32  `protobuf:"varint,3,opt,name=account_type,json=accountType" json:"account_type,omitempty"`
	LauncherType      *int32  `protobuf:"varint,4,opt,name=launcher_type,json=launcherType" json:"launcher_type,omitempty"`
	GameServerAppid   *int32  `protobuf:"varint,5,opt,name=game_server_appid,json=gameServerAppid" json:"game_server_appid,omitempty"`
	ProcessName       *string `protobuf:"bytes,6,opt,name=process_name,json=processName" json:"process_name,omitempty"`
}

func (x *CClientMetrics_ReportLinuxStats_Notification) Reset() {
	*x = CClientMetrics_ReportLinuxStats_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clientmetrics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportLinuxStats_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportLinuxStats_Notification) ProtoMessage() {}

func (x *CClientMetrics_ReportLinuxStats_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_clientmetrics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportLinuxStats_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportLinuxStats_Notification) Descriptor() ([]byte, []int) {
	return file_service_clientmetrics_proto_rawDescGZIP(), []int{3}
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetGlibcVersionMajor() int32 {
	if x != nil && x.GlibcVersionMajor != nil {
		return *x.GlibcVersionMajor
	}
	return 0
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetGlibcVersionMinor() int32 {
	if x != nil && x.GlibcVersionMinor != nil {
		return *x.GlibcVersionMinor
	}
	return 0
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetAccountType() int32 {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return 0
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetLauncherType() int32 {
	if x != nil && x.LauncherType != nil {
		return *x.LauncherType
	}
	return 0
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetGameServerAppid() int32 {
	if x != nil && x.GameServerAppid != nil {
		return *x.GameServerAppid
	}
	return 0
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

type CClientMetrics_ReportReactUsage_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product    *string                                                       `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
	Version    *string                                                       `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Routes     []*CClientMetrics_ReportReactUsage_Notification_RouteData     `protobuf:"bytes,3,rep,name=routes" json:"routes,omitempty"`
	Components []*CClientMetrics_ReportReactUsage_Notification_ComponentData `protobuf:"bytes,4,rep,name=components" json:"components,omitempty"`
	Actions    []*CClientMetrics_ReportReactUsage_Notification_ActionData    `protobuf:"bytes,5,rep,name=actions" json:"actions,omitempty"`
}

func (x *CClientMetrics_ReportReactUsage_Notification) Reset() {
	*x = CClientMetrics_ReportReactUsage_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clientmetrics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportReactUsage_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportReactUsage_Notification) ProtoMessage() {}

func (x *CClientMetrics_ReportReactUsage_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_clientmetrics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportReactUsage_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportReactUsage_Notification) Descriptor() ([]byte, []int) {
	return file_service_clientmetrics_proto_rawDescGZIP(), []int{4}
}

func (x *CClientMetrics_ReportReactUsage_Notification) GetProduct() string {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return ""
}

func (x *CClientMetrics_ReportReactUsage_Notification) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *CClientMetrics_ReportReactUsage_Notification) GetRoutes() []*CClientMetrics_ReportReactUsage_Notification_RouteData {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *CClientMetrics_ReportReactUsage_Notification) GetComponents() []*CClientMetrics_ReportReactUsage_Notification_ComponentData {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *CClientMetrics_ReportReactUsage_Notification) GetActions() []*CClientMetrics_ReportReactUsage_Notification_ActionData {
	if x != nil {
		return x.Actions
	}
	return nil
}

type CClientMetrics_ReportReactUsage_Notification_ActionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action *string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Count  *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *CClientMetrics_ReportReactUsage_Notification_ActionData) Reset() {
	*x = CClientMetrics_ReportReactUsage_Notification_ActionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clientmetrics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportReactUsage_Notification_ActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportReactUsage_Notification_ActionData) ProtoMessage() {}

func (x *CClientMetrics_ReportReactUsage_Notification_ActionData) ProtoReflect() protoreflect.Message {
	mi := &file_service_clientmetrics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportReactUsage_Notification_ActionData.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportReactUsage_Notification_ActionData) Descriptor() ([]byte, []int) {
	return file_service_clientmetrics_proto_rawDescGZIP(), []int{5}
}

func (x *CClientMetrics_ReportReactUsage_Notification_ActionData) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *CClientMetrics_ReportReactUsage_Notification_ActionData) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CClientMetrics_ReportReactUsage_Notification_ComponentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component *string `protobuf:"bytes,1,opt,name=component" json:"component,omitempty"`
	Count     *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *CClientMetrics_ReportReactUsage_Notification_ComponentData) Reset() {
	*x = CClientMetrics_ReportReactUsage_Notification_ComponentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clientmetrics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportReactUsage_Notification_ComponentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportReactUsage_Notification_ComponentData) ProtoMessage() {}

func (x *CClientMetrics_ReportReactUsage_Notification_ComponentData) ProtoReflect() protoreflect.Message {
	mi := &file_service_clientmetrics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportReactUsage_Notification_ComponentData.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportReactUsage_Notification_ComponentData) Descriptor() ([]byte, []int) {
	return file_service_clientmetrics_proto_rawDescGZIP(), []int{6}
}

func (x *CClientMetrics_ReportReactUsage_Notification_ComponentData) GetComponent() string {
	if x != nil && x.Component != nil {
		return *x.Component
	}
	return ""
}

func (x *CClientMetrics_ReportReactUsage_Notification_ComponentData) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CClientMetrics_ReportReactUsage_Notification_RouteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route *string `protobuf:"bytes,1,opt,name=route" json:"route,omitempty"`
	Count *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *CClientMetrics_ReportReactUsage_Notification_RouteData) Reset() {
	*x = CClientMetrics_ReportReactUsage_Notification_RouteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_clientmetrics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportReactUsage_Notification_RouteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportReactUsage_Notification_RouteData) ProtoMessage() {}

func (x *CClientMetrics_ReportReactUsage_Notification_RouteData) ProtoReflect() protoreflect.Message {
	mi := &file_service_clientmetrics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportReactUsage_Notification_RouteData.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportReactUsage_Notification_RouteData) Descriptor() ([]byte, []int) {
	return file_service_clientmetrics_proto_rawDescGZIP(), []int{7}
}

func (x *CClientMetrics_ReportReactUsage_Notification_RouteData) GetRoute() string {
	if x != nil && x.Route != nil {
		return *x.Route
	}
	return ""
}

func (x *CClientMetrics_ReportReactUsage_Notification_RouteData) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

var File_service_clientmetrics_proto protoreflect.FileDescriptor

var file_service_clientmetrics_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb9, 0x04, 0x0a, 0x2c, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x72, 0x67, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x67, 0x70, 0x75, 0x5f, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x72, 0x65, 0x67, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x67, 0x70, 0x75, 0x57, 0x65, 0x62, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x67, 0x6b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x70,
	0x75, 0x5f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x47, 0x70, 0x75, 0x43, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x1e, 0x68, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x6b, 0x65, 0x79, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x68,
	0x77, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x67, 0x6b, 0x65,
	0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e,
	0x69, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x66, 0x70, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x77, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x1d, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x77,
	0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x4c, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xb1, 0x01, 0x0a,
	0x2d, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x22, 0x9f, 0x01, 0x0a, 0x33, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xa5, 0x02, 0x0a, 0x2c, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x75,
	0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x6c, 0x69, 0x62, 0x63, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x67, 0x6c, 0x69, 0x62, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x6a, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x6c, 0x69, 0x62, 0x63, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x67, 0x6c, 0x69, 0x62, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x6e, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe4, 0x02, 0x0a, 0x2c, 0x43,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4f, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x5b, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x52, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x67, 0x0a, 0x37, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x70, 0x0a, 0x3a, 0x43, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x64, 0x0a, 0x36,
	0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x32, 0xce, 0x07, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x3d, 0x0a, 0x1d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70,
	0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0f, 0x2e, 0x4e,
	0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x0b, 0x2e,
	0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x17, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x70, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x1d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x20, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x1c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x76, 0x36, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x2d, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x72, 0x67, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x2e, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x2e, 0x4e, 0x6f,
	0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x0b, 0x2e, 0x4e,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x2e,
	0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x2e,
	0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65,
}

var (
	file_service_clientmetrics_proto_rawDescOnce sync.Once
	file_service_clientmetrics_proto_rawDescData = file_service_clientmetrics_proto_rawDesc
)

func file_service_clientmetrics_proto_rawDescGZIP() []byte {
	file_service_clientmetrics_proto_rawDescOnce.Do(func() {
		file_service_clientmetrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_clientmetrics_proto_rawDescData)
	})
	return file_service_clientmetrics_proto_rawDescData
}

var file_service_clientmetrics_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_service_clientmetrics_proto_goTypes = []any{
	(*CClientMetrics_ReportClientArgs_Notification)(nil),               // 0: CClientMetrics_ReportClientArgs_Notification
	(*CClientMetrics_ReportClientError_Notification)(nil),              // 1: CClientMetrics_ReportClientError_Notification
	(*CClientMetrics_ReportClientError_Notification_Error)(nil),        // 2: CClientMetrics_ReportClientError_Notification_Error
	(*CClientMetrics_ReportLinuxStats_Notification)(nil),               // 3: CClientMetrics_ReportLinuxStats_Notification
	(*CClientMetrics_ReportReactUsage_Notification)(nil),               // 4: CClientMetrics_ReportReactUsage_Notification
	(*CClientMetrics_ReportReactUsage_Notification_ActionData)(nil),    // 5: CClientMetrics_ReportReactUsage_Notification_ActionData
	(*CClientMetrics_ReportReactUsage_Notification_ComponentData)(nil), // 6: CClientMetrics_ReportReactUsage_Notification_ComponentData
	(*CClientMetrics_ReportReactUsage_Notification_RouteData)(nil),     // 7: CClientMetrics_ReportReactUsage_Notification_RouteData
	(*NotImplemented)(nil), // 8: NotImplemented
	(*NoResponse)(nil),     // 9: NoResponse
}
var file_service_clientmetrics_proto_depIdxs = []int32{
	2,  // 0: CClientMetrics_ReportClientError_Notification.errors:type_name -> CClientMetrics_ReportClientError_Notification_Error
	7,  // 1: CClientMetrics_ReportReactUsage_Notification.routes:type_name -> CClientMetrics_ReportReactUsage_Notification_RouteData
	6,  // 2: CClientMetrics_ReportReactUsage_Notification.components:type_name -> CClientMetrics_ReportReactUsage_Notification_ComponentData
	5,  // 3: CClientMetrics_ReportReactUsage_Notification.actions:type_name -> CClientMetrics_ReportReactUsage_Notification_ActionData
	8,  // 4: ClientMetrics.ClientAppInterfaceStatsReport:input_type -> NotImplemented
	8,  // 5: ClientMetrics.ClientBootstrapReport:input_type -> NotImplemented
	8,  // 6: ClientMetrics.ClientCloudAppSyncStats:input_type -> NotImplemented
	8,  // 7: ClientMetrics.ClientContentValidationReport:input_type -> NotImplemented
	8,  // 8: ClientMetrics.ClientDownloadRatesReport:input_type -> NotImplemented
	8,  // 9: ClientMetrics.ClientDownloadResponseCodeCounts:input_type -> NotImplemented
	8,  // 10: ClientMetrics.ClientIPv6ConnectivityReport:input_type -> NotImplemented
	0,  // 11: ClientMetrics.ReportClientArgs:input_type -> CClientMetrics_ReportClientArgs_Notification
	1,  // 12: ClientMetrics.ReportClientError:input_type -> CClientMetrics_ReportClientError_Notification
	8,  // 13: ClientMetrics.ReportClipRange:input_type -> NotImplemented
	8,  // 14: ClientMetrics.ReportClipShare:input_type -> NotImplemented
	8,  // 15: ClientMetrics.ReportEndGameRecording:input_type -> NotImplemented
	3,  // 16: ClientMetrics.ReportLinuxStats:input_type -> CClientMetrics_ReportLinuxStats_Notification
	4,  // 17: ClientMetrics.ReportReactUsage:input_type -> CClientMetrics_ReportReactUsage_Notification
	8,  // 18: ClientMetrics.SteamPipeWorkStatsReport:input_type -> NotImplemented
	9,  // 19: ClientMetrics.ClientAppInterfaceStatsReport:output_type -> NoResponse
	9,  // 20: ClientMetrics.ClientBootstrapReport:output_type -> NoResponse
	9,  // 21: ClientMetrics.ClientCloudAppSyncStats:output_type -> NoResponse
	9,  // 22: ClientMetrics.ClientContentValidationReport:output_type -> NoResponse
	9,  // 23: ClientMetrics.ClientDownloadRatesReport:output_type -> NoResponse
	9,  // 24: ClientMetrics.ClientDownloadResponseCodeCounts:output_type -> NoResponse
	9,  // 25: ClientMetrics.ClientIPv6ConnectivityReport:output_type -> NoResponse
	9,  // 26: ClientMetrics.ReportClientArgs:output_type -> NoResponse
	9,  // 27: ClientMetrics.ReportClientError:output_type -> NoResponse
	9,  // 28: ClientMetrics.ReportClipRange:output_type -> NoResponse
	9,  // 29: ClientMetrics.ReportClipShare:output_type -> NoResponse
	9,  // 30: ClientMetrics.ReportEndGameRecording:output_type -> NoResponse
	9,  // 31: ClientMetrics.ReportLinuxStats:output_type -> NoResponse
	9,  // 32: ClientMetrics.ReportReactUsage:output_type -> NoResponse
	9,  // 33: ClientMetrics.SteamPipeWorkStatsReport:output_type -> NoResponse
	19, // [19:34] is the sub-list for method output_type
	4,  // [4:19] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_service_clientmetrics_proto_init() }
func file_service_clientmetrics_proto_init() {
	if File_service_clientmetrics_proto != nil {
		return
	}
	file_common_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_clientmetrics_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ReportClientArgs_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clientmetrics_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ReportClientError_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clientmetrics_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ReportClientError_Notification_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clientmetrics_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ReportLinuxStats_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clientmetrics_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ReportReactUsage_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clientmetrics_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ReportReactUsage_Notification_ActionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clientmetrics_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ReportReactUsage_Notification_ComponentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_clientmetrics_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CClientMetrics_ReportReactUsage_Notification_RouteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_clientmetrics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_clientmetrics_proto_goTypes,
		DependencyIndexes: file_service_clientmetrics_proto_depIdxs,
		MessageInfos:      file_service_clientmetrics_proto_msgTypes,
	}.Build()
	File_service_clientmetrics_proto = out.File
	file_service_clientmetrics_proto_rawDesc = nil
	file_service_clientmetrics_proto_goTypes = nil
	file_service_clientmetrics_proto_depIdxs = nil
}
