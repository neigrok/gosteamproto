// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: steammessages_appoverview.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EDisplayStatus int32

const (
	EDisplayStatus_k_EDisplayStatusInvalid          EDisplayStatus = 0
	EDisplayStatus_k_EDisplayStatusLaunching        EDisplayStatus = 1
	EDisplayStatus_k_EDisplayStatusUninstalling     EDisplayStatus = 2
	EDisplayStatus_k_EDisplayStatusInstalling       EDisplayStatus = 3
	EDisplayStatus_k_EDisplayStatusRunning          EDisplayStatus = 4
	EDisplayStatus_k_EDisplayStatusValidating       EDisplayStatus = 5
	EDisplayStatus_k_EDisplayStatusUpdating         EDisplayStatus = 6
	EDisplayStatus_k_EDisplayStatusDownloading      EDisplayStatus = 7
	EDisplayStatus_k_EDisplayStatusSynchronizing    EDisplayStatus = 8
	EDisplayStatus_k_EDisplayStatusReadyToInstall   EDisplayStatus = 9
	EDisplayStatus_k_EDisplayStatusReadyToPreload   EDisplayStatus = 10
	EDisplayStatus_k_EDisplayStatusReadyToLaunch    EDisplayStatus = 11
	EDisplayStatus_k_EDisplayStatusRegionRestricted EDisplayStatus = 12
	EDisplayStatus_k_EDisplayStatusPresaleOnly      EDisplayStatus = 13
	EDisplayStatus_k_EDisplayStatusInvalidPlatform  EDisplayStatus = 14
	EDisplayStatus_k_EDisplayStatusPreloadComplete  EDisplayStatus = 16
	EDisplayStatus_k_EDisplayStatusBorrowerLocked   EDisplayStatus = 17
	EDisplayStatus_k_EDisplayStatusUpdatePaused     EDisplayStatus = 18
	EDisplayStatus_k_EDisplayStatusUpdateQueued     EDisplayStatus = 19
	EDisplayStatus_k_EDisplayStatusUpdateRequired   EDisplayStatus = 20
	EDisplayStatus_k_EDisplayStatusUpdateDisabled   EDisplayStatus = 21
	EDisplayStatus_k_EDisplayStatusDownloadPaused   EDisplayStatus = 22
	EDisplayStatus_k_EDisplayStatusDownloadQueued   EDisplayStatus = 23
	EDisplayStatus_k_EDisplayStatusDownloadRequired EDisplayStatus = 24
	EDisplayStatus_k_EDisplayStatusDownloadDisabled EDisplayStatus = 25
	EDisplayStatus_k_EDisplayStatusLicensePending   EDisplayStatus = 26
	EDisplayStatus_k_EDisplayStatusLicenseExpired   EDisplayStatus = 27
	EDisplayStatus_k_EDisplayStatusAvailForFree     EDisplayStatus = 28
	EDisplayStatus_k_EDisplayStatusAvailToBorrow    EDisplayStatus = 29
	EDisplayStatus_k_EDisplayStatusAvailGuestPass   EDisplayStatus = 30
	EDisplayStatus_k_EDisplayStatusPurchase         EDisplayStatus = 31
	EDisplayStatus_k_EDisplayStatusUnavailable      EDisplayStatus = 32
	EDisplayStatus_k_EDisplayStatusNotLaunchable    EDisplayStatus = 33
	EDisplayStatus_k_EDisplayStatusCloudError       EDisplayStatus = 34
	EDisplayStatus_k_EDisplayStatusCloudOutOfDate   EDisplayStatus = 35
	EDisplayStatus_k_EDisplayStatusTerminating      EDisplayStatus = 36
	EDisplayStatus_k_EDisplayStatusOwnerLocked      EDisplayStatus = 37
	EDisplayStatus_k_EDisplayStatusDownloadFailed   EDisplayStatus = 38
	EDisplayStatus_k_EDisplayStatusUpdateFailed     EDisplayStatus = 39
)

// Enum value maps for EDisplayStatus.
var (
	EDisplayStatus_name = map[int32]string{
		0:  "k_EDisplayStatusInvalid",
		1:  "k_EDisplayStatusLaunching",
		2:  "k_EDisplayStatusUninstalling",
		3:  "k_EDisplayStatusInstalling",
		4:  "k_EDisplayStatusRunning",
		5:  "k_EDisplayStatusValidating",
		6:  "k_EDisplayStatusUpdating",
		7:  "k_EDisplayStatusDownloading",
		8:  "k_EDisplayStatusSynchronizing",
		9:  "k_EDisplayStatusReadyToInstall",
		10: "k_EDisplayStatusReadyToPreload",
		11: "k_EDisplayStatusReadyToLaunch",
		12: "k_EDisplayStatusRegionRestricted",
		13: "k_EDisplayStatusPresaleOnly",
		14: "k_EDisplayStatusInvalidPlatform",
		16: "k_EDisplayStatusPreloadComplete",
		17: "k_EDisplayStatusBorrowerLocked",
		18: "k_EDisplayStatusUpdatePaused",
		19: "k_EDisplayStatusUpdateQueued",
		20: "k_EDisplayStatusUpdateRequired",
		21: "k_EDisplayStatusUpdateDisabled",
		22: "k_EDisplayStatusDownloadPaused",
		23: "k_EDisplayStatusDownloadQueued",
		24: "k_EDisplayStatusDownloadRequired",
		25: "k_EDisplayStatusDownloadDisabled",
		26: "k_EDisplayStatusLicensePending",
		27: "k_EDisplayStatusLicenseExpired",
		28: "k_EDisplayStatusAvailForFree",
		29: "k_EDisplayStatusAvailToBorrow",
		30: "k_EDisplayStatusAvailGuestPass",
		31: "k_EDisplayStatusPurchase",
		32: "k_EDisplayStatusUnavailable",
		33: "k_EDisplayStatusNotLaunchable",
		34: "k_EDisplayStatusCloudError",
		35: "k_EDisplayStatusCloudOutOfDate",
		36: "k_EDisplayStatusTerminating",
		37: "k_EDisplayStatusOwnerLocked",
		38: "k_EDisplayStatusDownloadFailed",
		39: "k_EDisplayStatusUpdateFailed",
	}
	EDisplayStatus_value = map[string]int32{
		"k_EDisplayStatusInvalid":          0,
		"k_EDisplayStatusLaunching":        1,
		"k_EDisplayStatusUninstalling":     2,
		"k_EDisplayStatusInstalling":       3,
		"k_EDisplayStatusRunning":          4,
		"k_EDisplayStatusValidating":       5,
		"k_EDisplayStatusUpdating":         6,
		"k_EDisplayStatusDownloading":      7,
		"k_EDisplayStatusSynchronizing":    8,
		"k_EDisplayStatusReadyToInstall":   9,
		"k_EDisplayStatusReadyToPreload":   10,
		"k_EDisplayStatusReadyToLaunch":    11,
		"k_EDisplayStatusRegionRestricted": 12,
		"k_EDisplayStatusPresaleOnly":      13,
		"k_EDisplayStatusInvalidPlatform":  14,
		"k_EDisplayStatusPreloadComplete":  16,
		"k_EDisplayStatusBorrowerLocked":   17,
		"k_EDisplayStatusUpdatePaused":     18,
		"k_EDisplayStatusUpdateQueued":     19,
		"k_EDisplayStatusUpdateRequired":   20,
		"k_EDisplayStatusUpdateDisabled":   21,
		"k_EDisplayStatusDownloadPaused":   22,
		"k_EDisplayStatusDownloadQueued":   23,
		"k_EDisplayStatusDownloadRequired": 24,
		"k_EDisplayStatusDownloadDisabled": 25,
		"k_EDisplayStatusLicensePending":   26,
		"k_EDisplayStatusLicenseExpired":   27,
		"k_EDisplayStatusAvailForFree":     28,
		"k_EDisplayStatusAvailToBorrow":    29,
		"k_EDisplayStatusAvailGuestPass":   30,
		"k_EDisplayStatusPurchase":         31,
		"k_EDisplayStatusUnavailable":      32,
		"k_EDisplayStatusNotLaunchable":    33,
		"k_EDisplayStatusCloudError":       34,
		"k_EDisplayStatusCloudOutOfDate":   35,
		"k_EDisplayStatusTerminating":      36,
		"k_EDisplayStatusOwnerLocked":      37,
		"k_EDisplayStatusDownloadFailed":   38,
		"k_EDisplayStatusUpdateFailed":     39,
	}
)

func (x EDisplayStatus) Enum() *EDisplayStatus {
	p := new(EDisplayStatus)
	*p = x
	return p
}

func (x EDisplayStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDisplayStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_appoverview_proto_enumTypes[0].Descriptor()
}

func (EDisplayStatus) Type() protoreflect.EnumType {
	return &file_steammessages_appoverview_proto_enumTypes[0]
}

func (x EDisplayStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDisplayStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDisplayStatus(num)
	return nil
}

// Deprecated: Use EDisplayStatus.Descriptor instead.
func (EDisplayStatus) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_appoverview_proto_rawDescGZIP(), []int{0}
}

type EAppCloudStatus int32

const (
	EAppCloudStatus_k_EAppCloudStatusInvalid          EAppCloudStatus = 0
	EAppCloudStatus_k_EAppCloudStatusDisabled         EAppCloudStatus = 1
	EAppCloudStatus_k_EAppCloudStatusUnknown          EAppCloudStatus = 2
	EAppCloudStatus_k_EAppCloudStatusSynchronized     EAppCloudStatus = 3
	EAppCloudStatus_k_EAppCloudStatusChecking         EAppCloudStatus = 4
	EAppCloudStatus_k_EAppCloudStatusOutOfSync        EAppCloudStatus = 5
	EAppCloudStatus_k_EAppCloudStatusUploading        EAppCloudStatus = 6
	EAppCloudStatus_k_EAppCloudStatusDownloading      EAppCloudStatus = 7
	EAppCloudStatus_k_EAppCloudStatusSyncFailed       EAppCloudStatus = 8
	EAppCloudStatus_k_EAppCloudStatusConflict         EAppCloudStatus = 9
	EAppCloudStatus_k_EAppCloudStatusPendingElsewhere EAppCloudStatus = 10
)

// Enum value maps for EAppCloudStatus.
var (
	EAppCloudStatus_name = map[int32]string{
		0:  "k_EAppCloudStatusInvalid",
		1:  "k_EAppCloudStatusDisabled",
		2:  "k_EAppCloudStatusUnknown",
		3:  "k_EAppCloudStatusSynchronized",
		4:  "k_EAppCloudStatusChecking",
		5:  "k_EAppCloudStatusOutOfSync",
		6:  "k_EAppCloudStatusUploading",
		7:  "k_EAppCloudStatusDownloading",
		8:  "k_EAppCloudStatusSyncFailed",
		9:  "k_EAppCloudStatusConflict",
		10: "k_EAppCloudStatusPendingElsewhere",
	}
	EAppCloudStatus_value = map[string]int32{
		"k_EAppCloudStatusInvalid":          0,
		"k_EAppCloudStatusDisabled":         1,
		"k_EAppCloudStatusUnknown":          2,
		"k_EAppCloudStatusSynchronized":     3,
		"k_EAppCloudStatusChecking":         4,
		"k_EAppCloudStatusOutOfSync":        5,
		"k_EAppCloudStatusUploading":        6,
		"k_EAppCloudStatusDownloading":      7,
		"k_EAppCloudStatusSyncFailed":       8,
		"k_EAppCloudStatusConflict":         9,
		"k_EAppCloudStatusPendingElsewhere": 10,
	}
)

func (x EAppCloudStatus) Enum() *EAppCloudStatus {
	p := new(EAppCloudStatus)
	*p = x
	return p
}

func (x EAppCloudStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAppCloudStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_appoverview_proto_enumTypes[1].Descriptor()
}

func (EAppCloudStatus) Type() protoreflect.EnumType {
	return &file_steammessages_appoverview_proto_enumTypes[1]
}

func (x EAppCloudStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAppCloudStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAppCloudStatus(num)
	return nil
}

// Deprecated: Use EAppCloudStatus.Descriptor instead.
func (EAppCloudStatus) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_appoverview_proto_rawDescGZIP(), []int{1}
}

type EAppControllerSupportLevel int32

const (
	EAppControllerSupportLevel_k_EAppControllerSupportLevelNone    EAppControllerSupportLevel = 0
	EAppControllerSupportLevel_k_EAppControllerSupportLevelPartial EAppControllerSupportLevel = 1
	EAppControllerSupportLevel_k_EAppControllerSupportLevelFull    EAppControllerSupportLevel = 2
)

// Enum value maps for EAppControllerSupportLevel.
var (
	EAppControllerSupportLevel_name = map[int32]string{
		0: "k_EAppControllerSupportLevelNone",
		1: "k_EAppControllerSupportLevelPartial",
		2: "k_EAppControllerSupportLevelFull",
	}
	EAppControllerSupportLevel_value = map[string]int32{
		"k_EAppControllerSupportLevelNone":    0,
		"k_EAppControllerSupportLevelPartial": 1,
		"k_EAppControllerSupportLevelFull":    2,
	}
)

func (x EAppControllerSupportLevel) Enum() *EAppControllerSupportLevel {
	p := new(EAppControllerSupportLevel)
	*p = x
	return p
}

func (x EAppControllerSupportLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAppControllerSupportLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_appoverview_proto_enumTypes[2].Descriptor()
}

func (EAppControllerSupportLevel) Type() protoreflect.EnumType {
	return &file_steammessages_appoverview_proto_enumTypes[2]
}

func (x EAppControllerSupportLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAppControllerSupportLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAppControllerSupportLevel(num)
	return nil
}

// Deprecated: Use EAppControllerSupportLevel.Descriptor instead.
func (EAppControllerSupportLevel) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_appoverview_proto_rawDescGZIP(), []int{2}
}

type EAppGamepadGyroTrackpadSupportLevel int32

const (
	EAppGamepadGyroTrackpadSupportLevel_k_EAppGamepadGyroTrackpadSupportLevelUnknown      EAppGamepadGyroTrackpadSupportLevel = -1
	EAppGamepadGyroTrackpadSupportLevel_k_EAppGamepadGyroTrackpadSupportLevelNoGamepad    EAppGamepadGyroTrackpadSupportLevel = 0
	EAppGamepadGyroTrackpadSupportLevel_k_EAppGamepadGyroTrackpadSupportLevelGamepad      EAppGamepadGyroTrackpadSupportLevel = 1
	EAppGamepadGyroTrackpadSupportLevel_k_EAppGamepadGyroTrackpadSupportLevelSimultaneous EAppGamepadGyroTrackpadSupportLevel = 2
)

// Enum value maps for EAppGamepadGyroTrackpadSupportLevel.
var (
	EAppGamepadGyroTrackpadSupportLevel_name = map[int32]string{
		-1: "k_EAppGamepadGyroTrackpadSupportLevelUnknown",
		0:  "k_EAppGamepadGyroTrackpadSupportLevelNoGamepad",
		1:  "k_EAppGamepadGyroTrackpadSupportLevelGamepad",
		2:  "k_EAppGamepadGyroTrackpadSupportLevelSimultaneous",
	}
	EAppGamepadGyroTrackpadSupportLevel_value = map[string]int32{
		"k_EAppGamepadGyroTrackpadSupportLevelUnknown":      -1,
		"k_EAppGamepadGyroTrackpadSupportLevelNoGamepad":    0,
		"k_EAppGamepadGyroTrackpadSupportLevelGamepad":      1,
		"k_EAppGamepadGyroTrackpadSupportLevelSimultaneous": 2,
	}
)

func (x EAppGamepadGyroTrackpadSupportLevel) Enum() *EAppGamepadGyroTrackpadSupportLevel {
	p := new(EAppGamepadGyroTrackpadSupportLevel)
	*p = x
	return p
}

func (x EAppGamepadGyroTrackpadSupportLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAppGamepadGyroTrackpadSupportLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_appoverview_proto_enumTypes[3].Descriptor()
}

func (EAppGamepadGyroTrackpadSupportLevel) Type() protoreflect.EnumType {
	return &file_steammessages_appoverview_proto_enumTypes[3]
}

func (x EAppGamepadGyroTrackpadSupportLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAppGamepadGyroTrackpadSupportLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAppGamepadGyroTrackpadSupportLevel(num)
	return nil
}

// Deprecated: Use EAppGamepadGyroTrackpadSupportLevel.Descriptor instead.
func (EAppGamepadGyroTrackpadSupportLevel) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_appoverview_proto_rawDescGZIP(), []int{3}
}

type EAppHDRSupport int32

const (
	EAppHDRSupport_k_EHDRSupport_Unknown                EAppHDRSupport = 0
	EAppHDRSupport_k_EHDRSupport_SDR                    EAppHDRSupport = 1
	EAppHDRSupport_k_EHDRSupport_HDR                    EAppHDRSupport = 2
	EAppHDRSupport_k_EHDRSupport_HDR_Broken             EAppHDRSupport = 3
	EAppHDRSupport_k_EHDRSupport_HDR_RequiresUserAction EAppHDRSupport = 4
)

// Enum value maps for EAppHDRSupport.
var (
	EAppHDRSupport_name = map[int32]string{
		0: "k_EHDRSupport_Unknown",
		1: "k_EHDRSupport_SDR",
		2: "k_EHDRSupport_HDR",
		3: "k_EHDRSupport_HDR_Broken",
		4: "k_EHDRSupport_HDR_RequiresUserAction",
	}
	EAppHDRSupport_value = map[string]int32{
		"k_EHDRSupport_Unknown":                0,
		"k_EHDRSupport_SDR":                    1,
		"k_EHDRSupport_HDR":                    2,
		"k_EHDRSupport_HDR_Broken":             3,
		"k_EHDRSupport_HDR_RequiresUserAction": 4,
	}
)

func (x EAppHDRSupport) Enum() *EAppHDRSupport {
	p := new(EAppHDRSupport)
	*p = x
	return p
}

func (x EAppHDRSupport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAppHDRSupport) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_appoverview_proto_enumTypes[4].Descriptor()
}

func (EAppHDRSupport) Type() protoreflect.EnumType {
	return &file_steammessages_appoverview_proto_enumTypes[4]
}

func (x EAppHDRSupport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAppHDRSupport) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAppHDRSupport(num)
	return nil
}

// Deprecated: Use EAppHDRSupport.Descriptor instead.
func (EAppHDRSupport) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_appoverview_proto_rawDescGZIP(), []int{4}
}

type CAppOverview_PerClientData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clientid                        *uint64         `protobuf:"varint,1,opt,name=clientid,def=0" json:"clientid,omitempty"`
	ClientName                      *string         `protobuf:"bytes,2,opt,name=client_name,json=clientName" json:"client_name,omitempty"`
	DisplayStatus                   *EDisplayStatus `protobuf:"varint,3,opt,name=display_status,json=displayStatus,enum=EDisplayStatus,def=0" json:"display_status,omitempty"`
	StatusPercentage                *uint32         `protobuf:"varint,4,opt,name=status_percentage,json=statusPercentage,def=0" json:"status_percentage,omitempty"`
	ActiveBeta                      *string         `protobuf:"bytes,5,opt,name=active_beta,json=activeBeta" json:"active_beta,omitempty"`
	Installed                       *bool           `protobuf:"varint,6,opt,name=installed" json:"installed,omitempty"`
	BytesDownloaded                 *uint64         `protobuf:"varint,7,opt,name=bytes_downloaded,json=bytesDownloaded,def=0" json:"bytes_downloaded,omitempty"`
	BytesTotal                      *uint64         `protobuf:"varint,8,opt,name=bytes_total,json=bytesTotal,def=0" json:"bytes_total,omitempty"`
	StreamingToLocalClient          *bool           `protobuf:"varint,9,opt,name=streaming_to_local_client,json=streamingToLocalClient" json:"streaming_to_local_client,omitempty"`
	IsAvailableOnCurrentPlatform    *bool           `protobuf:"varint,10,opt,name=is_available_on_current_platform,json=isAvailableOnCurrentPlatform" json:"is_available_on_current_platform,omitempty"`
	IsInvalidOsType                 *bool           `protobuf:"varint,11,opt,name=is_invalid_os_type,json=isInvalidOsType" json:"is_invalid_os_type,omitempty"`
	PlaytimeLeft                    *uint32         `protobuf:"varint,12,opt,name=playtime_left,json=playtimeLeft" json:"playtime_left,omitempty"`
	UpdateAvailableButDisabledByApp *bool           `protobuf:"varint,14,opt,name=update_available_but_disabled_by_app,json=updateAvailableButDisabledByApp" json:"update_available_but_disabled_by_app,omitempty"`
}

// Default values for CAppOverview_PerClientData fields.
const (
	Default_CAppOverview_PerClientData_Clientid         = uint64(0)
	Default_CAppOverview_PerClientData_DisplayStatus    = EDisplayStatus_k_EDisplayStatusInvalid
	Default_CAppOverview_PerClientData_StatusPercentage = uint32(0)
	Default_CAppOverview_PerClientData_BytesDownloaded  = uint64(0)
	Default_CAppOverview_PerClientData_BytesTotal       = uint64(0)
)

func (x *CAppOverview_PerClientData) Reset() {
	*x = CAppOverview_PerClientData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_appoverview_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAppOverview_PerClientData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAppOverview_PerClientData) ProtoMessage() {}

func (x *CAppOverview_PerClientData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_appoverview_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAppOverview_PerClientData.ProtoReflect.Descriptor instead.
func (*CAppOverview_PerClientData) Descriptor() ([]byte, []int) {
	return file_steammessages_appoverview_proto_rawDescGZIP(), []int{0}
}

func (x *CAppOverview_PerClientData) GetClientid() uint64 {
	if x != nil && x.Clientid != nil {
		return *x.Clientid
	}
	return Default_CAppOverview_PerClientData_Clientid
}

func (x *CAppOverview_PerClientData) GetClientName() string {
	if x != nil && x.ClientName != nil {
		return *x.ClientName
	}
	return ""
}

func (x *CAppOverview_PerClientData) GetDisplayStatus() EDisplayStatus {
	if x != nil && x.DisplayStatus != nil {
		return *x.DisplayStatus
	}
	return Default_CAppOverview_PerClientData_DisplayStatus
}

func (x *CAppOverview_PerClientData) GetStatusPercentage() uint32 {
	if x != nil && x.StatusPercentage != nil {
		return *x.StatusPercentage
	}
	return Default_CAppOverview_PerClientData_StatusPercentage
}

func (x *CAppOverview_PerClientData) GetActiveBeta() string {
	if x != nil && x.ActiveBeta != nil {
		return *x.ActiveBeta
	}
	return ""
}

func (x *CAppOverview_PerClientData) GetInstalled() bool {
	if x != nil && x.Installed != nil {
		return *x.Installed
	}
	return false
}

func (x *CAppOverview_PerClientData) GetBytesDownloaded() uint64 {
	if x != nil && x.BytesDownloaded != nil {
		return *x.BytesDownloaded
	}
	return Default_CAppOverview_PerClientData_BytesDownloaded
}

func (x *CAppOverview_PerClientData) GetBytesTotal() uint64 {
	if x != nil && x.BytesTotal != nil {
		return *x.BytesTotal
	}
	return Default_CAppOverview_PerClientData_BytesTotal
}

func (x *CAppOverview_PerClientData) GetStreamingToLocalClient() bool {
	if x != nil && x.StreamingToLocalClient != nil {
		return *x.StreamingToLocalClient
	}
	return false
}

func (x *CAppOverview_PerClientData) GetIsAvailableOnCurrentPlatform() bool {
	if x != nil && x.IsAvailableOnCurrentPlatform != nil {
		return *x.IsAvailableOnCurrentPlatform
	}
	return false
}

func (x *CAppOverview_PerClientData) GetIsInvalidOsType() bool {
	if x != nil && x.IsInvalidOsType != nil {
		return *x.IsInvalidOsType
	}
	return false
}

func (x *CAppOverview_PerClientData) GetPlaytimeLeft() uint32 {
	if x != nil && x.PlaytimeLeft != nil {
		return *x.PlaytimeLeft
	}
	return 0
}

func (x *CAppOverview_PerClientData) GetUpdateAvailableButDisabledByApp() bool {
	if x != nil && x.UpdateAvailableButDisabledByApp != nil {
		return *x.UpdateAvailableButDisabledByApp
	}
	return false
}

type CAppOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid                        *uint32                       `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	DisplayName                  *string                       `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	VisibleInGameList            *bool                         `protobuf:"varint,4,opt,name=visible_in_game_list,json=visibleInGameList" json:"visible_in_game_list,omitempty"`
	SubscribedTo                 *bool                         `protobuf:"varint,5,opt,name=subscribed_to,json=subscribedTo" json:"subscribed_to,omitempty"`
	SortAs                       *string                       `protobuf:"bytes,6,opt,name=sort_as,json=sortAs" json:"sort_as,omitempty"`
	AppType                      *EProtoAppType                `protobuf:"varint,7,opt,name=app_type,json=appType,enum=EProtoAppType,def=0" json:"app_type,omitempty"`
	MruIndex                     *uint32                       `protobuf:"varint,13,opt,name=mru_index,json=mruIndex" json:"mru_index,omitempty"`
	RtRecentActivityTime         *uint32                       `protobuf:"varint,14,opt,name=rt_recent_activity_time,json=rtRecentActivityTime,def=0" json:"rt_recent_activity_time,omitempty"`
	MinutesPlaytimeForever       *uint32                       `protobuf:"varint,16,opt,name=minutes_playtime_forever,json=minutesPlaytimeForever,def=0" json:"minutes_playtime_forever,omitempty"`
	MinutesPlaytimeLastTwoWeeks  *uint32                       `protobuf:"varint,17,opt,name=minutes_playtime_last_two_weeks,json=minutesPlaytimeLastTwoWeeks,def=0" json:"minutes_playtime_last_two_weeks,omitempty"`
	RtLastTimePlayed             *uint32                       `protobuf:"varint,18,opt,name=rt_last_time_played,json=rtLastTimePlayed,def=0" json:"rt_last_time_played,omitempty"`
	StoreTag                     []uint32                      `protobuf:"varint,19,rep,name=store_tag,json=storeTag" json:"store_tag,omitempty"`
	StoreCategory                []uint32                      `protobuf:"varint,23,rep,name=store_category,json=storeCategory" json:"store_category,omitempty"`
	RtOriginalReleaseDate        *uint32                       `protobuf:"varint,25,opt,name=rt_original_release_date,json=rtOriginalReleaseDate,def=0" json:"rt_original_release_date,omitempty"`
	RtSteamReleaseDate           *uint32                       `protobuf:"varint,26,opt,name=rt_steam_release_date,json=rtSteamReleaseDate,def=0" json:"rt_steam_release_date,omitempty"`
	IconHash                     *string                       `protobuf:"bytes,27,opt,name=icon_hash,json=iconHash" json:"icon_hash,omitempty"`
	XboxControllerSupport        *EAppControllerSupportLevel   `protobuf:"varint,31,opt,name=xbox_controller_support,json=xboxControllerSupport,enum=EAppControllerSupportLevel,def=0" json:"xbox_controller_support,omitempty"`
	VrSupported                  *bool                         `protobuf:"varint,32,opt,name=vr_supported,json=vrSupported" json:"vr_supported,omitempty"`
	MetacriticScore              *uint32                       `protobuf:"varint,36,opt,name=metacritic_score,json=metacriticScore" json:"metacritic_score,omitempty"`
	SizeOnDisk                   *uint64                       `protobuf:"varint,37,opt,name=size_on_disk,json=sizeOnDisk" json:"size_on_disk,omitempty"`
	ThirdPartyMod                *bool                         `protobuf:"varint,38,opt,name=third_party_mod,json=thirdPartyMod" json:"third_party_mod,omitempty"`
	IconData                     *string                       `protobuf:"bytes,39,opt,name=icon_data,json=iconData" json:"icon_data,omitempty"`
	IconDataFormat               *string                       `protobuf:"bytes,40,opt,name=icon_data_format,json=iconDataFormat" json:"icon_data_format,omitempty"`
	Gameid                       *string                       `protobuf:"bytes,41,opt,name=gameid" json:"gameid,omitempty"`
	LibraryCapsuleFilename       *string                       `protobuf:"bytes,42,opt,name=library_capsule_filename,json=libraryCapsuleFilename" json:"library_capsule_filename,omitempty"`
	PerClientData                []*CAppOverview_PerClientData `protobuf:"bytes,43,rep,name=per_client_data,json=perClientData" json:"per_client_data,omitempty"`
	MostAvailableClientid        *uint64                       `protobuf:"varint,44,opt,name=most_available_clientid,json=mostAvailableClientid,def=0" json:"most_available_clientid,omitempty"`
	SelectedClientid             *uint64                       `protobuf:"varint,45,opt,name=selected_clientid,json=selectedClientid,def=0" json:"selected_clientid,omitempty"`
	RtStoreAssetMtime            *uint32                       `protobuf:"varint,46,opt,name=rt_store_asset_mtime,json=rtStoreAssetMtime" json:"rt_store_asset_mtime,omitempty"`
	RtCustomImageMtime           *uint32                       `protobuf:"varint,47,opt,name=rt_custom_image_mtime,json=rtCustomImageMtime" json:"rt_custom_image_mtime,omitempty"`
	OptionalParentAppId          *uint32                       `protobuf:"varint,48,opt,name=optional_parent_app_id,json=optionalParentAppId" json:"optional_parent_app_id,omitempty"`
	OwnerAccountId               *uint32                       `protobuf:"varint,49,opt,name=owner_account_id,json=ownerAccountId" json:"owner_account_id,omitempty"`
	ReviewScoreWithBombs         *uint32                       `protobuf:"varint,53,opt,name=review_score_with_bombs,json=reviewScoreWithBombs,def=0" json:"review_score_with_bombs,omitempty"`
	ReviewPercentageWithBombs    *uint32                       `protobuf:"varint,54,opt,name=review_percentage_with_bombs,json=reviewPercentageWithBombs,def=0" json:"review_percentage_with_bombs,omitempty"`
	ReviewScoreWithoutBombs      *uint32                       `protobuf:"varint,55,opt,name=review_score_without_bombs,json=reviewScoreWithoutBombs,def=0" json:"review_score_without_bombs,omitempty"`
	ReviewPercentageWithoutBombs *uint32                       `protobuf:"varint,56,opt,name=review_percentage_without_bombs,json=reviewPercentageWithoutBombs,def=0" json:"review_percentage_without_bombs,omitempty"`
	LibraryId                    *string                       `protobuf:"bytes,57,opt,name=library_id,json=libraryId" json:"library_id,omitempty"`
	VrOnly                       *bool                         `protobuf:"varint,58,opt,name=vr_only,json=vrOnly" json:"vr_only,omitempty"`
	MastersubAppid               *uint32                       `protobuf:"varint,59,opt,name=mastersub_appid,json=mastersubAppid" json:"mastersub_appid,omitempty"`
	MastersubIncludedwithLogo    *string                       `protobuf:"bytes,60,opt,name=mastersub_includedwith_logo,json=mastersubIncludedwithLogo" json:"mastersub_includedwith_logo,omitempty"`
	SiteLicenseSiteName          *string                       `protobuf:"bytes,62,opt,name=site_license_site_name,json=siteLicenseSiteName" json:"site_license_site_name,omitempty"`
	ShortcutOverrideAppid        *uint32                       `protobuf:"varint,63,opt,name=shortcut_override_appid,json=shortcutOverrideAppid" json:"shortcut_override_appid,omitempty"`
	RtLastTimeLocallyPlayed      *uint32                       `protobuf:"varint,65,opt,name=rt_last_time_locally_played,json=rtLastTimeLocallyPlayed" json:"rt_last_time_locally_played,omitempty"`
	RtPurchasedTime              *uint32                       `protobuf:"varint,66,opt,name=rt_purchased_time,json=rtPurchasedTime" json:"rt_purchased_time,omitempty"`
	HeaderFilename               *string                       `protobuf:"bytes,67,opt,name=header_filename,json=headerFilename" json:"header_filename,omitempty"`
	LocalCacheVersion            *uint32                       `protobuf:"varint,68,opt,name=local_cache_version,json=localCacheVersion" json:"local_cache_version,omitempty"`
	NumberOfCopies               *uint32                       `protobuf:"varint,72,opt,name=number_of_copies,json=numberOfCopies,def=1" json:"number_of_copies,omitempty"`
	SteamHwCompatCategoryPacked  *uint32                       `protobuf:"varint,73,opt,name=steam_hw_compat_category_packed,json=steamHwCompatCategoryPacked,def=0" json:"steam_hw_compat_category_packed,omitempty"`
	AlbumCoverHash               *string                       `protobuf:"bytes,74,opt,name=album_cover_hash,json=albumCoverHash" json:"album_cover_hash,omitempty"`
}

// Default values for CAppOverview fields.
const (
	Default_CAppOverview_AppType                      = EProtoAppType_k_EAppTypeInvalid
	Default_CAppOverview_RtRecentActivityTime         = uint32(0)
	Default_CAppOverview_MinutesPlaytimeForever       = uint32(0)
	Default_CAppOverview_MinutesPlaytimeLastTwoWeeks  = uint32(0)
	Default_CAppOverview_RtLastTimePlayed             = uint32(0)
	Default_CAppOverview_RtOriginalReleaseDate        = uint32(0)
	Default_CAppOverview_RtSteamReleaseDate           = uint32(0)
	Default_CAppOverview_XboxControllerSupport        = EAppControllerSupportLevel_k_EAppControllerSupportLevelNone
	Default_CAppOverview_MostAvailableClientid        = uint64(0)
	Default_CAppOverview_SelectedClientid             = uint64(0)
	Default_CAppOverview_ReviewScoreWithBombs         = uint32(0)
	Default_CAppOverview_ReviewPercentageWithBombs    = uint32(0)
	Default_CAppOverview_ReviewScoreWithoutBombs      = uint32(0)
	Default_CAppOverview_ReviewPercentageWithoutBombs = uint32(0)
	Default_CAppOverview_NumberOfCopies               = uint32(1)
	Default_CAppOverview_SteamHwCompatCategoryPacked  = uint32(0)
)

func (x *CAppOverview) Reset() {
	*x = CAppOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_appoverview_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAppOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAppOverview) ProtoMessage() {}

func (x *CAppOverview) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_appoverview_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAppOverview.ProtoReflect.Descriptor instead.
func (*CAppOverview) Descriptor() ([]byte, []int) {
	return file_steammessages_appoverview_proto_rawDescGZIP(), []int{1}
}

func (x *CAppOverview) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CAppOverview) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *CAppOverview) GetVisibleInGameList() bool {
	if x != nil && x.VisibleInGameList != nil {
		return *x.VisibleInGameList
	}
	return false
}

func (x *CAppOverview) GetSubscribedTo() bool {
	if x != nil && x.SubscribedTo != nil {
		return *x.SubscribedTo
	}
	return false
}

func (x *CAppOverview) GetSortAs() string {
	if x != nil && x.SortAs != nil {
		return *x.SortAs
	}
	return ""
}

func (x *CAppOverview) GetAppType() EProtoAppType {
	if x != nil && x.AppType != nil {
		return *x.AppType
	}
	return Default_CAppOverview_AppType
}

func (x *CAppOverview) GetMruIndex() uint32 {
	if x != nil && x.MruIndex != nil {
		return *x.MruIndex
	}
	return 0
}

func (x *CAppOverview) GetRtRecentActivityTime() uint32 {
	if x != nil && x.RtRecentActivityTime != nil {
		return *x.RtRecentActivityTime
	}
	return Default_CAppOverview_RtRecentActivityTime
}

func (x *CAppOverview) GetMinutesPlaytimeForever() uint32 {
	if x != nil && x.MinutesPlaytimeForever != nil {
		return *x.MinutesPlaytimeForever
	}
	return Default_CAppOverview_MinutesPlaytimeForever
}

func (x *CAppOverview) GetMinutesPlaytimeLastTwoWeeks() uint32 {
	if x != nil && x.MinutesPlaytimeLastTwoWeeks != nil {
		return *x.MinutesPlaytimeLastTwoWeeks
	}
	return Default_CAppOverview_MinutesPlaytimeLastTwoWeeks
}

func (x *CAppOverview) GetRtLastTimePlayed() uint32 {
	if x != nil && x.RtLastTimePlayed != nil {
		return *x.RtLastTimePlayed
	}
	return Default_CAppOverview_RtLastTimePlayed
}

func (x *CAppOverview) GetStoreTag() []uint32 {
	if x != nil {
		return x.StoreTag
	}
	return nil
}

func (x *CAppOverview) GetStoreCategory() []uint32 {
	if x != nil {
		return x.StoreCategory
	}
	return nil
}

func (x *CAppOverview) GetRtOriginalReleaseDate() uint32 {
	if x != nil && x.RtOriginalReleaseDate != nil {
		return *x.RtOriginalReleaseDate
	}
	return Default_CAppOverview_RtOriginalReleaseDate
}

func (x *CAppOverview) GetRtSteamReleaseDate() uint32 {
	if x != nil && x.RtSteamReleaseDate != nil {
		return *x.RtSteamReleaseDate
	}
	return Default_CAppOverview_RtSteamReleaseDate
}

func (x *CAppOverview) GetIconHash() string {
	if x != nil && x.IconHash != nil {
		return *x.IconHash
	}
	return ""
}

func (x *CAppOverview) GetXboxControllerSupport() EAppControllerSupportLevel {
	if x != nil && x.XboxControllerSupport != nil {
		return *x.XboxControllerSupport
	}
	return Default_CAppOverview_XboxControllerSupport
}

func (x *CAppOverview) GetVrSupported() bool {
	if x != nil && x.VrSupported != nil {
		return *x.VrSupported
	}
	return false
}

func (x *CAppOverview) GetMetacriticScore() uint32 {
	if x != nil && x.MetacriticScore != nil {
		return *x.MetacriticScore
	}
	return 0
}

func (x *CAppOverview) GetSizeOnDisk() uint64 {
	if x != nil && x.SizeOnDisk != nil {
		return *x.SizeOnDisk
	}
	return 0
}

func (x *CAppOverview) GetThirdPartyMod() bool {
	if x != nil && x.ThirdPartyMod != nil {
		return *x.ThirdPartyMod
	}
	return false
}

func (x *CAppOverview) GetIconData() string {
	if x != nil && x.IconData != nil {
		return *x.IconData
	}
	return ""
}

func (x *CAppOverview) GetIconDataFormat() string {
	if x != nil && x.IconDataFormat != nil {
		return *x.IconDataFormat
	}
	return ""
}

func (x *CAppOverview) GetGameid() string {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return ""
}

func (x *CAppOverview) GetLibraryCapsuleFilename() string {
	if x != nil && x.LibraryCapsuleFilename != nil {
		return *x.LibraryCapsuleFilename
	}
	return ""
}

func (x *CAppOverview) GetPerClientData() []*CAppOverview_PerClientData {
	if x != nil {
		return x.PerClientData
	}
	return nil
}

func (x *CAppOverview) GetMostAvailableClientid() uint64 {
	if x != nil && x.MostAvailableClientid != nil {
		return *x.MostAvailableClientid
	}
	return Default_CAppOverview_MostAvailableClientid
}

func (x *CAppOverview) GetSelectedClientid() uint64 {
	if x != nil && x.SelectedClientid != nil {
		return *x.SelectedClientid
	}
	return Default_CAppOverview_SelectedClientid
}

func (x *CAppOverview) GetRtStoreAssetMtime() uint32 {
	if x != nil && x.RtStoreAssetMtime != nil {
		return *x.RtStoreAssetMtime
	}
	return 0
}

func (x *CAppOverview) GetRtCustomImageMtime() uint32 {
	if x != nil && x.RtCustomImageMtime != nil {
		return *x.RtCustomImageMtime
	}
	return 0
}

func (x *CAppOverview) GetOptionalParentAppId() uint32 {
	if x != nil && x.OptionalParentAppId != nil {
		return *x.OptionalParentAppId
	}
	return 0
}

func (x *CAppOverview) GetOwnerAccountId() uint32 {
	if x != nil && x.OwnerAccountId != nil {
		return *x.OwnerAccountId
	}
	return 0
}

func (x *CAppOverview) GetReviewScoreWithBombs() uint32 {
	if x != nil && x.ReviewScoreWithBombs != nil {
		return *x.ReviewScoreWithBombs
	}
	return Default_CAppOverview_ReviewScoreWithBombs
}

func (x *CAppOverview) GetReviewPercentageWithBombs() uint32 {
	if x != nil && x.ReviewPercentageWithBombs != nil {
		return *x.ReviewPercentageWithBombs
	}
	return Default_CAppOverview_ReviewPercentageWithBombs
}

func (x *CAppOverview) GetReviewScoreWithoutBombs() uint32 {
	if x != nil && x.ReviewScoreWithoutBombs != nil {
		return *x.ReviewScoreWithoutBombs
	}
	return Default_CAppOverview_ReviewScoreWithoutBombs
}

func (x *CAppOverview) GetReviewPercentageWithoutBombs() uint32 {
	if x != nil && x.ReviewPercentageWithoutBombs != nil {
		return *x.ReviewPercentageWithoutBombs
	}
	return Default_CAppOverview_ReviewPercentageWithoutBombs
}

func (x *CAppOverview) GetLibraryId() string {
	if x != nil && x.LibraryId != nil {
		return *x.LibraryId
	}
	return ""
}

func (x *CAppOverview) GetVrOnly() bool {
	if x != nil && x.VrOnly != nil {
		return *x.VrOnly
	}
	return false
}

func (x *CAppOverview) GetMastersubAppid() uint32 {
	if x != nil && x.MastersubAppid != nil {
		return *x.MastersubAppid
	}
	return 0
}

func (x *CAppOverview) GetMastersubIncludedwithLogo() string {
	if x != nil && x.MastersubIncludedwithLogo != nil {
		return *x.MastersubIncludedwithLogo
	}
	return ""
}

func (x *CAppOverview) GetSiteLicenseSiteName() string {
	if x != nil && x.SiteLicenseSiteName != nil {
		return *x.SiteLicenseSiteName
	}
	return ""
}

func (x *CAppOverview) GetShortcutOverrideAppid() uint32 {
	if x != nil && x.ShortcutOverrideAppid != nil {
		return *x.ShortcutOverrideAppid
	}
	return 0
}

func (x *CAppOverview) GetRtLastTimeLocallyPlayed() uint32 {
	if x != nil && x.RtLastTimeLocallyPlayed != nil {
		return *x.RtLastTimeLocallyPlayed
	}
	return 0
}

func (x *CAppOverview) GetRtPurchasedTime() uint32 {
	if x != nil && x.RtPurchasedTime != nil {
		return *x.RtPurchasedTime
	}
	return 0
}

func (x *CAppOverview) GetHeaderFilename() string {
	if x != nil && x.HeaderFilename != nil {
		return *x.HeaderFilename
	}
	return ""
}

func (x *CAppOverview) GetLocalCacheVersion() uint32 {
	if x != nil && x.LocalCacheVersion != nil {
		return *x.LocalCacheVersion
	}
	return 0
}

func (x *CAppOverview) GetNumberOfCopies() uint32 {
	if x != nil && x.NumberOfCopies != nil {
		return *x.NumberOfCopies
	}
	return Default_CAppOverview_NumberOfCopies
}

func (x *CAppOverview) GetSteamHwCompatCategoryPacked() uint32 {
	if x != nil && x.SteamHwCompatCategoryPacked != nil {
		return *x.SteamHwCompatCategoryPacked
	}
	return Default_CAppOverview_SteamHwCompatCategoryPacked
}

func (x *CAppOverview) GetAlbumCoverHash() string {
	if x != nil && x.AlbumCoverHash != nil {
		return *x.AlbumCoverHash
	}
	return ""
}

type CAppOverview_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppOverview    []*CAppOverview `protobuf:"bytes,1,rep,name=app_overview,json=appOverview" json:"app_overview,omitempty"`
	RemovedAppid   []uint32        `protobuf:"varint,2,rep,name=removed_appid,json=removedAppid" json:"removed_appid,omitempty"`
	FullUpdate     *bool           `protobuf:"varint,3,opt,name=full_update,json=fullUpdate" json:"full_update,omitempty"`
	UpdateComplete *bool           `protobuf:"varint,4,opt,name=update_complete,json=updateComplete" json:"update_complete,omitempty"`
}

func (x *CAppOverview_Change) Reset() {
	*x = CAppOverview_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_appoverview_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAppOverview_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAppOverview_Change) ProtoMessage() {}

func (x *CAppOverview_Change) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_appoverview_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAppOverview_Change.ProtoReflect.Descriptor instead.
func (*CAppOverview_Change) Descriptor() ([]byte, []int) {
	return file_steammessages_appoverview_proto_rawDescGZIP(), []int{2}
}

func (x *CAppOverview_Change) GetAppOverview() []*CAppOverview {
	if x != nil {
		return x.AppOverview
	}
	return nil
}

func (x *CAppOverview_Change) GetRemovedAppid() []uint32 {
	if x != nil {
		return x.RemovedAppid
	}
	return nil
}

func (x *CAppOverview_Change) GetFullUpdate() bool {
	if x != nil && x.FullUpdate != nil {
		return *x.FullUpdate
	}
	return false
}

func (x *CAppOverview_Change) GetUpdateComplete() bool {
	if x != nil && x.UpdateComplete != nil {
		return *x.UpdateComplete
	}
	return false
}

type CAppBootstrapData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid   *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Hidden  *bool    `protobuf:"varint,2,opt,name=hidden" json:"hidden,omitempty"`
	UserTag []string `protobuf:"bytes,3,rep,name=user_tag,json=userTag" json:"user_tag,omitempty"`
}

func (x *CAppBootstrapData) Reset() {
	*x = CAppBootstrapData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_appoverview_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAppBootstrapData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAppBootstrapData) ProtoMessage() {}

func (x *CAppBootstrapData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_appoverview_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAppBootstrapData.ProtoReflect.Descriptor instead.
func (*CAppBootstrapData) Descriptor() ([]byte, []int) {
	return file_steammessages_appoverview_proto_rawDescGZIP(), []int{3}
}

func (x *CAppBootstrapData) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CAppBootstrapData) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *CAppBootstrapData) GetUserTag() []string {
	if x != nil {
		return x.UserTag
	}
	return nil
}

type CLibraryBootstrapData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppData []*CAppBootstrapData `protobuf:"bytes,1,rep,name=app_data,json=appData" json:"app_data,omitempty"`
}

func (x *CLibraryBootstrapData) Reset() {
	*x = CLibraryBootstrapData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_appoverview_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLibraryBootstrapData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLibraryBootstrapData) ProtoMessage() {}

func (x *CLibraryBootstrapData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_appoverview_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLibraryBootstrapData.ProtoReflect.Descriptor instead.
func (*CLibraryBootstrapData) Descriptor() ([]byte, []int) {
	return file_steammessages_appoverview_proto_rawDescGZIP(), []int{4}
}

func (x *CLibraryBootstrapData) GetAppData() []*CAppBootstrapData {
	if x != nil {
		return x.AppData
	}
	return nil
}

var File_steammessages_appoverview_proto protoreflect.FileDescriptor

var file_steammessages_appoverview_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x61, 0x70, 0x70, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92,
	0x05, 0x0a, 0x1a, 0x43, 0x41, 0x70, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x50, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a,
	0x01, 0x30, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a,
	0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e,
	0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x65, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x39, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x20, 0x69, 0x73,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x4f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x4c, 0x65, 0x66, 0x74, 0x12, 0x4d, 0x0a, 0x24, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x75, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x22, 0xea, 0x12, 0x0a, 0x0c, 0x43, 0x41, 0x70, 0x70, 0x4f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x14, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x64, 0x54, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x12, 0x3c, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11,
	0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x72,
	0x75, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d,
	0x72, 0x75, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x38, 0x0a, 0x17, 0x72, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x14, 0x72, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50,
	0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x12, 0x47,
	0x0a, 0x1f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x1b, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x54,
	0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x74, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x72, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x54, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a,
	0x18, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x15, 0x72, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x74, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x12, 0x72, 0x74, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x75, 0x0a, 0x17,
	0x78, 0x62, 0x6f, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x45, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x15, 0x78, 0x62,
	0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76, 0x72, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x4f, 0x6e, 0x44,
	0x69, 0x73, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x63, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x63, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x43, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x43, 0x41, 0x70, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x50, 0x65, 0x72,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x17, 0x6d, 0x6f, 0x73,
	0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x15, 0x6d,
	0x6f, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x3a,
	0x01, 0x30, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x6f, 0x6d,
	0x62, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x14, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x6d, 0x62,
	0x73, 0x12, 0x42, 0x0a, 0x1c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x6f, 0x6d, 0x62,
	0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x19, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x42, 0x6f, 0x6d, 0x62, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x6f,
	0x6d, 0x62, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x17, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x42, 0x6f, 0x6d, 0x62, 0x73, 0x12, 0x48, 0x0a, 0x1f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x1c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x6d, 0x62, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x76, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x76, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x75, 0x62, 0x41, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x3e, 0x0a, 0x1b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x75, 0x62,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x77, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x6f,
	0x12, 0x33, 0x0a, 0x16, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x73, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x69, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x1b, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x72, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72,
	0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f,
	0x70, 0x69, 0x65, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x0e, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a,
	0x1f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x68, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x1b, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x48, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68,
	0x22, 0xb6, 0x01, 0x0a, 0x13, 0x43, 0x41, 0x70, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x41, 0x70, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x5c, 0x0a, 0x11, 0x43, 0x41, 0x70,
	0x70, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x22, 0x46, 0x0a, 0x15, 0x43, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2d, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x61, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x2a,
	0xcc, 0x0a, 0x0a, 0x0e, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x02,
	0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x03,
	0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x1e, 0x0a,
	0x1a, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x1c, 0x0a,
	0x18, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x6b,
	0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d,
	0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x10, 0x08, 0x12,
	0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x50, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x54, 0x6f, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x10, 0x0b, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f,
	0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x10, 0x0c,
	0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x10,
	0x0d, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x6b,
	0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x11, 0x12,
	0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10,
	0x12, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x10, 0x13, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x15, 0x12, 0x22, 0x0a, 0x1e, 0x6b,
	0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x16, 0x12,
	0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x10, 0x17, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x18, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x19, 0x12,
	0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x10, 0x1a, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x1b, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x46, 0x6f, 0x72, 0x46, 0x72, 0x65, 0x65, 0x10, 0x1c, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x54, 0x6f, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x10, 0x1d, 0x12, 0x22, 0x0a, 0x1e,
	0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x47, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x10, 0x1e,
	0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x10, 0x1f, 0x12, 0x1f,
	0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x20, 0x12,
	0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x21, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x22, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x75, 0x74, 0x4f, 0x66,
	0x44, 0x61, 0x74, 0x65, 0x10, 0x23, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x24, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x25, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x26, 0x12, 0x20, 0x0a, 0x1c,
	0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x27, 0x2a, 0xf7,
	0x02, 0x0a, 0x0f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x12, 0x21, 0x0a,
	0x1d, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x03,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12,
	0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63, 0x10, 0x05, 0x12,
	0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12,
	0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10,
	0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x10,
	0x09, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x73,
	0x65, 0x77, 0x68, 0x65, 0x72, 0x65, 0x10, 0x0a, 0x2a, 0x91, 0x01, 0x0a, 0x1a, 0x45, 0x41, 0x70,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x41, 0x70,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x02, 0x2a, 0xfd, 0x01, 0x0a,
	0x23, 0x45, 0x41, 0x70, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x47, 0x79, 0x72, 0x6f,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x47, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x47, 0x79, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61,
	0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64,
	0x47, 0x79, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61,
	0x64, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x47, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x47, 0x79, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x10, 0x01, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x47,
	0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x47, 0x79, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x70,
	0x61, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x10, 0x02, 0x2a, 0xa1, 0x01, 0x0a,
	0x0e, 0x45, 0x41, 0x70, 0x70, 0x48, 0x44, 0x52, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x48, 0x44, 0x52, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f,
	0x45, 0x48, 0x44, 0x52, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x53, 0x44, 0x52, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x48, 0x44, 0x52, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x48, 0x44, 0x52, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x48,
	0x44, 0x52, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x48, 0x44, 0x52, 0x5f, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x48, 0x44, 0x52,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x48, 0x44, 0x52, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04,
	0x42, 0x05, 0x48, 0x01, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_appoverview_proto_rawDescOnce sync.Once
	file_steammessages_appoverview_proto_rawDescData = file_steammessages_appoverview_proto_rawDesc
)

func file_steammessages_appoverview_proto_rawDescGZIP() []byte {
	file_steammessages_appoverview_proto_rawDescOnce.Do(func() {
		file_steammessages_appoverview_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_appoverview_proto_rawDescData)
	})
	return file_steammessages_appoverview_proto_rawDescData
}

var file_steammessages_appoverview_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_steammessages_appoverview_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_steammessages_appoverview_proto_goTypes = []any{
	(EDisplayStatus)(0),                      // 0: EDisplayStatus
	(EAppCloudStatus)(0),                     // 1: EAppCloudStatus
	(EAppControllerSupportLevel)(0),          // 2: EAppControllerSupportLevel
	(EAppGamepadGyroTrackpadSupportLevel)(0), // 3: EAppGamepadGyroTrackpadSupportLevel
	(EAppHDRSupport)(0),                      // 4: EAppHDRSupport
	(*CAppOverview_PerClientData)(nil),       // 5: CAppOverview_PerClientData
	(*CAppOverview)(nil),                     // 6: CAppOverview
	(*CAppOverview_Change)(nil),              // 7: CAppOverview_Change
	(*CAppBootstrapData)(nil),                // 8: CAppBootstrapData
	(*CLibraryBootstrapData)(nil),            // 9: CLibraryBootstrapData
	(EProtoAppType)(0),                       // 10: EProtoAppType
}
var file_steammessages_appoverview_proto_depIdxs = []int32{
	0,  // 0: CAppOverview_PerClientData.display_status:type_name -> EDisplayStatus
	10, // 1: CAppOverview.app_type:type_name -> EProtoAppType
	2,  // 2: CAppOverview.xbox_controller_support:type_name -> EAppControllerSupportLevel
	5,  // 3: CAppOverview.per_client_data:type_name -> CAppOverview_PerClientData
	6,  // 4: CAppOverview_Change.app_overview:type_name -> CAppOverview
	8,  // 5: CLibraryBootstrapData.app_data:type_name -> CAppBootstrapData
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_steammessages_appoverview_proto_init() }
func file_steammessages_appoverview_proto_init() {
	if File_steammessages_appoverview_proto != nil {
		return
	}
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_appoverview_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CAppOverview_PerClientData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_appoverview_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CAppOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_appoverview_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CAppOverview_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_appoverview_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CAppBootstrapData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_appoverview_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CLibraryBootstrapData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_appoverview_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_appoverview_proto_goTypes,
		DependencyIndexes: file_steammessages_appoverview_proto_depIdxs,
		EnumInfos:         file_steammessages_appoverview_proto_enumTypes,
		MessageInfos:      file_steammessages_appoverview_proto_msgTypes,
	}.Build()
	File_steammessages_appoverview_proto = out.File
	file_steammessages_appoverview_proto_rawDesc = nil
	file_steammessages_appoverview_proto_goTypes = nil
	file_steammessages_appoverview_proto_depIdxs = nil
}
